{"version":3,"sources":["src/menu.tsx"],"names":["React","$fsx","r","react_1","react_window_1","styled_components_1","label_1","menu_container_1","menu_row_1","option_1","utils_1","EmptyOptionItem","default","OptionComponent","OptionItem","Empty","props","createElement","SelectLabel","emptyText","exports","Menu","rowHeight","selectedIndex","open","error","menuWidth","menuHeight","hideSelectedOptions","currentValue","isArray","value","options","useMemo","filter","option","some","val","equal","equalCompareProp","rect","setRect","useState","list","useRef","width","height","Math","min","max","length","useEffect","current","undefined","scrollToItem","itemData","Object","assign","onSelect","values","item","Array","from","Set","search","labelComponent","optionComponent","MenuContainer","onRect","MenuContent","menuComponent","itemCount","FixedSizeList","className","ref","itemSize","MenuRow","renderList"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useEffect, useRef, useState } from 'react';\nimport { FixedSizeList } from 'react-window';\nimport styled from 'styled-components';\nimport { SelectLabel } from './label';\nimport { MenuContainer } from './menu-container';\nimport { MenuRow } from './menu-row';\nimport { OptionComponent } from './option';\nimport { MenuComponentProps, Option, Rect } from './typings';\nimport { equal, isArray } from './utils';\n\nconst EmptyOptionItem = styled(OptionComponent.OptionItem)`\n    height: 100%;\n    border: 1px solid #ccc;\n`;\n\nconst Empty = (props: { emptyText?: string }) => (\n    <EmptyOptionItem>\n        <SelectLabel>\n            <i>{props.emptyText || 'No results'}</i>\n        </SelectLabel>\n    </EmptyOptionItem>\n);\n\nexport function Menu(props: MenuComponentProps) {\n    const {\n        rowHeight = 32,\n        selectedIndex,\n        open,\n        error,\n        menuWidth,\n        menuHeight,\n        hideSelectedOptions\n    } = props;\n    const currentValue = isArray(props.value) ? props.value : [props.value];\n    const options = React.useMemo(\n        () =>\n            (props.options || []).filter(option => {\n                if (hideSelectedOptions) {\n                    const selected = currentValue.some(val =>\n                        equal(val, option.value, props.equalCompareProp)\n                    );\n\n                    if (selected) {\n                        return false;\n                    }\n                }\n\n                return true;\n            }),\n        [\n            props.options,\n            props.equalCompareProp,\n            hideSelectedOptions,\n            currentValue\n        ]\n    );\n    const [rect, setRect] = useState<Rect>();\n    const list = useRef<FixedSizeList>(null);\n    const width = menuWidth || (rect && rect.width !== 'auto' ? rect.width : 0);\n    const height = Math.min(\n        Math.max(options.length * rowHeight, rowHeight) + 2,\n        menuHeight || 185\n    );\n\n    useEffect(() => {\n        if (\n            open &&\n            list.current &&\n            selectedIndex !== undefined &&\n            selectedIndex !== -1\n        ) {\n            list.current.scrollToItem(selectedIndex, 'center');\n        }\n    }, [open]);\n    const itemData = React.useMemo(() => {\n        return {\n            ...props,\n            options,\n            onSelect: (value: any, option: Option) => {\n                if (isArray(props.value)) {\n                    const found = props.value.some(item =>\n                        equal(item, value, props.equalCompareProp)\n                    );\n                    const values = found\n                        ? props.value.filter(\n                              item =>\n                                  !equal(item, value, props.equalCompareProp)\n                          )\n                        : Array.from(new Set([...props.value, value]));\n\n                    props.onSelect(values, option);\n                } else {\n                    props.onSelect(value, option);\n                }\n            }\n        };\n    }, [\n        options.length,\n        props.search,\n        props.rowHeight,\n        props.selectedIndex,\n        props.labelComponent,\n        props.optionComponent,\n        props.value\n    ]);\n\n    function renderList(width: number, height: number, rowHeight: number) {\n        const MenuContent = props.menuComponent;\n        const itemCount = options.length;\n\n        if (MenuContent) {\n            return <MenuContent {...props} />;\n        }\n\n        if (itemCount === 0) {\n            return <Empty emptyText={props.emptyText} />;\n        }\n\n        return (\n            <FixedSizeList\n                className=\"react-slct-menu-list\"\n                ref={list}\n                width={width}\n                height={height}\n                itemSize={rowHeight}\n                itemCount={itemCount}\n                itemData={itemData}\n            >\n                {MenuRow}\n            </FixedSizeList>\n        );\n    }\n\n    return open ? (\n        <MenuContainer\n            error={error}\n            menuWidth={width}\n            menuHeight={height}\n            onRect={rect => setRect(rect)}\n        >\n            {renderList(width, height, rowHeight)}\n        </MenuContainer>\n    ) : null;\n}\n"]}