{"version":3,"sources":["src/index.tsx"],"names":["React","$fsx","r","styled_components_1","menu_1","exports","Menu","menu_container_1","typings_1","LabelComponentProps","MenuComponentProps","Option","SelectProps","utils_1","keys","value_1","option_1","OptionComponent","typings_2","OptionComponentProps","ValueComponentMultiProps","ValueComponentSingleProps","SelectStaticControl","value_component_multi_1","ValueComponentMulti","value_component_single_1","ValueComponentSingle","Container","default","div","props","disabled","NativeSelect","select","native","css","Select","forwardRef","ref","open","setOpen","useState","blindText","setBlindText","selectedIndex","setSelectedIndex","undefined","search","setSearch","focused","setFocused","blindTextTimeout","useRef","nativeSelect","className","creatable","clearable","placeholder","value","error","menuComponent","labelComponent","optionComponent","valueComponentSingle","valueComponentMulti","arrowComponent","clearComponent","hideSelectedOptions","equalCompareProp","multi","emptyText","rowHeight","menuWidth","menuHeight","keepSearchOnBlur","required","creatableText","searchable","document","getDocument","options","newOptions","showCreate","some","option","label","filter","replaceUmlauts","toLowerCase","includes","getOptions","toggleMenu","openMenu","closeMenu","findIndex","equal","_a","onOpen","call","removeDocumentListener","addEventListener","onDocumentClick","callback","onClose","createOption","cb","onCreate","removeEventListener","cleanBlindText","current","setTimeout","findOptionIndex","val","index","String","onChangeNativeSelect","e","currentTarget","onChange","onClear","values","Array","from","selectedOptions","map","htmlOption","onOptionSelect","optionWasCreated","selectOnNative","isArray","createValue","find","optionIsCreatable","Boolean","useEffect","newSelectedIndex","startsWith","handleBlindTextUpdate","control","close","getValue","Function","Object","useCallback","target","closest","contains","valueOptions","getValueOptions","children","showPlaceholder","length","MenuContainer","onToggle","onRef","renderChildren","classNames","c","createElement","join","data-role","onKeyUp","keyCode","ARROW_UP","ARROW_DOWN","ENTER","newValue","ESC","onKeyDown","TAB","BACKSPACE","clearTimeout","slice","SPACE","key","fromCodePoint","test","handleBlindText","dataRole","propDisabled","multiple","tabIndex","i","toKey","renderNativeSelect","Value","mobile","valueIconComponent","onClick","onSearch","onSearchFocus","onSearchBlur","onOptionRemove","onSelect"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport './global-stylings';\nimport { Menu } from './menu';\nimport { MenuContainer } from './menu-container';\nimport {\n    LabelComponentProps,\n    MenuComponentProps,\n    Option,\n    SelectProps\n} from './typings';\nimport {\n    equal,\n    getDocument,\n    getValueOptions,\n    isArray,\n    keys,\n    replaceUmlauts,\n    toKey\n} from './utils';\nimport { Value } from './value';\nexport { OptionComponent } from './option';\nexport {\n    OptionComponentProps,\n    ValueComponentMultiProps,\n    ValueComponentSingleProps,\n    SelectStaticControl\n} from './typings';\nexport { ValueComponentMulti } from './value-component-multi';\nexport { ValueComponentSingle } from './value-component-single';\nexport {\n    SelectProps,\n    Menu,\n    MenuComponentProps,\n    LabelComponentProps,\n    Option,\n    keys\n};\n\nconst Container = styled.div`\n    display: flex;\n    position: relative;\n    cursor: default;\n    width: 100%;\n    box-sizing: border-box;\n    pointer-events: ${(props: { disabled?: boolean }) =>\n        props.disabled ? 'none' : 'auto'};\n    opacity: ${(props: { disabled?: boolean }) => (props.disabled ? 0.75 : 1)};\n    user-select: none;\n`;\n\nconst NativeSelect = styled.select`\n    display: block;\n    opacity: 0;\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    ${(props: { native?: boolean }) =>\n        props.native\n            ? css`\n                  z-index: 1;\n              `\n            : css`\n                  pointer-events: none;\n                  z-index: auto;\n              `};\n`;\n\nfunction SelectImpl<T = any>(\n    props: SelectProps<T>,\n    ref: React.Ref<HTMLDivElement>\n): JSX.Element | null {\n    const [open, setOpen] = React.useState(false);\n    const [blindText, setBlindText] = React.useState('');\n    const [selectedIndex, setSelectedIndex] = React.useState<\n        number | undefined\n    >(undefined);\n    const [search, setSearch] = React.useState<string | undefined>(undefined);\n    const [focused, setFocused] = React.useState(false);\n    const blindTextTimeout = React.useRef(0);\n    const nativeSelect = React.useRef<HTMLSelectElement>(null);\n\n    const {\n        className,\n        creatable,\n        clearable,\n        placeholder,\n        value,\n        disabled,\n        error,\n        menuComponent,\n        labelComponent,\n        optionComponent,\n        valueComponentSingle,\n        valueComponentMulti,\n        arrowComponent,\n        clearComponent,\n        hideSelectedOptions,\n        equalCompareProp,\n        multi,\n        native,\n        emptyText,\n        rowHeight,\n        menuWidth,\n        menuHeight,\n        keepSearchOnBlur,\n        required,\n        creatableText\n    } = props;\n    const searchable = props.searchable || creatable;\n    const document = getDocument();\n    const options = getOptions();\n\n    React.useEffect(() => {\n        if (blindText) {\n            handleBlindTextUpdate();\n        }\n    }, [blindText]);\n\n    React.useEffect(() => {\n        if (props.control) {\n            const ref = { close: () => closeMenu(getValue()), open: openMenu };\n\n            if (props.control instanceof Function) {\n                props.control(ref);\n            } else if (props.control instanceof Object) {\n                props.control.current = ref;\n            }\n        }\n    }, [props.control]);\n\n    function getOptions(): Option<T>[] {\n        let newOptions = props.options || [];\n        const showCreate =\n            creatable &&\n            !newOptions.some((option) => {\n                const { value, label } = option;\n\n                return (\n                    (typeof value === 'string' && value === search) ||\n                    label === search\n                );\n            });\n\n        if (search) {\n            newOptions = newOptions.filter((option) =>\n                replaceUmlauts(option.label)\n                    .toLowerCase()\n                    .includes(replaceUmlauts(search).toLowerCase())\n            );\n        }\n\n        if (showCreate && search) {\n            const label = creatableText\n                ? typeof creatableText === 'string'\n                    ? creatableText\n                    : creatableText(search)\n                : `Create \"${search}\"`;\n\n            newOptions = [\n                {\n                    label,\n                    value: search as any,\n                    creatable: true\n                },\n                ...newOptions\n            ];\n        }\n\n        return newOptions;\n    }\n\n    function toggleMenu(): void {\n        const newOpen = !open;\n\n        if (newOpen) {\n            openMenu();\n        } else {\n            closeMenu(props.value);\n        }\n    }\n\n    function openMenu(): void {\n        const selectedIndex = props.hideSelectedOptions\n            ? undefined\n            : options.findIndex((option) =>\n                  equal(option.value, props.value, props.equalCompareProp)\n              );\n        const keepSearchOnBlur = props.keepSearchOnBlur && !props.value;\n\n        setOpen(true);\n        setSearch(keepSearchOnBlur ? search : undefined);\n        setSelectedIndex(selectedIndex);\n        props.onOpen?.();\n\n        addDocumentListener();\n    }\n\n    function closeMenu(value: any | any[], callback = () => {}): void {\n        const keepSearchOnBlur = props.keepSearchOnBlur && !value;\n\n        removeDocumentListener();\n        setOpen(false);\n        setSearch(keepSearchOnBlur ? search : undefined);\n        setSelectedIndex(undefined);\n        props.onClose?.();\n\n        callback();\n    }\n\n    function createOption(value: string, cb?: () => void): void {\n        if (props.onCreate) {\n            closeMenu(value, () => {\n                props.onCreate?.(value);\n                cb?.();\n            });\n        }\n    }\n\n    function addDocumentListener(): void {\n        removeDocumentListener();\n\n        document?.addEventListener('click', onDocumentClick);\n    }\n\n    function removeDocumentListener(): void {\n        document?.removeEventListener('click', onDocumentClick);\n    }\n\n    function cleanBlindText(): void {\n        blindTextTimeout.current = setTimeout(() => setBlindText(''), 700);\n    }\n\n    function findOptionIndex(val: any) {\n        let index = options.findIndex((option) => option.value === val);\n\n        if (index === -1) {\n            if (typeof val === 'object') {\n                index = options.findIndex((option) =>\n                    equal(option.value, val, props.equalCompareProp)\n                );\n            }\n\n            if (index === -1) {\n                return '';\n            }\n        }\n\n        return String(index);\n    }\n\n    function onChangeNativeSelect(e: React.SyntheticEvent<HTMLSelectElement>) {\n        const { currentTarget } = e;\n\n        if (props.onChange) {\n            if (currentTarget.value === '') {\n                onClear();\n            } else {\n                const values = Array.from(currentTarget.selectedOptions).map(\n                    (htmlOption) => options[htmlOption.index - 1].value\n                );\n\n                if (multi) {\n                    props.onChange(values as any);\n                } else {\n                    props.onChange(values[0] as any);\n                }\n            }\n        }\n    }\n\n    function onSearchFocus() {\n        if (!open && !focused && !native) {\n            openMenu();\n        }\n\n        setFocused(true);\n    }\n\n    function onSearchBlur() {\n        setFocused(false);\n    }\n\n    function onOptionSelect(value: any | any[], option?: Option<T>): void {\n        const { current } = nativeSelect;\n        let optionWasCreated = false;\n\n        const selectOnNative = () => {\n            if (current) {\n                current.value =\n                    isArray(value) && multi\n                        ? (value.map(findOptionIndex) as any)\n                        : findOptionIndex(value);\n            }\n\n            setFocused(true);\n            closeMenu(value, () => props.onChange?.(value, option));\n        };\n\n        if (creatable) {\n            const createValue = (val: any) => {\n                const option = options.find(\n                    (option) =>\n                        optionIsCreatable(option) && option.value === val\n                );\n\n                if (option) {\n                    optionWasCreated = true;\n                    createOption(option.value as any, selectOnNative);\n                }\n            };\n\n            if (isArray(value) && multi) {\n                value.map(createValue);\n            } else {\n                createValue(value);\n            }\n        }\n\n        if (!optionWasCreated) {\n            selectOnNative();\n        }\n    }\n\n    function onOptionRemove(value: any): void {\n        if (isArray(props.value) && props.multi) {\n            const values = props.value.filter(\n                (val) => !equal(val, value, props.equalCompareProp)\n            );\n\n            onOptionSelect(values);\n        }\n    }\n\n    function onClear() {\n        onOptionSelect(props.multi ? [] : undefined);\n    }\n\n    function onSearch(search: string): void {\n        setSearch(search);\n        setOpen(true);\n\n        if (options.length === 1 || (props.creatable && search)) {\n            setSelectedIndex(0);\n        } else {\n            setSelectedIndex(undefined);\n        }\n\n        props.onSearch?.(search);\n    }\n\n    function optionIsCreatable(option: Option<T>): boolean {\n        return (\n            creatable && option.creatable && Boolean(props.onCreate && search)\n        );\n    }\n\n    const onDocumentClick = React.useCallback((e) => {\n        const { target } = e;\n\n        if (target.closest('.react-slct-menu')) {\n            return;\n        }\n\n        if (typeof ref === 'object' && !ref?.current?.contains(target)) {\n            closeMenu(props.value);\n        }\n    }, []);\n\n    function onKeyDown({ keyCode }: React.KeyboardEvent): void {\n        switch (keyCode) {\n            case keys.TAB:\n                if (open) {\n                    closeMenu(props.value);\n                }\n                break;\n        }\n\n        if (!searchable && !creatable) {\n            handleBlindText(keyCode);\n        }\n    }\n\n    function onKeyUp({ keyCode }: React.KeyboardEvent): void {\n        let newSelectedIndex = selectedIndex;\n\n        switch (keyCode) {\n            case keys.ARROW_UP:\n                if (open) {\n                    if (newSelectedIndex !== undefined) {\n                        newSelectedIndex = newSelectedIndex - 1;\n\n                        if (newSelectedIndex < 0) {\n                            newSelectedIndex = options.length - 1;\n                        }\n                    }\n\n                    setSelectedIndex(newSelectedIndex);\n                } else {\n                    openMenu();\n                }\n                break;\n            case keys.ARROW_DOWN:\n                if (open) {\n                    if (\n                        newSelectedIndex === undefined ||\n                        newSelectedIndex === options.length - 1\n                    ) {\n                        newSelectedIndex = 0;\n                    } else {\n                        newSelectedIndex = newSelectedIndex + 1;\n                    }\n\n                    setSelectedIndex(newSelectedIndex);\n                } else {\n                    openMenu();\n                }\n                break;\n            case keys.ENTER:\n                if (selectedIndex === 0 && optionIsCreatable(options[0])) {\n                    createOption(search!);\n                } else if (\n                    newSelectedIndex !== undefined &&\n                    options[newSelectedIndex]\n                ) {\n                    const option = options[newSelectedIndex];\n                    const newValue = option.value;\n\n                    onOptionSelect(\n                        isArray(value) && multi\n                            ? [...value, newValue]\n                            : newValue,\n                        option\n                    );\n                }\n                break;\n            case keys.ESC:\n                if (open) {\n                    closeMenu(value);\n                }\n                break;\n        }\n    }\n\n    function handleBlindText(keyCode: number): void {\n        if (keyCode === keys.BACKSPACE && blindText.length) {\n            clearTimeout(blindTextTimeout.current);\n\n            setBlindText(blindText.slice(0, blindText.length - 1));\n            cleanBlindText();\n        } else if (keyCode === keys.SPACE) {\n            clearTimeout(blindTextTimeout.current);\n\n            setBlindText(blindText + ' ');\n            cleanBlindText();\n        } else {\n            const key = String.fromCodePoint(keyCode);\n\n            if (/\\w/.test(key)) {\n                clearTimeout(blindTextTimeout.current);\n\n                setBlindText(blindText + key);\n                cleanBlindText();\n            }\n        }\n    }\n\n    function handleBlindTextUpdate(): void {\n        if (open) {\n            const newSelectedIndex = options.findIndex((option) =>\n                option.label.toLowerCase().startsWith(blindText.toLowerCase())\n            );\n\n            if (newSelectedIndex >= 0) {\n                setSelectedIndex(newSelectedIndex);\n            }\n        } else if (!multi) {\n            if (blindText) {\n                const option = options.find((option) =>\n                    option.label\n                        .toLowerCase()\n                        .startsWith(blindText.toLowerCase())\n                );\n\n                if (option) {\n                    onOptionSelect(option.value, option);\n                }\n            } else {\n                onOptionSelect(undefined);\n            }\n        }\n    }\n\n    function getValue(): T | T[] | undefined {\n        const valueOptions = getValueOptions(\n            props.options || [],\n            props.value,\n            props.multi,\n            props.equalCompareProp\n        );\n        return !multi\n            ? props.value\n            : valueOptions.map((option) => option.value);\n    }\n\n    function renderChildren(): JSX.Element | null {\n        const value = getValue();\n        const showPlaceholder =\n            !search &&\n            (isArray(value) && multi\n                ? value.length === 0\n                : value === undefined || value === null);\n\n        if (!props.children) {\n            return null;\n        }\n\n        return props.children({\n            options,\n            open,\n            value,\n            MenuContainer,\n            placeholder: showPlaceholder ? placeholder : undefined,\n            onToggle: toggleMenu,\n            onClose: () => closeMenu(value),\n            onOpen: openMenu,\n            onRef: ref\n        });\n    }\n\n    function renderNativeSelect(): React.ReactNode {\n        const dataRole = props['data-role']\n            ? `select-${props['data-role']}`\n            : undefined;\n        const clearable = props.clearable && native;\n        const value =\n            isArray(props.value) && multi\n                ? props.value.map(findOptionIndex)\n                : findOptionIndex(props.value || '');\n        const propDisabled = disabled ? disabled : required ? false : !native;\n\n        return (\n            <NativeSelect\n                ref={nativeSelect as any}\n                multiple={multi}\n                value={value}\n                disabled={propDisabled}\n                required={required}\n                native={native}\n                tabIndex={-1}\n                data-role={dataRole}\n                onChange={onChangeNativeSelect}\n            >\n                <option value=\"\" disabled={!clearable}>\n                    {placeholder}\n                </option>\n                {options.map((option, i) => (\n                    <option\n                        key={toKey(option.value, props.equalCompareProp)}\n                        value={`${i}`}\n                        disabled={option.disabled}\n                    >\n                        {option.label}\n                    </option>\n                ))}\n            </NativeSelect>\n        );\n    }\n\n    if (props.children) {\n        return renderChildren();\n    }\n\n    const classNames = [\n        'react-slct',\n        className,\n        open && 'open',\n        error && 'has-error'\n    ].filter((c) => Boolean(c));\n\n    return (\n        <Container\n            className={classNames.join(' ')}\n            disabled={disabled}\n            ref={ref}\n            data-role={props['data-role']}\n            onKeyUp={onKeyUp}\n            onKeyDown={onKeyDown}\n        >\n            {renderNativeSelect()}\n            <Value\n                clearable={clearable}\n                searchable={searchable}\n                open={open}\n                disabled={disabled}\n                multi={multi}\n                mobile={native}\n                focused={focused}\n                options={props.options}\n                placeholder={placeholder}\n                error={error}\n                value={value}\n                search={search}\n                keepSearchOnBlur={keepSearchOnBlur}\n                equalCompareProp={equalCompareProp}\n                labelComponent={labelComponent}\n                valueComponentSingle={valueComponentSingle}\n                valueComponentMulti={valueComponentMulti}\n                arrowComponent={arrowComponent}\n                clearComponent={clearComponent}\n                valueIconComponent={props.valueIconComponent}\n                onClear={onClear}\n                onClick={toggleMenu}\n                onSearch={onSearch}\n                onSearchFocus={onSearchFocus}\n                onSearchBlur={onSearchBlur}\n                onOptionRemove={onOptionRemove}\n            />\n            <Menu\n                open={open}\n                options={options}\n                value={value}\n                multi={multi}\n                error={error}\n                search={search}\n                selectedIndex={selectedIndex}\n                menuComponent={menuComponent}\n                labelComponent={labelComponent}\n                optionComponent={optionComponent}\n                hideSelectedOptions={hideSelectedOptions}\n                equalCompareProp={equalCompareProp}\n                emptyText={emptyText}\n                rowHeight={rowHeight}\n                menuWidth={menuWidth}\n                menuHeight={menuHeight}\n                onSelect={onOptionSelect}\n            />\n        </Container>\n    );\n}\n\nexport const Select = React.forwardRef<HTMLDivElement, SelectProps<any>>(\n    SelectImpl\n);\n"]}