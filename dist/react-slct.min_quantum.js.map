{"version":3,"sources":["src/value.tsx"],"names":["lodash_decorators_1","$fsx","r","React","styled_components_1","label_1","utils_1","value_component_multi_1","value_component_single_1","Button","default","button","ArrowButton","ValueContainer","div","props","mobile","disabled","error","focused","ValueLeft","multi","hasValue","ValueRight","Placeholder","SelectLabel","ClearButton","ClearContainer","span","ClearX","createElement","Search","canSearch","css","Value","PureComponent","[object Object]","super","this","search","createRef","window","getWindow","addEventListener","blur","prevProps","current","innerText","focus","options","value","clearable","open","equalCompareProp","ArrowComponent","arrowComponent","ClearComponent","clearComponent","ValueIconComponent","valueIconComponent","valueOptions","getValueOptions","showClearer","Boolean","length","searchAtStart","searchAtEnd","data-role","className","onClick","renderSearch","renderValues","type","tabIndex","onClear","searchable","keepSearchOnBlur","onSearchFocus","onSearchBlur","contentEditable","onInput","onSearch","onKeyDown","onFocus","onBlur","ref","placeholder","labelComponent","valueComponentSingle","valueComponentMulti","Single","ValueComponentSingle","Multi","ValueComponentMulti","map","option","key","toKey","onRemove","onOptionRemove","el","getSelection","document","createRange","range","sel","selectNodeContents","collapse","removeAllRanges","addRange","e","stopPropagation","currentTarget","trim","preventDefault","metaKey","keyCode","keys","TAB","ENTER","ARROW_UP","ARROW_DOWN","tslib_1","__decorate","bind","SyntheticEvent","_a","Object","KeyboardEvent","_b","_c","exports"],"mappings":"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","sourcesContent":["import { bind } from 'lodash-decorators';\nimport * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { SelectLabel } from './label';\nimport { keys, getValueOptions, getWindow, toKey } from './utils';\nimport { SelectProps, Option } from './typings';\nimport { ValueComponentMulti } from './value-component-multi';\nimport { ValueComponentSingle } from './value-component-single';\n\nexport interface ValueProps {\n    options: SelectProps['options'];\n    value: SelectProps['value'];\n    placeholder: SelectProps['placeholder'];\n    clearable: SelectProps['clearable'];\n    searchable: SelectProps['searchable'];\n    labelComponent: SelectProps['labelComponent'];\n    valueComponentSingle: SelectProps['valueComponentSingle'];\n    valueComponentMulti: SelectProps['valueComponentMulti'];\n    arrowComponent: SelectProps['arrowComponent'];\n    clearComponent: SelectProps['clearComponent'];\n    valueIconComponent: SelectProps['valueIconComponent'];\n    multi: SelectProps['multi'];\n    mobile: SelectProps['native'];\n    disabled: SelectProps['disabled'];\n    error: SelectProps['error'];\n    equalCompareProp: SelectProps['equalCompareProp'];\n    search?: string;\n    keepSearchOnBlur?: boolean;\n    open: boolean;\n    focused?: boolean;\n    onClear(): void;\n    onClick(): void;\n    onSearch(search: string): void;\n    onSearchFocus(): void;\n    onSearchBlur(): void;\n    onOptionRemove(value: any): void;\n}\n\ninterface SearchProps {\n    canSearch?: boolean;\n}\n\ninterface ValueContainerProps {\n    mobile?: boolean;\n    disabled?: boolean;\n    focused?: boolean;\n    error?: boolean;\n}\n\ninterface ValueLeftProps {\n    multi?: boolean;\n    hasValue?: boolean;\n}\n\nconst Button = styled.button`\n    background: transparent;\n    border: none;\n    margin: 0;\n    font-size: 20px;\n    padding: 0;\n    line-height: 1;\n    cursor: pointer;\n\n    &:focus {\n        outline: none;\n    }\n`;\n\nconst ArrowButton = styled(Button)`\n    font-size: 12px;\n    color: #ccc;\n    transform: translateY(2px);\n\n    &:hover {\n        color: #333;\n    }\n`;\n\nconst ValueContainer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    flex: 1;\n    min-height: 32px;\n    pointer-events: ${(props: ValueContainerProps) =>\n        props.mobile || props.disabled ? 'none' : 'auto'};\n    padding: 5px 10px;\n    background: #fff;\n    cursor: default;\n    border-width: 1px;\n    border-style: solid;\n    border-color: ${(props: ValueContainerProps) =>\n        props.error ? 'var(--react-slct-error-color)' : '#ccc'};\n    z-index: 0;\n    box-sizing: border-box;\n    max-width: 100%;\n    box-shadow: ${(props: ValueContainerProps) =>\n        props.focused ? 'rgba(0, 0, 0, 0.15) 0 0 2px' : 'none'};\n`;\n\nconst ValueLeft = styled.div`\n    display: flex;\n    flex: 1;\n    align-items: center;\n    flex-wrap: ${(props: ValueLeftProps) =>\n        props.multi && props.hasValue ? 'wrap' : 'nowrap'};\n    user-select: none;\n    min-width: 0;\n    box-sizing: border-box;\n    margin: ${(props: ValueLeftProps) =>\n        props.multi && props.hasValue ? '-2px -5px' : 0};\n`;\n\nconst ValueRight = styled.div`\n    display: flex;\n    align-items: center;\n    margin-left: 4px;\n    box-sizing: border-box;\n`;\n\nconst Placeholder = styled(SelectLabel)`\n    color: #aaa;\n`;\n\nconst ClearButton = styled(Button)`\n    margin-right: 6px;\n`;\n\nconst ClearContainer = styled.span`\n    color: #ccc;\n\n    &:hover {\n        color: #333;\n    }\n`;\n\nconst ClearX = () => <ClearContainer>Ã—</ClearContainer>;\n\nconst Search = styled.span`\n    min-width: 1px;\n    margin-left: -1px;\n    user-select: text;\n\n    ${(props: SearchProps) =>\n        props.canSearch\n            ? css`\n                  opacity: 1;\n                  position: relative;\n                  left: 1px;\n              `\n            : css`\n                  position: absolute;\n                  opacity: 0;\n              `}\n\n    &:focus {\n        outline: none;\n    }\n`;\n\nexport class Value extends React.PureComponent<ValueProps> {\n    search: React.RefObject<HTMLSpanElement>;\n\n    constructor(props: ValueProps) {\n        super(props);\n\n        this.search = React.createRef();\n\n        const window = getWindow();\n\n        if (window) {\n            window.addEventListener('blur', this.blur);\n        }\n    }\n\n    public componentDidUpdate(prevProps: ValueProps): void {\n        if (prevProps.search && !this.props.search && this.search.current) {\n            this.search.current.innerText = '';\n        }\n\n        if (prevProps.focused !== this.props.focused && this.props.focused) {\n            this.focus();\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            options = [],\n            value,\n            disabled,\n            clearable,\n            open,\n            mobile,\n            multi,\n            focused,\n            equalCompareProp,\n            error\n        } = this.props;\n        const ArrowComponent = this.props.arrowComponent;\n        const ClearComponent = this.props.clearComponent || ClearX;\n        const ValueIconComponent = this.props.valueIconComponent;\n        const valueOptions = getValueOptions(\n            options,\n            value,\n            multi,\n            equalCompareProp\n        );\n        const showClearer = Boolean(\n            clearable && valueOptions.length && !mobile\n        );\n        const searchAtStart = !multi || valueOptions.length === 0;\n        const searchAtEnd = multi && valueOptions.length > 0;\n\n        return (\n            <ValueContainer\n                data-role=\"value\"\n                className=\"react-slct-value\"\n                disabled={disabled}\n                mobile={mobile}\n                focused={focused}\n                error={error}\n                onClick={this.onClick}\n            >\n                <ValueLeft\n                    className=\"value-left\"\n                    multi={multi}\n                    hasValue={!!valueOptions.length}\n                >\n                    {ValueIconComponent && <ValueIconComponent />}\n                    {searchAtStart && this.renderSearch()}\n                    {this.renderValues(valueOptions)}\n                    {searchAtEnd && this.renderSearch()}\n                </ValueLeft>\n                <ValueRight className=\"value-right\">\n                    {showClearer && (\n                        <ClearButton\n                            type=\"button\"\n                            tabIndex={-1}\n                            className=\"clearer\"\n                            onClick={this.onClear}\n                        >\n                            <ClearComponent />\n                        </ClearButton>\n                    )}\n                    {ArrowComponent ? (\n                        <ArrowComponent open={open} />\n                    ) : (\n                        <ArrowButton\n                            type=\"button\"\n                            className=\"arrow\"\n                            tabIndex={-1}\n                        >\n                            {open ? 'â–²' : 'â–¼'}\n                        </ArrowButton>\n                    )}\n                </ValueRight>\n            </ValueContainer>\n        );\n    }\n\n    private renderSearch(): React.ReactNode {\n        const {\n            open,\n            value,\n            disabled,\n            searchable,\n            search,\n            keepSearchOnBlur,\n            onSearchFocus,\n            onSearchBlur\n        } = this.props;\n        const canSearch =\n            (open && searchable) ||\n            (keepSearchOnBlur && !value && searchable) ||\n            Boolean(search);\n\n        if (disabled && !keepSearchOnBlur) {\n            return null;\n        }\n\n        return (\n            <Search\n                className=\"search\"\n                contentEditable\n                canSearch={canSearch}\n                onInput={this.onSearch}\n                onKeyDown={this.onKeyDown}\n                onFocus={onSearchFocus}\n                onBlur={onSearchBlur}\n                ref={this.search as any}\n            />\n        );\n    }\n\n    private renderValues(valueOptions: Option[]): React.ReactNode {\n        const {\n            placeholder,\n            search,\n            labelComponent,\n            valueComponentSingle,\n            valueComponentMulti,\n            multi,\n            open\n        } = this.props;\n\n        if (search && open && !multi) {\n            return null;\n        }\n\n        if (valueOptions.length === 0 && !search) {\n            return <Placeholder>{placeholder}</Placeholder>;\n        }\n\n        const Single = valueComponentSingle || ValueComponentSingle;\n        const Multi = (valueComponentMulti || ValueComponentMulti) as any;\n\n        return valueOptions.map((option) =>\n            multi ? (\n                <Multi\n                    key={toKey(option.value, this.props.equalCompareProp)}\n                    option={option}\n                    labelComponent={labelComponent}\n                    options={valueOptions}\n                    onRemove={this.props.onOptionRemove}\n                />\n            ) : (\n                <Single\n                    key={toKey(option.value, this.props.equalCompareProp)}\n                    option={option}\n                    labelComponent={labelComponent}\n                />\n            )\n        );\n    }\n\n    private focus(): void {\n        const el = this.search.current;\n\n        if (el) {\n            el.focus();\n\n            if (\n                typeof window.getSelection != 'undefined' &&\n                typeof document.createRange != 'undefined'\n            ) {\n                const range = document.createRange();\n                const sel = window.getSelection();\n\n                range.selectNodeContents(el);\n                range.collapse(false);\n\n                if (sel) {\n                    sel.removeAllRanges();\n                    sel.addRange(range);\n                }\n            }\n        }\n    }\n\n    @bind\n    private blur(): void {\n        if (this.search.current) {\n            this.search.current.blur();\n        }\n    }\n\n    @bind\n    private onClick(): void {\n        if (!this.props.disabled) {\n            this.focus();\n            this.props.onClick();\n        }\n    }\n\n    @bind\n    private onClear(e: React.SyntheticEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    @bind\n    private onSearch(e: React.KeyboardEvent<HTMLSpanElement>) {\n        if (this.props.searchable) {\n            this.props.onSearch(e.currentTarget.innerText.trim());\n        } else {\n            e.preventDefault();\n        }\n    }\n\n    @bind\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>) {\n        const { searchable } = this.props;\n\n        if (e.metaKey) {\n            return;\n        }\n\n        if (\n            (!searchable && e.keyCode !== keys.TAB) ||\n            e.keyCode === keys.ENTER ||\n            e.keyCode === keys.ARROW_UP ||\n            e.keyCode === keys.ARROW_DOWN\n        ) {\n            e.preventDefault();\n        }\n    }\n}\n"]}