{"version":3,"sources":["src/menu.tsx"],"names":["React","$fsx","r","react_1","react_window_1","styled_components_1","config_1","label_1","menu_container_1","menu_row_1","option_1","utils_1","EmptyOptionItem","default","OptionComponent","OptionItem","ReactSlctColors","border","Empty","props","createElement","SelectLabel","emptyText","exports","Menu","rowHeight","selectedIndex","open","error","menuWidth","menuHeight","multi","hideSelectedOptions","currentValue","isArray","value","options","useMemo","filter","option","some","val","equal","equalCompareProp","rect","setRect","useState","style","setStyle","list","useRef","width","assumedHeight","Math","min","max","length","actualHeight","height","useEffect","current","undefined","scrollToItem","itemData","Object","assign","onSelect","values","item","Array","from","Set","search","labelComponent","optionComponent","MenuContainer","onRect","onStyle","MenuContent","menuComponent","itemCount","FixedSizeList","className","ref","itemSize","MenuRow","renderList"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useEffect, useRef, useState } from 'react';\nimport { FixedSizeList } from 'react-window';\nimport styled from 'styled-components';\nimport { ReactSlctColors } from './config';\nimport { SelectLabel } from './label';\nimport { MenuContainer } from './menu-container';\nimport { MenuRow } from './menu-row';\nimport { OptionComponent } from './option';\nimport { MenuComponentProps, Option, Rect } from './typings';\nimport { equal, isArray } from './utils';\n\nconst EmptyOptionItem = styled(OptionComponent.OptionItem)`\n    height: 100%;\n    border: 1px solid ${() => ReactSlctColors.border};\n`;\n\nconst Empty = (props: { emptyText?: string }) => (\n    <EmptyOptionItem>\n        <SelectLabel>\n            <i>{props.emptyText || 'No results'}</i>\n        </SelectLabel>\n    </EmptyOptionItem>\n);\n\nexport function Menu(props: MenuComponentProps) {\n    const {\n        rowHeight = 32,\n        selectedIndex,\n        open,\n        error,\n        menuWidth,\n        menuHeight,\n        multi,\n        hideSelectedOptions\n    } = props;\n    const currentValue =\n        isArray(props.value) && multi ? props.value : [props.value];\n    const options = React.useMemo(\n        () =>\n            (props.options || []).filter((option) => {\n                if (hideSelectedOptions) {\n                    const selected = currentValue.some((val) =>\n                        equal(val, option.value, props.equalCompareProp)\n                    );\n\n                    if (selected) {\n                        return false;\n                    }\n                }\n\n                return true;\n            }),\n        [\n            props.options,\n            props.equalCompareProp,\n            hideSelectedOptions,\n            currentValue\n        ]\n    );\n    const [rect, setRect] = useState<Rect>();\n    const [style, setStyle] = useState<Rect>();\n    const list = useRef<FixedSizeList>(null);\n    const width = menuWidth || (rect && rect.width !== 'auto' ? rect.width : 0);\n    const assumedHeight = Math.min(\n        Math.max(options.length * rowHeight, rowHeight) + 2,\n        menuHeight || 185\n    );\n    const actualHeight =\n        (style?.height !== 'auto' && style?.height) || assumedHeight;\n\n    useEffect(() => {\n        if (\n            open &&\n            list.current &&\n            selectedIndex !== undefined &&\n            selectedIndex !== -1\n        ) {\n            list.current.scrollToItem(selectedIndex, 'center');\n        }\n    }, [open, selectedIndex]);\n\n    const itemData = React.useMemo(() => {\n        return {\n            ...props,\n            options,\n            onSelect: (value: any, option: Option) => {\n                if (isArray(props.value) && props.multi) {\n                    const found = props.value.some((item) =>\n                        equal(item, value, props.equalCompareProp)\n                    );\n                    const values = found\n                        ? props.value.filter(\n                              (item) =>\n                                  !equal(item, value, props.equalCompareProp)\n                          )\n                        : Array.from(new Set([...props.value, value]));\n\n                    props.onSelect(values, option);\n                } else {\n                    props.onSelect(value, option);\n                }\n            }\n        };\n    }, [\n        options.length,\n        props.search,\n        props.rowHeight,\n        props.selectedIndex,\n        props.labelComponent,\n        props.optionComponent,\n        props.value\n    ]);\n\n    function renderList() {\n        const MenuContent = props.menuComponent;\n        const itemCount = options.length;\n\n        if (MenuContent) {\n            return <MenuContent {...props} />;\n        }\n\n        if (itemCount === 0) {\n            return <Empty emptyText={props.emptyText} />;\n        }\n\n        return (\n            <FixedSizeList\n                className=\"react-slct-menu-list\"\n                ref={list}\n                width=\"100%\"\n                height={actualHeight}\n                itemSize={rowHeight}\n                itemCount={itemCount}\n                itemData={itemData}\n            >\n                {MenuRow}\n            </FixedSizeList>\n        );\n    }\n\n    return open ? (\n        <MenuContainer\n            error={error}\n            menuWidth={width}\n            menuHeight={assumedHeight}\n            onRect={setRect}\n            onStyle={setStyle}\n        >\n            {renderList()}\n        </MenuContainer>\n    ) : null;\n}\n"]}