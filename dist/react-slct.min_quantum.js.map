{"version":3,"sources":["src/index.tsx","src/value.tsx","src/utils.ts","src/menu.tsx","src/menu-row.tsx"],"names":["lodash_decorators_1","$fsx","r","React","styled_components_1","value_1","menu_1","exports","Menu","menu_container_1","utils_1","keys","typings_1","SelectProps","MenuComponentProps","LabelComponentProps","Option","option_1","OptionComponent","value_component_single_1","ValueComponentSingle","value_component_multi_1","ValueComponentMulti","typings_2","OptionComponentProps","ValueComponentSingleProps","ValueComponentMultiProps","Select","PureComponent","[object Object]","props","super","this","container","nativeSelect","createRef","state","open","blindText","options","search","creatable","onCreateText","showCreate","some","option","value","label","filter","toLowerCase","includes","document","getDocument","Boolean","onCreate","_","prevState","handleBlindTextUpdate","removeDocumentListener","Container","className","clearable","placeholder","disabled","error","menuComponent","labelComponent","optionComponent","valueComponentSingle","valueComponentMulti","arrowComponent","clearComponent","hideSelectedOptions","equalCompareProp","multi","native","emptyText","rowHeight","menuWidth","menuHeight","keepSearchOnBlur","selectedIndex","focused","searchable","children","renderChildren","classNames","c","createElement","join","ref","onContainerRef","data-role","onKeyUp","onKeyDown","renderNativeSelect","Value","mobile","onClear","onClick","toggleMenu","onSearch","onSearchFocus","onSearchBlur","onOptionRemove","onSelect","onOptionSelect","NativeSelect","dataRole","undefined","isArray","map","findOptionIndex","multiple","tabIndex","onChange","onChangeNativeSelect","i","key","toKey","valueOptions","getValueOptions","showPlaceholder","length","MenuContainer","onToggle","onClose","closeMenu","onOpen","openMenu","onRef","findIndex","equal","setState","addDocumentListener","callback","cb","addEventListener","onDocumentClick","removeEventListener","blindTextTimeout","setTimeout","val","index","String","e","currentTarget","values","Array","from","selectedOptions","htmlOption","current","optionWasCreated","selectOnNative","createValue","find","optionIsCreatable","createOption","target","closest","contains","keyCode","TAB","handleBlindText","ARROW_UP","ARROW_DOWN","ENTER","newValue","ESC","BACKSPACE","clearTimeout","slice","cleanBlindText","SPACE","fromCodePoint","test","el","startsWith","default","div","select","css","tslib_1","__decorate","bind","debounce","SyntheticEvent","_a","Object","_b","KeyboardEvent","_c","_d","label_1","Button","button","ArrowButton","ValueContainer","ValueLeft","hasValue","ValueRight","Placeholder","SelectLabel","ClearButton","ClearContainer","span","ClearX","Search","canSearch","window","getWindow","blur","prevProps","innerText","focus","ArrowComponent","ClearComponent","showClearer","searchAtStart","searchAtEnd","renderSearch","renderValues","type","contentEditable","onInput","onFocus","onBlur","Single","Multi","onRemove","getSelection","createRange","range","sel","selectNodeContents","collapse","removeAllRanges","addRange","stopPropagation","trim","preventDefault","metaKey","valueA","valueB","toJSON","JSON","stringify","id","getWindowInnerHeight","defaultHeight","innerHeight","react_1","react_window_1","menu_row_1","EmptyOptionItem","OptionItem","Empty","currentValue","useMemo","rect","setRect","useState","list","useRef","width","height","Math","min","max","useEffect","scrollToItem","itemData","assign","item","Set","onRect","MenuContent","itemCount","FixedSizeList","itemSize","MenuRow","renderList","memo","style","data","Component","active","selected","areEqual"],"mappings":"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","sourcesContent":["import { bind, debounce } from 'lodash-decorators';\nimport * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Value } from './value';\nimport { Menu } from './menu';\nimport { MenuContainer } from './menu-container';\nimport {\n    isArray,\n    keys,\n    getDocument,\n    getValueOptions,\n    equal,\n    toKey\n} from './utils';\nimport {\n    SelectProps,\n    SelectState,\n    MenuComponentProps,\n    LabelComponentProps,\n    Option\n} from './typings';\nimport './global-stylings';\n\nexport {\n    SelectProps,\n    Menu,\n    MenuComponentProps,\n    LabelComponentProps,\n    Option,\n    keys\n};\nexport { OptionComponent } from './option';\nexport { ValueComponentSingle } from './value-component-single';\nexport { ValueComponentMulti } from './value-component-multi';\nexport {\n    OptionComponentProps,\n    ValueComponentSingleProps,\n    ValueComponentMultiProps\n} from './typings';\n\nexport class Select<T = any> extends React.PureComponent<\n    SelectProps<T>,\n    SelectState\n> {\n    private static Container = styled.div`\n        display: flex;\n        position: relative;\n        cursor: default;\n        width: 100%;\n        box-sizing: border-box;\n        pointer-events: ${(props: { disabled?: boolean }) =>\n            props.disabled ? 'none' : 'auto'};\n        opacity: ${(props: { disabled?: boolean }) =>\n            props.disabled ? 0.75 : 1};\n        user-select: none;\n    `;\n\n    private static NativeSelect = styled.select`\n        display: block;\n        opacity: 0;\n        position: absolute;\n        right: 0;\n        top: 0;\n        width: 100%;\n        height: 100%;\n        ${(props: { native?: boolean }) =>\n            props.native\n                ? css`\n                      z-index: 1;\n                  `\n                : css`\n                      pointer-events: none;\n                      z-index: auto;\n                  `};\n    `;\n\n    private nativeSelect: React.RefObject<HTMLSelectElement>;\n    private container: HTMLDivElement | null = null;\n    private blindTextTimeout!: number;\n\n    constructor(props: SelectProps) {\n        super(props);\n\n        this.nativeSelect = React.createRef();\n\n        this.state = {\n            open: false,\n            blindText: ''\n        };\n    }\n\n    private get options(): Option<T>[] {\n        const { search } = this.state;\n        const { creatable, onCreateText } = this.props;\n        let options = this.props.options || [];\n        const showCreate =\n            creatable &&\n            !options.some(option => {\n                const { value, label } = option;\n\n                // @ts-ignore\n                return value === search || label === search;\n            });\n\n        if (search) {\n            options = options.filter(option =>\n                option.label.toLowerCase().includes(search.toLowerCase())\n            );\n        }\n\n        if (showCreate && search) {\n            options = [\n                {\n                    label: onCreateText\n                        ? onCreateText(search)\n                        : `Create \"${search}\"`,\n                    value: search as any,\n                    creatable: true\n                },\n                ...options\n            ];\n        }\n\n        return options;\n    }\n\n    private get document() {\n        return getDocument();\n    }\n\n    private optionIsCreatable(option: Option<T>): boolean {\n        return (\n            this.props.creatable &&\n            option.creatable &&\n            Boolean(this.props.onCreate && this.state.search)\n        );\n    }\n\n    public componentDidUpdate(_, prevState: SelectState): void {\n        if (\n            this.state.blindText &&\n            prevState.blindText !== this.state.blindText\n        ) {\n            this.handleBlindTextUpdate();\n        }\n    }\n\n    public componentWillUnmount(): void {\n        this.removeDocumentListener();\n    }\n\n    public render(): React.ReactNode {\n        const { Container } = Select;\n        const {\n            className,\n            options,\n            creatable,\n            clearable,\n            placeholder,\n            value,\n            disabled,\n            error,\n            menuComponent,\n            labelComponent,\n            optionComponent,\n            valueComponentSingle,\n            valueComponentMulti,\n            arrowComponent,\n            clearComponent,\n            hideSelectedOptions,\n            equalCompareProp,\n            multi,\n            native,\n            emptyText,\n            rowHeight,\n            menuWidth,\n            menuHeight,\n            keepSearchOnBlur\n        } = this.props;\n        const { open, search, selectedIndex, focused } = this.state;\n        const searchable = this.props.searchable || creatable;\n\n        if (this.props.children) {\n            return this.renderChildren();\n        }\n\n        const classNames = [\n            'react-slct',\n            className,\n            open && 'open',\n            error && 'has-error'\n        ].filter(c => Boolean(c));\n\n        return (\n            <Container\n                className={classNames.join(' ')}\n                disabled={disabled}\n                ref={this.onContainerRef as any}\n                data-role={this.props['data-role']}\n                onKeyUp={this.onKeyUp}\n                onKeyDown={this.onKeyDown}\n            >\n                {this.renderNativeSelect()}\n                <Value\n                    clearable={clearable}\n                    searchable={searchable}\n                    open={open}\n                    disabled={disabled}\n                    multi={multi}\n                    mobile={native}\n                    focused={focused}\n                    options={options}\n                    placeholder={placeholder}\n                    error={error}\n                    value={value}\n                    search={search}\n                    keepSearchOnBlur={keepSearchOnBlur}\n                    equalCompareProp={equalCompareProp}\n                    labelComponent={labelComponent}\n                    valueComponentSingle={valueComponentSingle}\n                    valueComponentMulti={valueComponentMulti}\n                    arrowComponent={arrowComponent}\n                    clearComponent={clearComponent}\n                    onClear={this.onClear}\n                    onClick={this.toggleMenu}\n                    onSearch={this.onSearch}\n                    onSearchFocus={this.onSearchFocus}\n                    onSearchBlur={this.onSearchBlur}\n                    onOptionRemove={this.onOptionRemove}\n                />\n                <Menu\n                    open={open}\n                    options={this.options}\n                    value={value}\n                    multi={multi}\n                    error={error}\n                    search={search}\n                    selectedIndex={selectedIndex}\n                    menuComponent={menuComponent}\n                    labelComponent={labelComponent}\n                    optionComponent={optionComponent}\n                    hideSelectedOptions={hideSelectedOptions}\n                    equalCompareProp={equalCompareProp}\n                    emptyText={emptyText}\n                    rowHeight={rowHeight}\n                    menuWidth={menuWidth}\n                    menuHeight={menuHeight}\n                    onSelect={this.onOptionSelect}\n                />\n            </Container>\n        );\n    }\n\n    private renderNativeSelect(): React.ReactNode {\n        const { NativeSelect } = Select;\n        const { native, placeholder, multi, disabled } = this.props;\n        const dataRole = this.props['data-role']\n            ? `select-${this.props['data-role']}`\n            : undefined;\n        const clearable = this.props.clearable && native;\n        const value =\n            isArray(this.props.value) && multi\n                ? this.props.value.map(this.findOptionIndex)\n                : this.findOptionIndex(this.props.value || '');\n\n        return (\n            <NativeSelect\n                ref={this.nativeSelect as any}\n                multiple={multi}\n                value={value}\n                disabled={disabled}\n                native={native}\n                tabIndex={-1}\n                data-role={dataRole}\n                onChange={this.onChangeNativeSelect}\n            >\n                <option value=\"\" disabled={!clearable}>\n                    {placeholder}\n                </option>\n                {this.options.map((option, i) => (\n                    <option\n                        key={toKey(option.value)}\n                        value={`${i}`}\n                        disabled={option.disabled}\n                    >\n                        {option.label}\n                    </option>\n                ))}\n            </NativeSelect>\n        );\n    }\n\n    private renderChildren(): React.ReactNode {\n        const { options, placeholder, multi, children } = this.props;\n        const { open, search } = this.state;\n        const valueOptions = getValueOptions(\n            options || [],\n            this.props.value,\n            this.props.multi,\n            this.props.equalCompareProp\n        );\n        const value: T | T[] | undefined = !multi\n            ? this.props.value\n            : valueOptions.map(option => option.value);\n        const showPlaceholder =\n            !search &&\n            (isArray(value) && multi\n                ? value.length === 0\n                : value === undefined || value === null);\n\n        if (!children) {\n            return null;\n        }\n\n        return children({\n            options: this.options,\n            open,\n            value,\n            MenuContainer,\n            placeholder: showPlaceholder ? placeholder : undefined,\n            onToggle: () => this.toggleMenu(),\n            onClose: () => this.closeMenu(),\n            onOpen: () => this.openMenu(),\n            onRef: ref => (this.container = ref)\n        });\n    }\n\n    @bind\n    private toggleMenu(): void {\n        const open = !this.state.open;\n\n        if (open) {\n            this.openMenu();\n        } else {\n            this.closeMenu();\n        }\n    }\n\n    @debounce(0)\n    private openMenu(): void {\n        const selectedIndex = this.props.hideSelectedOptions\n            ? undefined\n            : this.options.findIndex(option =>\n                  equal(\n                      option.value,\n                      this.props.value,\n                      this.props.equalCompareProp\n                  )\n              );\n        const keepSearchOnBlur =\n            this.props.keepSearchOnBlur && !this.props.value;\n\n        this.setState(\n            {\n                open: true,\n                search: keepSearchOnBlur ? this.state.search : undefined,\n                selectedIndex\n            },\n            () => {\n                if (this.props.onOpen) {\n                    this.props.onOpen();\n                }\n\n                this.addDocumentListener();\n            }\n        );\n    }\n\n    @debounce(0)\n    private closeMenu(callback = () => {}): void {\n        const keepSearchOnBlur =\n            this.props.keepSearchOnBlur && !this.props.value;\n\n        this.removeDocumentListener();\n        this.setState(\n            {\n                open: false,\n                search: keepSearchOnBlur ? this.state.search : undefined,\n                selectedIndex: undefined\n            },\n            () => {\n                if (this.props.onClose) {\n                    this.props.onClose();\n                }\n\n                callback();\n            }\n        );\n    }\n\n    private createOption(value: string, cb?: () => void): void {\n        const { onCreate } = this.props;\n\n        if (onCreate) {\n            this.closeMenu(() => {\n                onCreate(value);\n\n                if (cb) {\n                    cb();\n                }\n            });\n        }\n    }\n\n    private addDocumentListener(): void {\n        this.removeDocumentListener();\n\n        if (this.document) {\n            this.document.addEventListener('click', this.onDocumentClick);\n        }\n    }\n\n    private removeDocumentListener(): void {\n        if (this.document) {\n            this.document.removeEventListener('click', this.onDocumentClick);\n        }\n    }\n\n    @bind\n    private cleanBlindText(): void {\n        this.blindTextTimeout = setTimeout(\n            () => this.setState({ blindText: '' }),\n            700\n        );\n    }\n\n    @bind\n    private findOptionIndex(val: any) {\n        let index = this.options.findIndex(option => option.value === val);\n\n        if (index === -1) {\n            if (typeof val === 'object') {\n                index = this.options.findIndex(option =>\n                    equal(option.value, val, this.props.equalCompareProp)\n                );\n            }\n\n            if (index === -1) {\n                return '';\n            }\n        }\n\n        return String(index);\n    }\n\n    @bind\n    private onChangeNativeSelect(\n        e: React.SyntheticEvent<HTMLSelectElement>\n    ): void {\n        const { onChange, multi } = this.props;\n        const { currentTarget } = e;\n\n        if (onChange) {\n            if (currentTarget.value === '') {\n                this.onClear();\n            } else {\n                const values = Array.from(currentTarget.selectedOptions).map(\n                    htmlOption => this.options[htmlOption.index - 1].value\n                );\n\n                if (multi) {\n                    onChange(values as any);\n                } else {\n                    onChange(values[0] as any);\n                }\n            }\n        }\n    }\n\n    @bind\n    private onSearchFocus(): void {\n        const { open, focused } = this.state;\n\n        if (!open && !focused && !this.props.native) {\n            this.openMenu();\n        }\n\n        this.setState({ focused: true });\n    }\n\n    @bind\n    private onSearchBlur(): void {\n        this.setState({ focused: false });\n    }\n\n    @bind\n    private onOptionSelect(value: any | any[], option?: Option<T>): void {\n        const { current } = this.nativeSelect;\n        const { multi, onChange, creatable } = this.props;\n        let optionWasCreated = false;\n\n        const selectOnNative = () => {\n            if (current) {\n                current.value =\n                    isArray(value) && multi\n                        ? (value.map(this.findOptionIndex) as any)\n                        : this.findOptionIndex(value);\n            }\n\n            this.setState({ focused: true }, () =>\n                this.closeMenu(() => onChange && onChange(value, option))\n            );\n        };\n\n        if (creatable) {\n            const createValue = (val: any) => {\n                const option = this.options.find(\n                    option =>\n                        this.optionIsCreatable(option) && option.value === val\n                );\n\n                if (option) {\n                    optionWasCreated = true;\n                    this.createOption(option.value as any, selectOnNative);\n                }\n            };\n\n            if (isArray(value) && multi) {\n                value.map(createValue);\n            } else {\n                createValue(value);\n            }\n        }\n\n        if (!optionWasCreated) {\n            selectOnNative();\n        }\n    }\n\n    @bind\n    private onOptionRemove(value: any): void {\n        if (isArray(this.props.value) && this.props.multi) {\n            const values = this.props.value.filter(\n                val => !equal(val, value, this.props.equalCompareProp)\n            );\n\n            this.onOptionSelect(values);\n        }\n    }\n\n    @bind\n    private onClear(): void {\n        this.onOptionSelect(this.props.multi ? [] : undefined);\n    }\n\n    @bind\n    private onSearch(search: string): void {\n        this.setState({ search }, () => {\n            if (this.options.length === 1 || (this.props.creatable && search)) {\n                this.setState({ selectedIndex: 0 });\n            } else {\n                this.setState({ selectedIndex: undefined });\n            }\n\n            if (this.props.onSearch) {\n                this.props.onSearch(search);\n            }\n        });\n    }\n\n    @bind\n    private onDocumentClick(e): void {\n        const { target } = e;\n\n        if (\n            target.closest('.react-slct-menu') ||\n            target.closest('.react-slct-value')\n        ) {\n            return;\n        }\n\n        if (this.container && !this.container.contains(target)) {\n            this.closeMenu();\n        }\n    }\n\n    @bind\n    private onKeyDown({ keyCode }: React.KeyboardEvent): void {\n        const { searchable, creatable } = this.props;\n\n        switch (keyCode) {\n            case keys.TAB:\n                if (this.state.open) {\n                    this.closeMenu();\n                }\n                break;\n        }\n\n        if (!searchable && !creatable) {\n            this.handleBlindText(keyCode);\n        }\n    }\n\n    @bind\n    private onKeyUp({ keyCode }: React.KeyboardEvent): void {\n        const { search, open } = this.state;\n        const { value, multi } = this.props;\n        let selectedIndex = this.state.selectedIndex;\n\n        switch (keyCode) {\n            case keys.ARROW_UP:\n                if (open) {\n                    if (selectedIndex !== undefined) {\n                        selectedIndex = selectedIndex - 1;\n\n                        if (selectedIndex < 0) {\n                            selectedIndex = this.options.length - 1;\n                        }\n                    }\n\n                    this.setState({ selectedIndex });\n                } else {\n                    this.openMenu();\n                }\n                break;\n            case keys.ARROW_DOWN:\n                if (open) {\n                    if (\n                        selectedIndex === undefined ||\n                        selectedIndex === this.options.length - 1\n                    ) {\n                        selectedIndex = 0;\n                    } else {\n                        selectedIndex = selectedIndex + 1;\n                    }\n\n                    this.setState({ selectedIndex });\n                } else {\n                    this.openMenu();\n                }\n                break;\n            case keys.ENTER:\n                if (\n                    this.state.selectedIndex === 0 &&\n                    this.optionIsCreatable(this.options[0])\n                ) {\n                    this.createOption(search!);\n                } else if (\n                    selectedIndex !== undefined &&\n                    this.options[selectedIndex]\n                ) {\n                    const option = this.options[selectedIndex];\n                    const newValue = option.value;\n\n                    this.onOptionSelect(\n                        isArray(value) && multi\n                            ? [...value, newValue]\n                            : newValue,\n                        option\n                    );\n                }\n                break;\n            case keys.ESC:\n                if (open) {\n                    this.closeMenu();\n                }\n                break;\n        }\n    }\n\n    private handleBlindText(keyCode: number): void {\n        const { blindText } = this.state;\n\n        if (keyCode === keys.BACKSPACE && blindText.length) {\n            clearTimeout(this.blindTextTimeout);\n\n            this.setState(\n                {\n                    blindText: blindText.slice(0, blindText.length - 1)\n                },\n                this.cleanBlindText\n            );\n        } else if (keyCode === keys.SPACE) {\n            clearTimeout(this.blindTextTimeout);\n\n            this.setState(\n                {\n                    blindText: blindText + ' '\n                },\n                this.cleanBlindText\n            );\n        } else {\n            const key = String.fromCodePoint(keyCode);\n\n            if (/\\w/.test(key)) {\n                clearTimeout(this.blindTextTimeout);\n\n                this.setState(\n                    {\n                        blindText: blindText + key\n                    },\n                    this.cleanBlindText\n                );\n            }\n        }\n    }\n\n    @bind\n    private onContainerRef(el: HTMLDivElement | null): void {\n        this.container = el;\n    }\n\n    private handleBlindTextUpdate(): void {\n        const { open, blindText } = this.state;\n        const { multi } = this.props;\n\n        if (open) {\n            const selectedIndex = this.options.findIndex(option =>\n                option.label.toLowerCase().startsWith(blindText.toLowerCase())\n            );\n\n            if (selectedIndex >= 0) {\n                this.setState({ selectedIndex });\n            }\n        } else if (!multi) {\n            if (blindText) {\n                const option = this.options.find(option =>\n                    option.label\n                        .toLowerCase()\n                        .startsWith(blindText.toLowerCase())\n                );\n\n                if (option) {\n                    this.onOptionSelect(option.value, option);\n                }\n            } else {\n                this.onOptionSelect(undefined);\n            }\n        }\n    }\n}\n","import { bind } from 'lodash-decorators';\nimport * as React from 'react';\nimport styled from 'styled-components';\nimport { SelectLabel } from './label';\nimport { keys, getValueOptions, getWindow, toKey } from './utils';\nimport { SelectProps, Option } from './typings';\nimport { ValueComponentMulti } from './value-component-multi';\nimport { ValueComponentSingle } from './value-component-single';\n\nexport interface ValueProps {\n    options: SelectProps['options'];\n    value: SelectProps['value'];\n    placeholder: SelectProps['placeholder'];\n    clearable: SelectProps['clearable'];\n    searchable: SelectProps['searchable'];\n    labelComponent: SelectProps['labelComponent'];\n    valueComponentSingle: SelectProps['valueComponentSingle'];\n    valueComponentMulti: SelectProps['valueComponentMulti'];\n    arrowComponent: SelectProps['arrowComponent'];\n    clearComponent: SelectProps['clearComponent'];\n    multi: SelectProps['multi'];\n    mobile: SelectProps['native'];\n    disabled: SelectProps['disabled'];\n    error: SelectProps['error'];\n    equalCompareProp: SelectProps['equalCompareProp'];\n    search?: string;\n    keepSearchOnBlur?: boolean;\n    open: boolean;\n    focused?: boolean;\n    onClear(): void;\n    onClick(): void;\n    onSearch(search: string): void;\n    onSearchFocus(): void;\n    onSearchBlur(): void;\n    onOptionRemove(value: any): void;\n}\n\ninterface SearchProps {\n    canSearch?: boolean;\n}\n\ninterface ValueContainerProps {\n    mobile?: boolean;\n    disabled?: boolean;\n    focused?: boolean;\n    error?: boolean;\n}\n\ninterface ValueLeftProps {\n    multi?: boolean;\n    hasValue?: boolean;\n}\n\nconst Button = styled.button`\n    background: transparent;\n    border: none;\n    margin: 0;\n    font-size: 20px;\n    padding: 0;\n    line-height: 1;\n    cursor: pointer;\n\n    &:focus {\n        outline: none;\n    }\n`;\n\nconst ArrowButton = styled(Button)`\n    font-size: 12px;\n    color: #ccc;\n    transform: translateY(2px);\n\n    &:hover {\n        color: #333;\n    }\n`;\n\nconst ValueContainer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    flex: 1;\n    min-height: 32px;\n    pointer-events: ${(props: ValueContainerProps) =>\n        props.mobile || props.disabled ? 'none' : 'auto'};\n    padding: 5px 10px;\n    background: #fff;\n    cursor: default;\n    border-width: 1px;\n    border-style: solid;\n    border-color: ${(props: ValueContainerProps) =>\n        props.error ? 'var(--react-slct-error-color)' : '#ccc'};\n    z-index: 0;\n    box-sizing: border-box;\n    max-width: 100%;\n    box-shadow: ${(props: ValueContainerProps) =>\n        props.focused ? 'rgba(0, 0, 0, 0.15) 0 0 2px' : 'none'};\n`;\n\nconst ValueLeft = styled.div`\n    display: flex;\n    flex: 1;\n    align-items: center;\n    flex-wrap: ${(props: ValueLeftProps) =>\n        props.multi && props.hasValue ? 'wrap' : 'nowrap'};\n    user-select: none;\n    min-width: 0;\n    box-sizing: border-box;\n    margin: ${(props: ValueLeftProps) =>\n        props.multi && props.hasValue ? '-2px -5px' : 0};\n`;\n\nconst ValueRight = styled.div`\n    display: flex;\n    align-items: center;\n    margin-left: 4px;\n    box-sizing: border-box;\n`;\n\nconst Placeholder = styled(SelectLabel)`\n    color: #aaa;\n`;\n\nconst ClearButton = styled(Button)`\n    margin-right: 6px;\n`;\n\nconst ClearContainer = styled.span`\n    color: #ccc;\n\n    &:hover {\n        color: #333;\n    }\n`;\n\nconst ClearX = () => <ClearContainer>×</ClearContainer>;\n\nconst Search = styled.span`\n    min-width: 1px;\n    margin-left: -1px;\n    height: 16px;\n    opacity: ${(props: SearchProps) => (props.canSearch ? 1 : 0)};\n    user-select: text;\n    position: ${(props: SearchProps) =>\n        props.canSearch ? 'static' : 'absolute'};\n\n    &:focus {\n        outline: none;\n    }\n`;\n\nexport class Value extends React.PureComponent<ValueProps> {\n    search: React.RefObject<HTMLSpanElement>;\n\n    constructor(props: ValueProps) {\n        super(props);\n\n        this.search = React.createRef();\n\n        const window = getWindow();\n\n        if (window) {\n            window.addEventListener('blur', this.blur);\n        }\n    }\n\n    public componentDidUpdate(prevProps: ValueProps): void {\n        if (prevProps.search && !this.props.search && this.search.current) {\n            this.search.current.innerText = '';\n        }\n\n        if (prevProps.focused !== this.props.focused && this.props.focused) {\n            this.focus();\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            options = [],\n            value,\n            disabled,\n            clearable,\n            open,\n            mobile,\n            multi,\n            focused,\n            equalCompareProp,\n            error\n        } = this.props;\n        const ArrowComponent = this.props.arrowComponent;\n        const ClearComponent = this.props.clearComponent || ClearX;\n        const valueOptions = getValueOptions(\n            options,\n            value,\n            multi,\n            equalCompareProp\n        );\n        const showClearer = Boolean(\n            clearable && valueOptions.length && !mobile\n        );\n        const searchAtStart = !multi || valueOptions.length === 0;\n        const searchAtEnd = multi && valueOptions.length > 0;\n\n        return (\n            <ValueContainer\n                data-role=\"value\"\n                className=\"react-slct-value\"\n                disabled={disabled}\n                mobile={mobile}\n                focused={focused}\n                error={error}\n                onClick={this.onClick}\n            >\n                <ValueLeft\n                    className=\"value-left\"\n                    multi={multi}\n                    hasValue={!!valueOptions.length}\n                >\n                    {searchAtStart && this.renderSearch()}\n                    {this.renderValues(valueOptions)}\n                    {searchAtEnd && this.renderSearch()}\n                </ValueLeft>\n                <ValueRight className=\"value-right\">\n                    {showClearer && (\n                        <ClearButton\n                            type=\"button\"\n                            tabIndex={-1}\n                            className=\"clearer\"\n                            onClick={this.onClear}\n                        >\n                            <ClearComponent />\n                        </ClearButton>\n                    )}\n                    <ArrowButton type=\"button\" className=\"arrow\" tabIndex={-1}>\n                        {ArrowComponent ? (\n                            <ArrowComponent open={open} />\n                        ) : open ? (\n                            '▲'\n                        ) : (\n                            '▼'\n                        )}\n                    </ArrowButton>\n                </ValueRight>\n            </ValueContainer>\n        );\n    }\n\n    private renderSearch(): React.ReactNode {\n        const {\n            open,\n            value,\n            disabled,\n            searchable,\n            search,\n            keepSearchOnBlur,\n            onSearchFocus,\n            onSearchBlur\n        } = this.props;\n        const canSearch =\n            (open && searchable) ||\n            (keepSearchOnBlur && !value && searchable) ||\n            Boolean(search);\n\n        if (disabled && !keepSearchOnBlur) {\n            return null;\n        }\n\n        return (\n            <Search\n                className=\"search\"\n                contentEditable\n                canSearch={canSearch}\n                onInput={this.onSearch}\n                onKeyDown={this.onKeyDown}\n                onFocus={onSearchFocus}\n                onBlur={onSearchBlur}\n                ref={this.search as any}\n            />\n        );\n    }\n\n    private renderValues(valueOptions: Option[]): React.ReactNode {\n        const {\n            placeholder,\n            search,\n            labelComponent,\n            valueComponentSingle,\n            valueComponentMulti,\n            multi,\n            open\n        } = this.props;\n\n        if (search && open && !multi) {\n            return null;\n        }\n\n        if (valueOptions.length === 0 && !search) {\n            return <Placeholder>{placeholder}</Placeholder>;\n        }\n\n        const Single = valueComponentSingle || ValueComponentSingle;\n        const Multi = (valueComponentMulti || ValueComponentMulti) as any;\n\n        return valueOptions.map(option =>\n            multi ? (\n                <Multi\n                    key={toKey(option.value)}\n                    option={option}\n                    labelComponent={labelComponent}\n                    options={valueOptions}\n                    onRemove={this.props.onOptionRemove}\n                />\n            ) : (\n                <Single\n                    key={toKey(option.value)}\n                    option={option}\n                    labelComponent={labelComponent}\n                />\n            )\n        );\n    }\n\n    private focus(): void {\n        const el = this.search.current;\n\n        if (el) {\n            el.focus();\n\n            if (\n                typeof window.getSelection != 'undefined' &&\n                typeof document.createRange != 'undefined'\n            ) {\n                const range = document.createRange();\n                const sel = window.getSelection();\n\n                range.selectNodeContents(el);\n                range.collapse(false);\n\n                if (sel) {\n                    sel.removeAllRanges();\n                    sel.addRange(range);\n                }\n            }\n        }\n    }\n\n    @bind\n    private blur(): void {\n        if (this.search.current) {\n            this.search.current.blur();\n        }\n    }\n\n    @bind\n    private onClick(): void {\n        if (!this.props.disabled) {\n            this.focus();\n            this.props.onClick();\n        }\n    }\n\n    @bind\n    private onClear(e: React.SyntheticEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    @bind\n    private onSearch(e: React.KeyboardEvent<HTMLSpanElement>) {\n        if (this.props.searchable) {\n            this.props.onSearch(e.currentTarget.innerText.trim());\n        } else {\n            e.preventDefault();\n        }\n    }\n\n    @bind\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>) {\n        const { searchable } = this.props;\n\n        if (e.metaKey) {\n            return;\n        }\n\n        if (\n            (!searchable && e.keyCode !== keys.TAB) ||\n            e.keyCode === keys.ENTER ||\n            e.keyCode === keys.ARROW_UP ||\n            e.keyCode === keys.ARROW_DOWN\n        ) {\n            e.preventDefault();\n        }\n    }\n}\n","import { Option } from '.';\n\nexport function toKey(value: any): string | number {\n    if (typeof value === 'string') {\n        return value;\n    }\n\n    if (typeof value === 'object') {\n        if (value.id) {\n            return value.id;\n        }\n\n        if (value.toJSON) {\n            return value.toJSON();\n        }\n    }\n\n    return JSON.stringify(value);\n}\n\nexport function equal(\n    valueA: any,\n    valueB: any,\n    equalCompareProp: string | null = 'id'\n) {\n    if (valueA === valueB) {\n        return true;\n    }\n\n    if (!valueA || !valueB) {\n        return false;\n    }\n\n    if (typeof valueA === 'object' && typeof valueB === 'object') {\n        if (\n            equalCompareProp &&\n            valueA[equalCompareProp] !== undefined &&\n            valueA[equalCompareProp] !== null &&\n            valueB[equalCompareProp] !== undefined &&\n            valueB[equalCompareProp] !== null &&\n            valueA[equalCompareProp] === valueB[equalCompareProp]\n        ) {\n            return true;\n        }\n\n        if (valueA.toJSON && valueB.toJSON) {\n            return (\n                JSON.stringify(valueA.toJSON()) ===\n                JSON.stringify(valueB.toJSON())\n            );\n        }\n\n        return JSON.stringify(valueA) === JSON.stringify(valueB);\n    }\n\n    return false;\n}\n\nexport function getValueOptions(\n    options: Option[],\n    value: any,\n    multi: boolean | undefined,\n    equalCompareProp?: string | null\n) {\n    return options.filter(option => {\n        if (isArray(value) && multi) {\n            return value.some(val =>\n                equal(option.value, val, equalCompareProp)\n            );\n        } else {\n            return equal(option.value, value, equalCompareProp);\n        }\n    });\n}\n\nexport function isArray<T = any>(val: any): val is Array<T> {\n    if (Array.isArray(val)) {\n        return true;\n    }\n\n    // this is just a workaround for potential observable arrays\n    if (val && val.map) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getDocument(): Document | undefined {\n    if (typeof document !== 'undefined') {\n        return document;\n    }\n\n    return undefined;\n}\n\nexport function getWindow(): Window | undefined {\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n\n    return undefined;\n}\n\nexport function getWindowInnerHeight(defaultHeight = 700): number {\n    const window = getWindow();\n\n    if (window) {\n        return window.innerHeight;\n    }\n\n    return defaultHeight;\n}\n\nexport const keys = {\n    ARROW_UP: 38,\n    ARROW_DOWN: 40,\n    ENTER: 13,\n    TAB: 9,\n    ESC: 27,\n    BACKSPACE: 8,\n    SPACE: 32\n};\n","import * as React from 'react';\nimport { useEffect, useRef, useState } from 'react';\nimport { FixedSizeList } from 'react-window';\nimport styled from 'styled-components';\nimport { SelectLabel } from './label';\nimport { MenuContainer } from './menu-container';\nimport { MenuRow } from './menu-row';\nimport { OptionComponent } from './option';\nimport { MenuComponentProps, Option, Rect } from './typings';\nimport { equal, isArray } from './utils';\n\nconst EmptyOptionItem = styled(OptionComponent.OptionItem)`\n    height: 100%;\n    border: 1px solid #ccc;\n`;\n\nconst Empty = (props: { emptyText?: string }) => (\n    <EmptyOptionItem>\n        <SelectLabel>\n            <i>{props.emptyText || 'No results'}</i>\n        </SelectLabel>\n    </EmptyOptionItem>\n);\n\nexport function Menu(props: MenuComponentProps) {\n    const {\n        rowHeight = 32,\n        selectedIndex,\n        open,\n        error,\n        menuWidth,\n        menuHeight,\n        multi,\n        hideSelectedOptions\n    } = props;\n    const currentValue =\n        isArray(props.value) && multi ? props.value : [props.value];\n    const options = React.useMemo(\n        () =>\n            (props.options || []).filter(option => {\n                if (hideSelectedOptions) {\n                    const selected = currentValue.some(val =>\n                        equal(val, option.value, props.equalCompareProp)\n                    );\n\n                    if (selected) {\n                        return false;\n                    }\n                }\n\n                return true;\n            }),\n        [\n            props.options,\n            props.equalCompareProp,\n            hideSelectedOptions,\n            currentValue\n        ]\n    );\n    const [rect, setRect] = useState<Rect>();\n    const list = useRef<FixedSizeList>(null);\n    const width = menuWidth || (rect && rect.width !== 'auto' ? rect.width : 0);\n    const height = Math.min(\n        Math.max(options.length * rowHeight, rowHeight) + 2,\n        menuHeight || 185\n    );\n\n    useEffect(() => {\n        if (\n            open &&\n            list.current &&\n            selectedIndex !== undefined &&\n            selectedIndex !== -1\n        ) {\n            list.current.scrollToItem(selectedIndex, 'center');\n        }\n    }, [open]);\n    const itemData = React.useMemo(() => {\n        return {\n            ...props,\n            options,\n            onSelect: (value: any, option: Option) => {\n                if (isArray(props.value) && props.multi) {\n                    const found = props.value.some(item =>\n                        equal(item, value, props.equalCompareProp)\n                    );\n                    const values = found\n                        ? props.value.filter(\n                              item =>\n                                  !equal(item, value, props.equalCompareProp)\n                          )\n                        : Array.from(new Set([...props.value, value]));\n\n                    props.onSelect(values, option);\n                } else {\n                    props.onSelect(value, option);\n                }\n            }\n        };\n    }, [\n        options.length,\n        props.search,\n        props.rowHeight,\n        props.selectedIndex,\n        props.labelComponent,\n        props.optionComponent,\n        props.value\n    ]);\n\n    function renderList(width: number, height: number, rowHeight: number) {\n        const MenuContent = props.menuComponent;\n        const itemCount = options.length;\n\n        if (MenuContent) {\n            return <MenuContent {...props} />;\n        }\n\n        if (itemCount === 0) {\n            return <Empty emptyText={props.emptyText} />;\n        }\n\n        return (\n            <FixedSizeList\n                className=\"react-slct-menu-list\"\n                ref={list}\n                width={width}\n                height={height}\n                itemSize={rowHeight}\n                itemCount={itemCount}\n                itemData={itemData}\n            >\n                {MenuRow}\n            </FixedSizeList>\n        );\n    }\n\n    return open ? (\n        <MenuContainer\n            error={error}\n            menuWidth={width}\n            menuHeight={height}\n            onRect={rect => setRect(rect)}\n        >\n            {renderList(width, height, rowHeight)}\n        </MenuContainer>\n    ) : null;\n}\n","import * as React from 'react';\nimport { CSSProperties, memo } from 'react';\nimport { areEqual } from 'react-window';\nimport { OptionComponent } from './option';\nimport { MenuComponentProps } from './typings';\nimport { equal, isArray } from './utils';\n\ninterface MenuRowProps {\n    index: number;\n    style: CSSProperties;\n    equalCompareProp?: string | null;\n    data: MenuComponentProps;\n}\n\nexport const MenuRow = memo(({ index, style, data }: MenuRowProps) => {\n    const {\n        options = [],\n        labelComponent,\n        selectedIndex,\n        optionComponent,\n        rowHeight,\n        search,\n        equalCompareProp,\n        multi,\n        onSelect\n    } = data;\n    const option = options[index];\n    const currentValue =\n        isArray(data.value) && multi ? data.value : [data.value];\n    const Component = optionComponent || OptionComponent;\n\n    return (\n        <div style={style}>\n            <Component\n                option={option}\n                labelComponent={labelComponent}\n                height={rowHeight}\n                active={currentValue.some(val =>\n                    equal(val, option.value, equalCompareProp)\n                )}\n                selected={selectedIndex === index}\n                search={search}\n                onSelect={onSelect}\n            />\n        </div>\n    );\n}, areEqual);\n"]}