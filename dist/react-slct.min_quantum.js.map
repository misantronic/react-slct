{"version":3,"sources":["src/index.tsx"],"names":["lodash_decorators_1","$fsx","r","React","styled_components_1","value_1","menu_1","exports","Menu","menu_container_1","utils_1","keys","typings_1","SelectProps","MenuComponentProps","LabelComponentProps","Option","option_1","OptionComponent","value_component_single_1","ValueComponentSingle","value_component_multi_1","ValueComponentMulti","typings_2","OptionComponentProps","ValueComponentSingleProps","ValueComponentMultiProps","Select","PureComponent","[object Object]","props","super","this","container","nativeSelect","createRef","state","open","blindText","options","search","creatable","creatableText","showCreate","some","option","value","label","filter","toLowerCase","includes","document","getDocument","Boolean","onCreate","_","prevState","handleBlindTextUpdate","removeDocumentListener","Container","className","clearable","placeholder","disabled","error","menuComponent","labelComponent","optionComponent","valueComponentSingle","valueComponentMulti","arrowComponent","clearComponent","hideSelectedOptions","equalCompareProp","multi","native","emptyText","rowHeight","menuWidth","menuHeight","keepSearchOnBlur","selectedIndex","focused","searchable","children","renderChildren","classNames","c","createElement","join","ref","onContainerRef","data-role","onKeyUp","onKeyDown","renderNativeSelect","Value","mobile","onClear","onClick","toggleMenu","onSearch","onSearchFocus","onSearchBlur","onOptionRemove","onSelect","onOptionSelect","NativeSelect","required","dataRole","undefined","isArray","map","findOptionIndex","propDisabled","multiple","tabIndex","onChange","onChangeNativeSelect","i","key","toKey","valueOptions","getValueOptions","showPlaceholder","length","MenuContainer","onToggle","onClose","closeMenu","onOpen","openMenu","onRef","findIndex","equal","setState","addDocumentListener","callback","cb","addEventListener","onDocumentClick","removeEventListener","blindTextTimeout","setTimeout","val","index","String","e","currentTarget","values","Array","from","selectedOptions","htmlOption","current","optionWasCreated","selectOnNative","createValue","find","optionIsCreatable","createOption","target","closest","contains","keyCode","TAB","handleBlindText","ARROW_UP","ARROW_DOWN","ENTER","newValue","ESC","BACKSPACE","clearTimeout","slice","cleanBlindText","SPACE","fromCodePoint","test","el","startsWith","default","div","select","css","tslib_1","__decorate","bind","debounce","SyntheticEvent","_a","Object","_b","KeyboardEvent","_c","_d"],"mappings":"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","sourcesContent":["import { bind, debounce } from 'lodash-decorators';\nimport * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Value } from './value';\nimport { Menu } from './menu';\nimport { MenuContainer } from './menu-container';\nimport {\n    isArray,\n    keys,\n    getDocument,\n    getValueOptions,\n    equal,\n    toKey\n} from './utils';\nimport {\n    SelectProps,\n    SelectState,\n    MenuComponentProps,\n    LabelComponentProps,\n    Option\n} from './typings';\nimport './global-stylings';\n\nexport {\n    SelectProps,\n    Menu,\n    MenuComponentProps,\n    LabelComponentProps,\n    Option,\n    keys\n};\nexport { OptionComponent } from './option';\nexport { ValueComponentSingle } from './value-component-single';\nexport { ValueComponentMulti } from './value-component-multi';\nexport {\n    OptionComponentProps,\n    ValueComponentSingleProps,\n    ValueComponentMultiProps\n} from './typings';\n\nexport class Select<T = any> extends React.PureComponent<\n    SelectProps<T>,\n    SelectState\n> {\n    private static Container = styled.div`\n        display: flex;\n        position: relative;\n        cursor: default;\n        width: 100%;\n        box-sizing: border-box;\n        pointer-events: ${(props: { disabled?: boolean }) =>\n            props.disabled ? 'none' : 'auto'};\n        opacity: ${(props: { disabled?: boolean }) =>\n            props.disabled ? 0.75 : 1};\n        user-select: none;\n    `;\n\n    private static NativeSelect = styled.select`\n        display: block;\n        opacity: 0;\n        position: absolute;\n        right: 0;\n        top: 0;\n        width: 100%;\n        height: 100%;\n        ${(props: { native?: boolean }) =>\n            props.native\n                ? css`\n                      z-index: 1;\n                  `\n                : css`\n                      pointer-events: none;\n                      z-index: auto;\n                  `};\n    `;\n\n    private nativeSelect: React.RefObject<HTMLSelectElement>;\n    private container: HTMLDivElement | null = null;\n    private blindTextTimeout!: number;\n\n    constructor(props: SelectProps) {\n        super(props);\n\n        this.nativeSelect = React.createRef();\n\n        this.state = {\n            open: false,\n            blindText: ''\n        };\n    }\n\n    private get options(): Option<T>[] {\n        const { search } = this.state;\n        const { creatable, creatableText } = this.props;\n        let options = this.props.options || [];\n        const showCreate =\n            creatable &&\n            !options.some(option => {\n                const { value, label } = option;\n\n                // @ts-ignore\n                return value === search || label === search;\n            });\n\n        if (search) {\n            options = options.filter(option =>\n                option.label.toLowerCase().includes(search.toLowerCase())\n            );\n        }\n\n        if (showCreate && search) {\n            const label = creatableText\n                ? typeof creatableText === 'string'\n                    ? creatableText\n                    : creatableText(search)\n                : `Create \"${search}\"`;\n\n            options = [\n                {\n                    label,\n                    value: search as any,\n                    creatable: true\n                },\n                ...options\n            ];\n        }\n\n        return options;\n    }\n\n    private get document() {\n        return getDocument();\n    }\n\n    private optionIsCreatable(option: Option<T>): boolean {\n        return (\n            this.props.creatable &&\n            option.creatable &&\n            Boolean(this.props.onCreate && this.state.search)\n        );\n    }\n\n    public componentDidUpdate(_, prevState: SelectState): void {\n        if (\n            this.state.blindText &&\n            prevState.blindText !== this.state.blindText\n        ) {\n            this.handleBlindTextUpdate();\n        }\n    }\n\n    public componentWillUnmount(): void {\n        this.removeDocumentListener();\n    }\n\n    public render(): React.ReactNode {\n        const { Container } = Select;\n        const {\n            className,\n            options,\n            creatable,\n            clearable,\n            placeholder,\n            value,\n            disabled,\n            error,\n            menuComponent,\n            labelComponent,\n            optionComponent,\n            valueComponentSingle,\n            valueComponentMulti,\n            arrowComponent,\n            clearComponent,\n            hideSelectedOptions,\n            equalCompareProp,\n            multi,\n            native,\n            emptyText,\n            rowHeight,\n            menuWidth,\n            menuHeight,\n            keepSearchOnBlur\n        } = this.props;\n        const { open, search, selectedIndex, focused } = this.state;\n        const searchable = this.props.searchable || creatable;\n\n        if (this.props.children) {\n            return this.renderChildren();\n        }\n\n        const classNames = [\n            'react-slct',\n            className,\n            open && 'open',\n            error && 'has-error'\n        ].filter(c => Boolean(c));\n\n        return (\n            <Container\n                className={classNames.join(' ')}\n                disabled={disabled}\n                ref={this.onContainerRef as any}\n                data-role={this.props['data-role']}\n                onKeyUp={this.onKeyUp}\n                onKeyDown={this.onKeyDown}\n            >\n                {this.renderNativeSelect()}\n                <Value\n                    clearable={clearable}\n                    searchable={searchable}\n                    open={open}\n                    disabled={disabled}\n                    multi={multi}\n                    mobile={native}\n                    focused={focused}\n                    options={options}\n                    placeholder={placeholder}\n                    error={error}\n                    value={value}\n                    search={search}\n                    keepSearchOnBlur={keepSearchOnBlur}\n                    equalCompareProp={equalCompareProp}\n                    labelComponent={labelComponent}\n                    valueComponentSingle={valueComponentSingle}\n                    valueComponentMulti={valueComponentMulti}\n                    arrowComponent={arrowComponent}\n                    clearComponent={clearComponent}\n                    onClear={this.onClear}\n                    onClick={this.toggleMenu}\n                    onSearch={this.onSearch}\n                    onSearchFocus={this.onSearchFocus}\n                    onSearchBlur={this.onSearchBlur}\n                    onOptionRemove={this.onOptionRemove}\n                />\n                <Menu\n                    open={open}\n                    options={this.options}\n                    value={value}\n                    multi={multi}\n                    error={error}\n                    search={search}\n                    selectedIndex={selectedIndex}\n                    menuComponent={menuComponent}\n                    labelComponent={labelComponent}\n                    optionComponent={optionComponent}\n                    hideSelectedOptions={hideSelectedOptions}\n                    equalCompareProp={equalCompareProp}\n                    emptyText={emptyText}\n                    rowHeight={rowHeight}\n                    menuWidth={menuWidth}\n                    menuHeight={menuHeight}\n                    onSelect={this.onOptionSelect}\n                />\n            </Container>\n        );\n    }\n\n    private renderNativeSelect(): React.ReactNode {\n        const { NativeSelect } = Select;\n        const { native, placeholder, multi, required, disabled } = this.props;\n        const dataRole = this.props['data-role']\n            ? `select-${this.props['data-role']}`\n            : undefined;\n        const clearable = this.props.clearable && native;\n        const value =\n            isArray(this.props.value) && multi\n                ? this.props.value.map(this.findOptionIndex)\n                : this.findOptionIndex(this.props.value || '');\n        const propDisabled =\n            disabled !== undefined ? disabled : required ? false : !native;\n\n        return (\n            <NativeSelect\n                ref={this.nativeSelect as any}\n                multiple={multi}\n                value={value}\n                disabled={propDisabled}\n                required={required}\n                native={native}\n                tabIndex={-1}\n                data-role={dataRole}\n                onChange={this.onChangeNativeSelect}\n            >\n                <option value=\"\" disabled={!clearable}>\n                    {placeholder}\n                </option>\n                {this.options.map((option, i) => (\n                    <option\n                        key={toKey(option.value, this.props.equalCompareProp)}\n                        value={`${i}`}\n                        disabled={option.disabled}\n                    >\n                        {option.label}\n                    </option>\n                ))}\n            </NativeSelect>\n        );\n    }\n\n    private renderChildren(): React.ReactNode {\n        const { options, placeholder, multi, children } = this.props;\n        const { open, search } = this.state;\n        const valueOptions = getValueOptions(\n            options || [],\n            this.props.value,\n            this.props.multi,\n            this.props.equalCompareProp\n        );\n        const value: T | T[] | undefined = !multi\n            ? this.props.value\n            : valueOptions.map(option => option.value);\n        const showPlaceholder =\n            !search &&\n            (isArray(value) && multi\n                ? value.length === 0\n                : value === undefined || value === null);\n\n        if (!children) {\n            return null;\n        }\n\n        return children({\n            options: this.options,\n            open,\n            value,\n            MenuContainer,\n            placeholder: showPlaceholder ? placeholder : undefined,\n            onToggle: () => this.toggleMenu(),\n            onClose: () => this.closeMenu(),\n            onOpen: () => this.openMenu(),\n            onRef: ref => (this.container = ref)\n        });\n    }\n\n    @bind\n    private toggleMenu(): void {\n        const open = !this.state.open;\n\n        if (open) {\n            this.openMenu();\n        } else {\n            this.closeMenu();\n        }\n    }\n\n    @debounce(0)\n    private openMenu(): void {\n        const selectedIndex = this.props.hideSelectedOptions\n            ? undefined\n            : this.options.findIndex(option =>\n                  equal(\n                      option.value,\n                      this.props.value,\n                      this.props.equalCompareProp\n                  )\n              );\n        const keepSearchOnBlur =\n            this.props.keepSearchOnBlur && !this.props.value;\n\n        this.setState(\n            {\n                open: true,\n                search: keepSearchOnBlur ? this.state.search : undefined,\n                selectedIndex\n            },\n            () => {\n                if (this.props.onOpen) {\n                    this.props.onOpen();\n                }\n\n                this.addDocumentListener();\n            }\n        );\n    }\n\n    @debounce(0)\n    private closeMenu(callback = () => {}): void {\n        const keepSearchOnBlur =\n            this.props.keepSearchOnBlur && !this.props.value;\n\n        this.removeDocumentListener();\n        this.setState(\n            {\n                open: false,\n                search: keepSearchOnBlur ? this.state.search : undefined,\n                selectedIndex: undefined\n            },\n            () => {\n                if (this.props.onClose) {\n                    this.props.onClose();\n                }\n\n                callback();\n            }\n        );\n    }\n\n    private createOption(value: string, cb?: () => void): void {\n        const { onCreate } = this.props;\n\n        if (onCreate) {\n            this.closeMenu(() => {\n                onCreate(value);\n\n                if (cb) {\n                    cb();\n                }\n            });\n        }\n    }\n\n    private addDocumentListener(): void {\n        this.removeDocumentListener();\n\n        if (this.document) {\n            this.document.addEventListener('click', this.onDocumentClick);\n        }\n    }\n\n    private removeDocumentListener(): void {\n        if (this.document) {\n            this.document.removeEventListener('click', this.onDocumentClick);\n        }\n    }\n\n    @bind\n    private cleanBlindText(): void {\n        this.blindTextTimeout = setTimeout(\n            () => this.setState({ blindText: '' }),\n            700\n        );\n    }\n\n    @bind\n    private findOptionIndex(val: any) {\n        let index = this.options.findIndex(option => option.value === val);\n\n        if (index === -1) {\n            if (typeof val === 'object') {\n                index = this.options.findIndex(option =>\n                    equal(option.value, val, this.props.equalCompareProp)\n                );\n            }\n\n            if (index === -1) {\n                return '';\n            }\n        }\n\n        return String(index);\n    }\n\n    @bind\n    private onChangeNativeSelect(\n        e: React.SyntheticEvent<HTMLSelectElement>\n    ): void {\n        const { onChange, multi } = this.props;\n        const { currentTarget } = e;\n\n        if (onChange) {\n            if (currentTarget.value === '') {\n                this.onClear();\n            } else {\n                const values = Array.from(currentTarget.selectedOptions).map(\n                    htmlOption => this.options[htmlOption.index - 1].value\n                );\n\n                if (multi) {\n                    onChange(values as any);\n                } else {\n                    onChange(values[0] as any);\n                }\n            }\n        }\n    }\n\n    @bind\n    private onSearchFocus(): void {\n        const { open, focused } = this.state;\n\n        if (!open && !focused && !this.props.native) {\n            this.openMenu();\n        }\n\n        this.setState({ focused: true });\n    }\n\n    @bind\n    private onSearchBlur(): void {\n        this.setState({ focused: false });\n    }\n\n    @bind\n    private onOptionSelect(value: any | any[], option?: Option<T>): void {\n        const { current } = this.nativeSelect;\n        const { multi, onChange, creatable } = this.props;\n        let optionWasCreated = false;\n\n        const selectOnNative = () => {\n            if (current) {\n                current.value =\n                    isArray(value) && multi\n                        ? (value.map(this.findOptionIndex) as any)\n                        : this.findOptionIndex(value);\n            }\n\n            this.setState({ focused: true }, () =>\n                this.closeMenu(() => onChange && onChange(value, option))\n            );\n        };\n\n        if (creatable) {\n            const createValue = (val: any) => {\n                const option = this.options.find(\n                    option =>\n                        this.optionIsCreatable(option) && option.value === val\n                );\n\n                if (option) {\n                    optionWasCreated = true;\n                    this.createOption(option.value as any, selectOnNative);\n                }\n            };\n\n            if (isArray(value) && multi) {\n                value.map(createValue);\n            } else {\n                createValue(value);\n            }\n        }\n\n        if (!optionWasCreated) {\n            selectOnNative();\n        }\n    }\n\n    @bind\n    private onOptionRemove(value: any): void {\n        if (isArray(this.props.value) && this.props.multi) {\n            const values = this.props.value.filter(\n                val => !equal(val, value, this.props.equalCompareProp)\n            );\n\n            this.onOptionSelect(values);\n        }\n    }\n\n    @bind\n    private onClear(): void {\n        this.onOptionSelect(this.props.multi ? [] : undefined);\n    }\n\n    @bind\n    private onSearch(search: string): void {\n        this.setState({ search }, () => {\n            if (this.options.length === 1 || (this.props.creatable && search)) {\n                this.setState({ selectedIndex: 0 });\n            } else {\n                this.setState({ selectedIndex: undefined });\n            }\n\n            if (this.props.onSearch) {\n                this.props.onSearch(search);\n            }\n        });\n    }\n\n    @bind\n    private onDocumentClick(e): void {\n        const { target } = e;\n\n        if (target.closest('.react-slct-menu')) {\n            return;\n        }\n\n        if (this.container && !this.container.contains(target)) {\n            this.closeMenu();\n        }\n    }\n\n    @bind\n    private onKeyDown({ keyCode }: React.KeyboardEvent): void {\n        const { searchable, creatable } = this.props;\n\n        switch (keyCode) {\n            case keys.TAB:\n                if (this.state.open) {\n                    this.closeMenu();\n                }\n                break;\n        }\n\n        if (!searchable && !creatable) {\n            this.handleBlindText(keyCode);\n        }\n    }\n\n    @bind\n    private onKeyUp({ keyCode }: React.KeyboardEvent): void {\n        const { search, open } = this.state;\n        const { value, multi } = this.props;\n        let selectedIndex = this.state.selectedIndex;\n\n        switch (keyCode) {\n            case keys.ARROW_UP:\n                if (open) {\n                    if (selectedIndex !== undefined) {\n                        selectedIndex = selectedIndex - 1;\n\n                        if (selectedIndex < 0) {\n                            selectedIndex = this.options.length - 1;\n                        }\n                    }\n\n                    this.setState({ selectedIndex });\n                } else {\n                    this.openMenu();\n                }\n                break;\n            case keys.ARROW_DOWN:\n                if (open) {\n                    if (\n                        selectedIndex === undefined ||\n                        selectedIndex === this.options.length - 1\n                    ) {\n                        selectedIndex = 0;\n                    } else {\n                        selectedIndex = selectedIndex + 1;\n                    }\n\n                    this.setState({ selectedIndex });\n                } else {\n                    this.openMenu();\n                }\n                break;\n            case keys.ENTER:\n                if (\n                    this.state.selectedIndex === 0 &&\n                    this.optionIsCreatable(this.options[0])\n                ) {\n                    this.createOption(search!);\n                } else if (\n                    selectedIndex !== undefined &&\n                    this.options[selectedIndex]\n                ) {\n                    const option = this.options[selectedIndex];\n                    const newValue = option.value;\n\n                    this.onOptionSelect(\n                        isArray(value) && multi\n                            ? [...value, newValue]\n                            : newValue,\n                        option\n                    );\n                }\n                break;\n            case keys.ESC:\n                if (open) {\n                    this.closeMenu();\n                }\n                break;\n        }\n    }\n\n    private handleBlindText(keyCode: number): void {\n        const { blindText } = this.state;\n\n        if (keyCode === keys.BACKSPACE && blindText.length) {\n            clearTimeout(this.blindTextTimeout);\n\n            this.setState(\n                {\n                    blindText: blindText.slice(0, blindText.length - 1)\n                },\n                this.cleanBlindText\n            );\n        } else if (keyCode === keys.SPACE) {\n            clearTimeout(this.blindTextTimeout);\n\n            this.setState(\n                {\n                    blindText: blindText + ' '\n                },\n                this.cleanBlindText\n            );\n        } else {\n            const key = String.fromCodePoint(keyCode);\n\n            if (/\\w/.test(key)) {\n                clearTimeout(this.blindTextTimeout);\n\n                this.setState(\n                    {\n                        blindText: blindText + key\n                    },\n                    this.cleanBlindText\n                );\n            }\n        }\n    }\n\n    @bind\n    private onContainerRef(el: HTMLDivElement | null): void {\n        this.container = el;\n    }\n\n    private handleBlindTextUpdate(): void {\n        const { open, blindText } = this.state;\n        const { multi } = this.props;\n\n        if (open) {\n            const selectedIndex = this.options.findIndex(option =>\n                option.label.toLowerCase().startsWith(blindText.toLowerCase())\n            );\n\n            if (selectedIndex >= 0) {\n                this.setState({ selectedIndex });\n            }\n        } else if (!multi) {\n            if (blindText) {\n                const option = this.options.find(option =>\n                    option.label\n                        .toLowerCase()\n                        .startsWith(blindText.toLowerCase())\n                );\n\n                if (option) {\n                    this.onOptionSelect(option.value, option);\n                }\n            } else {\n                this.onOptionSelect(undefined);\n            }\n        }\n    }\n}\n"]}