{"version":3,"sources":["src/index.tsx"],"names":["React","$fsx","r","styled_components_1","menu_1","Object","defineProperty","exports","enumerable","get","Menu","menu_container_1","typings_1","LabelComponentProps","MenuComponentProps","Option","SelectProps","utils_1","keys","value_1","option_1","OptionComponent","typings_2","OptionComponentProps","ValueComponentMultiProps","ValueComponentSingleProps","SelectStaticControl","value_component_multi_1","ValueComponentMulti","value_component_single_1","ValueComponentSingle","tslib_1","__exportStar","Container","default","div","props","disabled","NativeSelect","select","native","css","Select","forwardRef","ref","useRef","open","setOpen","useState","blindText","setBlindText","selectedIndex","setSelectedIndex","undefined","search","setSearch","focused","setFocused","blindTextTimeout","nativeSelect","className","creatable","clearable","placeholder","value","error","menuComponent","labelComponent","optionComponent","valueComponentSingle","valueComponentMulti","arrowComponent","clearComponent","hideSelectedOptions","equalCompareProp","multi","emptyText","rowHeight","menuWidth","menuHeight","menuPosition","keepSearchOnBlur","required","creatableText","searchable","document","getDocument","options","newOptions","showCreate","some","option","label","filter","replaceUmlauts","toLowerCase","searchVal","expr","test","includes","getOptions","toggleMenu","openMenu","closeMenu","findIndex","equal","_a","onOpen","call","removeDocumentListener","addEventListener","onDocumentClick","callback","onClose","createOption","cb","onCreate","removeEventListener","cleanBlindText","current","setTimeout","findOptionIndex","val","index","String","onChangeNativeSelect","e","currentTarget","onChange","onClear","values","Array","from","selectedOptions","map","htmlOption","onOptionSelect","optionWasCreated","selectOnNative","isArray","keepMenuOnSelect","createValue","find","optionIsCreatable","Boolean","useEffect","newSelectedIndex","startsWith","handleBlindTextUpdate","onSearch","control","close","getValue","Function","useCallback","target","closest","contains","valueOptions","getValueOptions","children","showPlaceholder","length","MenuContainer","onToggle","onRef","renderChildren","classNames","c","createElement","join","data-role","onKeyUp","keyCode","ARROW_UP","ARROW_DOWN","ENTER","newValue","ESC","onKeyDown","TAB","BACKSPACE","clearTimeout","slice","SPACE","key","fromCodePoint","handleBlindText","dataRole","propDisabled","multiple","tabIndex","i","toKey","renderNativeSelect","Value","mobile","valueIconComponent","onClick","onSearchFocus","onSearchBlur","onOptionRemove","onSelect"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Menu } from './menu';\nimport { MenuContainer } from './menu-container';\nimport {\n    LabelComponentProps,\n    MenuComponentProps,\n    Option,\n    SelectProps\n} from './typings';\nimport {\n    equal,\n    getDocument,\n    getValueOptions,\n    isArray,\n    keys,\n    replaceUmlauts,\n    toKey\n} from './utils';\nimport { Value } from './value';\nexport { OptionComponent } from './option';\nexport {\n    OptionComponentProps,\n    ValueComponentMultiProps,\n    ValueComponentSingleProps,\n    SelectStaticControl\n} from './typings';\nexport { ValueComponentMulti } from './value-component-multi';\nexport { ValueComponentSingle } from './value-component-single';\nexport * from './config';\nexport {\n    SelectProps,\n    Menu,\n    MenuComponentProps,\n    LabelComponentProps,\n    Option,\n    keys\n};\n\nconst Container = styled.div<{ disabled?: boolean }>`\n    display: flex;\n    position: relative;\n    cursor: default;\n    width: 100%;\n    box-sizing: border-box;\n    pointer-events: ${(props) => (props.disabled ? 'none' : 'auto')};\n    opacity: ${(props) => (props.disabled ? 0.75 : 1)};\n    user-select: none;\n`;\n\nconst NativeSelect = styled.select<{ native?: boolean }>`\n    display: block;\n    opacity: 0;\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    ${(props) =>\n        props.native\n            ? css`\n                  z-index: 1;\n              `\n            : css`\n                  pointer-events: none;\n                  z-index: auto;\n              `};\n`;\n\nfunction SelectImpl<T = any>(\n    props: SelectProps<T>,\n    ref: React.Ref<HTMLDivElement> | null\n): JSX.Element | null {\n    if (!ref) {\n        ref = React.useRef<HTMLDivElement>(null);\n    }\n\n    const [open, setOpen] = React.useState(false);\n    const [blindText, setBlindText] = React.useState('');\n    const [selectedIndex, setSelectedIndex] = React.useState<\n        number | undefined\n    >(undefined);\n    const [search, setSearch] = React.useState<string | undefined>(\n        props.search\n    );\n    const [focused, setFocused] = React.useState(false);\n    const blindTextTimeout = React.useRef(0);\n    const nativeSelect = React.useRef<HTMLSelectElement>(null);\n\n    const {\n        className,\n        creatable,\n        clearable,\n        placeholder,\n        value,\n        disabled,\n        error,\n        menuComponent,\n        labelComponent,\n        optionComponent,\n        valueComponentSingle,\n        valueComponentMulti,\n        arrowComponent,\n        clearComponent,\n        hideSelectedOptions,\n        equalCompareProp,\n        multi,\n        native,\n        emptyText,\n        rowHeight,\n        menuWidth,\n        menuHeight,\n        menuPosition,\n        keepSearchOnBlur,\n        required,\n        creatableText\n    } = props;\n    const searchable = props.searchable || creatable;\n    const document = getDocument();\n    const options = getOptions();\n\n    React.useEffect(() => {\n        if (blindText) {\n            handleBlindTextUpdate();\n        }\n    }, [blindText]);\n\n    React.useEffect(() => {\n        setSearch(props.search);\n    }, [props.search]);\n\n    React.useEffect(() => {\n        if (search !== undefined) {\n            props.onSearch?.(search, options);\n        }\n    }, [search]);\n\n    React.useEffect(() => {\n        if (props.control) {\n            const ref = { close: () => closeMenu(getValue()), open: openMenu };\n\n            if (props.control instanceof Function) {\n                props.control(ref);\n            } else if (props.control instanceof Object) {\n                props.control.current = ref;\n            }\n        }\n    }, [props.control]);\n\n    function getOptions(): Option<T>[] {\n        let newOptions = props.options || [];\n        const showCreate =\n            creatable &&\n            !newOptions.some((option) => {\n                const { value, label } = option;\n\n                return (\n                    (typeof value === 'string' && value === search) ||\n                    label === search\n                );\n            });\n\n        if (search) {\n            newOptions = newOptions.filter((option) => {\n                const label = replaceUmlauts(option.label).toLowerCase();\n                const searchVal = replaceUmlauts(search).toLowerCase();\n\n                if (option.expr) {\n                    return option.expr.test(searchVal);\n                }\n\n                return label.includes(searchVal);\n            });\n        }\n\n        if (showCreate && search) {\n            const label = creatableText\n                ? typeof creatableText === 'string'\n                    ? creatableText\n                    : creatableText(search)\n                : `Create \"${search}\"`;\n\n            newOptions = [\n                {\n                    label,\n                    value: search as any,\n                    creatable: true\n                },\n                ...newOptions\n            ];\n        }\n\n        return newOptions;\n    }\n\n    function toggleMenu(): void {\n        const newOpen = !open;\n\n        if (newOpen) {\n            openMenu();\n        } else {\n            closeMenu(props.value);\n        }\n    }\n\n    function openMenu(): void {\n        const selectedIndex = props.hideSelectedOptions\n            ? undefined\n            : options.findIndex((option) =>\n                  equal(option.value, props.value, props.equalCompareProp)\n              );\n        const keepSearchOnBlur = props.keepSearchOnBlur && !props.value;\n\n        setOpen(true);\n        setSearch(keepSearchOnBlur || props.search ? search : undefined);\n        setSelectedIndex(selectedIndex);\n        props.onOpen?.();\n\n        addDocumentListener();\n    }\n\n    function closeMenu(value: any | any[], callback = () => {}): void {\n        const keepSearchOnBlur = props.keepSearchOnBlur && !value;\n\n        removeDocumentListener();\n        setOpen(false);\n        setSearch(keepSearchOnBlur ? search : undefined);\n        setSelectedIndex(undefined);\n        props.onClose?.();\n\n        callback();\n    }\n\n    function createOption(value: string, cb?: () => void): void {\n        if (props.onCreate) {\n            closeMenu(value, () => {\n                props.onCreate?.(value);\n                cb?.();\n            });\n        }\n    }\n\n    function addDocumentListener(): void {\n        removeDocumentListener();\n\n        document?.addEventListener('click', onDocumentClick);\n    }\n\n    function removeDocumentListener(): void {\n        document?.removeEventListener('click', onDocumentClick);\n    }\n\n    function cleanBlindText(): void {\n        blindTextTimeout.current = setTimeout(() => setBlindText(''), 700);\n    }\n\n    function findOptionIndex(val: any) {\n        let index = options.findIndex((option) => option.value === val);\n\n        if (index === -1) {\n            if (typeof val === 'object') {\n                index = options.findIndex((option) =>\n                    equal(option.value, val, props.equalCompareProp)\n                );\n            }\n\n            if (index === -1) {\n                return '';\n            }\n        }\n\n        return String(index);\n    }\n\n    function onChangeNativeSelect(e: React.SyntheticEvent<HTMLSelectElement>) {\n        const { currentTarget } = e;\n\n        if (props.onChange) {\n            if (currentTarget.value === '') {\n                onClear();\n            } else {\n                const values = Array.from(currentTarget.selectedOptions).map(\n                    (htmlOption) => options[htmlOption.index - 1].value\n                );\n\n                if (multi) {\n                    props.onChange(values as any);\n                } else {\n                    props.onChange(values[0] as any);\n                }\n            }\n        }\n    }\n\n    function onSearchFocus() {\n        if (!open && !focused && !native) {\n            openMenu();\n        }\n\n        setFocused(true);\n    }\n\n    function onSearchBlur() {\n        setFocused(false);\n    }\n\n    function onOptionSelect(value: any | any[], option?: Option<T>): void {\n        const { current } = nativeSelect;\n        let optionWasCreated = false;\n\n        const selectOnNative = () => {\n            if (current) {\n                current.value =\n                    isArray(value) && multi\n                        ? (value.map(findOptionIndex) as any)\n                        : findOptionIndex(value);\n            }\n\n            setFocused(true);\n            if (props.keepMenuOnSelect) {\n                props.onChange?.(value, option);\n            } else {\n                closeMenu(value, () => props.onChange?.(value, option));\n            }\n        };\n\n        if (creatable) {\n            const createValue = (val: any) => {\n                const option = options.find(\n                    (option) =>\n                        optionIsCreatable(option) && option.value === val\n                );\n\n                if (option) {\n                    optionWasCreated = true;\n                    createOption(option.value as any, selectOnNative);\n                }\n            };\n\n            if (isArray(value) && multi) {\n                value.map(createValue);\n            } else {\n                createValue(value);\n            }\n        }\n\n        if (!optionWasCreated) {\n            selectOnNative();\n        }\n    }\n\n    function onOptionRemove(value: any): void {\n        if (isArray(props.value) && props.multi) {\n            const values = props.value.filter(\n                (val) => !equal(val, value, props.equalCompareProp)\n            );\n\n            onOptionSelect(values);\n        }\n    }\n\n    function onClear() {\n        onOptionSelect(props.multi ? [] : undefined);\n    }\n\n    function onSearch(search: string): void {\n        setSearch(search);\n        setOpen(true);\n\n        if (options.length === 1 || (props.creatable && search)) {\n            setSelectedIndex(0);\n        } else {\n            setSelectedIndex(undefined);\n        }\n\n        props.onSearch?.(search, options);\n    }\n\n    function optionIsCreatable(option: Option<T>): boolean {\n        return (\n            creatable && option.creatable && Boolean(props.onCreate && search)\n        );\n    }\n\n    const onDocumentClick = React.useCallback((e) => {\n        const { target } = e;\n\n        if (target.closest('.react-slct-menu')) {\n            return;\n        }\n\n        if (typeof ref === 'object' && !ref?.current?.contains(target)) {\n            closeMenu(props.value);\n        }\n    }, []);\n\n    function onKeyDown({ keyCode }: React.KeyboardEvent): void {\n        switch (keyCode) {\n            case keys.TAB:\n                if (open) {\n                    closeMenu(props.value);\n                }\n                break;\n        }\n\n        if (!searchable && !creatable) {\n            handleBlindText(keyCode);\n        }\n    }\n\n    function onKeyUp({ keyCode }: React.KeyboardEvent): void {\n        let newSelectedIndex = selectedIndex;\n\n        switch (keyCode) {\n            case keys.ARROW_UP:\n                if (open) {\n                    if (newSelectedIndex !== undefined) {\n                        newSelectedIndex = newSelectedIndex - 1;\n\n                        if (newSelectedIndex < 0) {\n                            newSelectedIndex = options.length - 1;\n                        }\n                    }\n\n                    setSelectedIndex(newSelectedIndex);\n                } else {\n                    openMenu();\n                }\n                break;\n            case keys.ARROW_DOWN:\n                if (open) {\n                    if (\n                        newSelectedIndex === undefined ||\n                        newSelectedIndex === options.length - 1\n                    ) {\n                        newSelectedIndex = 0;\n                    } else {\n                        newSelectedIndex = newSelectedIndex + 1;\n                    }\n\n                    setSelectedIndex(newSelectedIndex);\n                } else {\n                    openMenu();\n                }\n                break;\n            case keys.ENTER:\n                if (selectedIndex === 0 && optionIsCreatable(options[0])) {\n                    createOption(search!);\n                } else if (\n                    newSelectedIndex !== undefined &&\n                    options[newSelectedIndex]\n                ) {\n                    const option = options[newSelectedIndex];\n                    const newValue = option.value;\n\n                    onOptionSelect(\n                        isArray(value) && multi\n                            ? [...value, newValue]\n                            : newValue,\n                        option\n                    );\n                }\n                break;\n            case keys.ESC:\n                if (open) {\n                    closeMenu(value);\n                }\n                break;\n        }\n    }\n\n    function handleBlindText(keyCode: number): void {\n        if (keyCode === keys.BACKSPACE && blindText.length) {\n            clearTimeout(blindTextTimeout.current);\n\n            setBlindText(blindText.slice(0, blindText.length - 1));\n            cleanBlindText();\n        } else if (keyCode === keys.SPACE) {\n            clearTimeout(blindTextTimeout.current);\n\n            setBlindText(blindText + ' ');\n            cleanBlindText();\n        } else {\n            const key = String.fromCodePoint(keyCode);\n\n            if (/\\w/.test(key)) {\n                clearTimeout(blindTextTimeout.current);\n\n                setBlindText(blindText + key);\n                cleanBlindText();\n            }\n        }\n    }\n\n    function handleBlindTextUpdate(): void {\n        if (open) {\n            const newSelectedIndex = options.findIndex((option) =>\n                option.label.toLowerCase().startsWith(blindText.toLowerCase())\n            );\n\n            if (newSelectedIndex >= 0) {\n                setSelectedIndex(newSelectedIndex);\n            }\n        } else if (!multi) {\n            if (blindText) {\n                const option = options.find((option) =>\n                    option.label\n                        .toLowerCase()\n                        .startsWith(blindText.toLowerCase())\n                );\n\n                if (option) {\n                    onOptionSelect(option.value, option);\n                }\n            } else {\n                onOptionSelect(undefined);\n            }\n        }\n    }\n\n    function getValue(): T | T[] | undefined {\n        const valueOptions = getValueOptions(\n            props.options || [],\n            props.value,\n            props.multi,\n            props.equalCompareProp\n        );\n        return !multi\n            ? props.value\n            : valueOptions.map((option) => option.value);\n    }\n\n    function renderChildren(): JSX.Element | null {\n        const value = getValue();\n        const showPlaceholder =\n            !search &&\n            (isArray(value) && multi\n                ? value.length === 0\n                : value === undefined || value === null);\n\n        if (!props.children) {\n            return null;\n        }\n\n        return props.children({\n            options,\n            open,\n            value,\n            MenuContainer,\n            placeholder: showPlaceholder ? placeholder : undefined,\n            onToggle: toggleMenu,\n            onClose: () => closeMenu(value),\n            onOpen: openMenu,\n            onRef: ref\n        });\n    }\n\n    function renderNativeSelect(): React.ReactNode {\n        const dataRole = props['data-role']\n            ? `select-${props['data-role']}`\n            : undefined;\n        const clearable = props.clearable && native;\n        const value =\n            isArray(props.value) && multi\n                ? props.value.map(findOptionIndex)\n                : findOptionIndex(props.value || '');\n        const propDisabled = disabled ? disabled : required ? false : !native;\n\n        return (\n            <NativeSelect\n                ref={nativeSelect as any}\n                multiple={multi}\n                value={value}\n                disabled={propDisabled}\n                required={required}\n                native={native}\n                tabIndex={-1}\n                data-role={dataRole}\n                onChange={onChangeNativeSelect}\n            >\n                <option value=\"\" disabled={!clearable}>\n                    {placeholder}\n                </option>\n                {options.map((option, i) => (\n                    <option\n                        key={toKey(option.value, props.equalCompareProp)}\n                        value={`${i}`}\n                        disabled={option.disabled}\n                    >\n                        {option.label}\n                    </option>\n                ))}\n            </NativeSelect>\n        );\n    }\n\n    if (props.children) {\n        return renderChildren();\n    }\n\n    const classNames = [\n        'react-slct',\n        className,\n        open && 'open',\n        error && 'has-error'\n    ].filter((c) => Boolean(c));\n\n    return (\n        <Container\n            className={classNames.join(' ')}\n            disabled={disabled}\n            ref={ref}\n            data-role={props['data-role']}\n            onKeyUp={onKeyUp}\n            onKeyDown={onKeyDown}\n        >\n            {renderNativeSelect()}\n            <Value\n                clearable={clearable}\n                searchable={searchable}\n                open={open}\n                disabled={disabled}\n                multi={multi}\n                mobile={native}\n                focused={focused}\n                options={props.options}\n                placeholder={placeholder}\n                error={error}\n                value={value}\n                search={search}\n                keepSearchOnBlur={keepSearchOnBlur}\n                equalCompareProp={equalCompareProp}\n                labelComponent={labelComponent}\n                valueComponentSingle={valueComponentSingle}\n                valueComponentMulti={valueComponentMulti}\n                arrowComponent={arrowComponent}\n                clearComponent={clearComponent}\n                valueIconComponent={props.valueIconComponent}\n                onClear={onClear}\n                onClick={toggleMenu}\n                onSearch={onSearch}\n                onSearchFocus={onSearchFocus}\n                onSearchBlur={onSearchBlur}\n                onOptionRemove={onOptionRemove}\n            />\n            <Menu\n                open={open}\n                options={options}\n                value={value}\n                multi={multi}\n                error={error}\n                search={search}\n                selectedIndex={selectedIndex}\n                menuComponent={menuComponent}\n                labelComponent={labelComponent}\n                optionComponent={optionComponent}\n                hideSelectedOptions={hideSelectedOptions}\n                equalCompareProp={equalCompareProp}\n                emptyText={emptyText}\n                rowHeight={rowHeight}\n                menuWidth={menuWidth}\n                menuHeight={menuHeight}\n                menuPosition={menuPosition}\n                onSelect={onOptionSelect}\n            />\n        </Container>\n    );\n}\n\nexport const Select = React.forwardRef<HTMLDivElement, SelectProps<any>>(\n    SelectImpl\n);\n"]}