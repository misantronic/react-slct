{"version":3,"sources":["src/index.tsx","src/value.tsx","src/label.tsx","src/utils.ts","src/value-component-multi.tsx","src/value-component-single.tsx","src/menu.tsx","src/option.tsx","src/global-stylings.tsx"],"names":["utils_1","$fsx","r","typings_1","search","this","state","NativeSelect","Select","getValueOptions","options","props","value","multi","valueOptions","map","option","findIndex","equal","setState","blindTextTimeout","setTimeout","blindText","exports","window","getWindow","disabled","clearable","open","mobile","focused","error","showClearer","Boolean","length","searchAtStart","document","createRange","sel","getSelection","searchable","keys","TAB","e","keyCode","ENTER","ARROW_UP","ARROW_DOWN","preventDefault","Value","styled_components_1","SelectLabel","default","span","valueA","valueB","undefined","id","toJSON","JSON","stringify","isArray","val","Array","toKey","filter","some","getDocument","getWindowInnerHeight","defaultHeight","innerHeight","ESC","BACKSPACE","SPACE","TagContainer","ValueComponentMulti","labelComponent","onRemove","Label","label_1","React","createElement","Object","assign","className","Remove","type","active","div","ValueComponentSingle","memo","label","emptyText","Math","min","max","rowHeight","menuHeight","selectedIndex","optionComponent","item","MenuWrapper","el","getBoundingClientRect","menuWidth","onRef","onClick","children","target","closest","rect","MenuContainer","lodash_decorators_1","OptionComponent","PureComponent","[object Object]","OptionItem","selected","height","v","join","onSelect","tslib_1","__decorate","bind","react_dom_1","getElementById","ReactSlctStyle","createGlobalStyle","reactSlctDiv","body","appendChild","render","create"],"mappings":"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","sourcesContent":["import { bind, debounce } from 'lodash-decorators';\nimport * as React from 'react';\nimport styled from 'styled-components';\nimport { Value } from './value';\nimport { Menu, MenuContainer } from './menu';\nimport {\n    isArray,\n    keys,\n    getDocument,\n    getValueOptions,\n    equal,\n    toKey\n} from './utils';\nimport {\n    SelectProps,\n    SelectState,\n    MenuComponentProps,\n    Option\n} from './typings';\nimport './global-stylings';\n\nexport { SelectProps, Menu, MenuComponentProps, Option, keys };\n\nexport class Select<T = any> extends React.PureComponent<\n    SelectProps<T>,\n    SelectState\n> {\n    private static Container = styled.div`\n        display: flex;\n        position: relative;\n        cursor: default;\n        width: 100%;\n        box-sizing: border-box;\n        pointer-events: ${(props: { disabled?: boolean }) =>\n            props.disabled ? 'none' : 'auto'};\n        opacity: ${(props: { disabled?: boolean }) =>\n            props.disabled ? 0.75 : 1};\n        user-select: none;\n    `;\n\n    private static NativeSelect = styled.select`\n        display: block;\n        z-index: ${(props: { native?: boolean }) =>\n            props.native ? '1' : 'auto'};\n        opacity: 0;\n        position: absolute;\n        right: 0;\n        top: 0;\n        width: 100%;\n        height: 100%;\n    `;\n\n    private nativeSelect: React.RefObject<HTMLSelectElement>;\n    private container: HTMLDivElement | null = null;\n    private blindTextTimeout!: number;\n\n    constructor(props: SelectProps) {\n        super(props);\n\n        this.nativeSelect = React.createRef();\n\n        this.state = {\n            open: false,\n            blindText: ''\n        };\n    }\n\n    private get options(): Option<T>[] {\n        const { search } = this.state;\n        const { creatable, onCreateText } = this.props;\n        let options = this.props.options || [];\n        const showCreate =\n            creatable &&\n            !options.some(option => option.value === (search as any));\n\n        if (search) {\n            options = options.filter(option =>\n                option.label.toLowerCase().includes(search.toLowerCase())\n            );\n        }\n\n        if (showCreate && search) {\n            options = [\n                {\n                    label: onCreateText\n                        ? onCreateText(search)\n                        : `Create \"${search}\"`,\n                    value: search as any,\n                    creatable: true\n                },\n                ...options\n            ];\n        }\n\n        return options;\n    }\n\n    private get document() {\n        return getDocument();\n    }\n\n    private optionIsCreatable(option: Option<T>): boolean {\n        return (\n            this.props.creatable &&\n            option.creatable &&\n            Boolean(this.props.onCreate && this.state.search)\n        );\n    }\n\n    public componentDidUpdate(_, prevState: SelectState): void {\n        if (\n            this.state.blindText &&\n            prevState.blindText !== this.state.blindText\n        ) {\n            this.handleBlindTextUpdate();\n        }\n    }\n\n    public componentWillUnmount(): void {\n        this.removeDocumentListener();\n    }\n\n    public render(): React.ReactNode {\n        const { Container } = Select;\n        const {\n            className,\n            options,\n            creatable,\n            clearable,\n            placeholder,\n            value,\n            disabled,\n            error,\n            menuComponent,\n            labelComponent,\n            optionComponent,\n            valueComponentSingle,\n            valueComponentMulti,\n            arrowComponent,\n            clearComponent,\n            multi,\n            native,\n            emptyText,\n            rowHeight,\n            menuHeight,\n            keepSearchOnBlur\n        } = this.props;\n        const { open, search, selectedIndex, focused } = this.state;\n        const searchable = this.props.searchable || creatable;\n\n        if (this.props.children) {\n            return this.renderChildren();\n        }\n\n        const classNames = [\n            'react-slct',\n            className,\n            open && 'open',\n            error && 'has-error'\n        ].filter(c => Boolean(c));\n\n        return (\n            <Container\n                className={classNames.join(' ')}\n                disabled={disabled}\n                ref={this.onContainerRef as any}\n                data-role={this.props['data-role']}\n                onKeyUp={this.onKeyUp}\n                onKeyDown={this.onKeyDown}\n            >\n                {this.renderNativeSelect()}\n                <Value\n                    clearable={clearable}\n                    searchable={searchable}\n                    open={open}\n                    disabled={disabled}\n                    multi={multi}\n                    mobile={native}\n                    focused={focused}\n                    options={options}\n                    placeholder={placeholder}\n                    error={error}\n                    value={value}\n                    search={search}\n                    keepSearchOnBlur={keepSearchOnBlur}\n                    labelComponent={labelComponent}\n                    valueComponentSingle={valueComponentSingle}\n                    valueComponentMulti={valueComponentMulti}\n                    arrowComponent={arrowComponent}\n                    clearComponent={clearComponent}\n                    onClear={this.onClear}\n                    onClick={this.toggleMenu}\n                    onSearch={this.onSearch}\n                    onSearchFocus={this.onSearchFocus}\n                    onSearchBlur={this.onSearchBlur}\n                    onOptionRemove={this.onOptionRemove}\n                />\n                <Menu\n                    open={open}\n                    options={this.options}\n                    value={value}\n                    multi={multi}\n                    error={error}\n                    search={search}\n                    selectedIndex={selectedIndex}\n                    menuComponent={menuComponent}\n                    labelComponent={labelComponent}\n                    optionComponent={optionComponent}\n                    emptyText={emptyText}\n                    rowHeight={rowHeight}\n                    menuHeight={menuHeight}\n                    onSelect={this.onOptionSelect}\n                />\n            </Container>\n        );\n    }\n\n    private renderNativeSelect(): React.ReactNode {\n        const { NativeSelect } = Select;\n        const { native, placeholder, multi, disabled } = this.props;\n        const dataRole = this.props['data-role']\n            ? `select-${this.props['data-role']}`\n            : undefined;\n        const clearable = this.props.clearable && native;\n        const value = isArray(this.props.value)\n            ? this.props.value.map(this.findOptionIndex)\n            : this.findOptionIndex(this.props.value || '');\n\n        return (\n            <NativeSelect\n                ref={this.nativeSelect as any}\n                multiple={multi}\n                value={value}\n                disabled={disabled}\n                native={native}\n                tabIndex={-1}\n                data-role={dataRole}\n                onChange={this.onChangeNativeSelect}\n            >\n                <option value=\"\" disabled={!clearable}>\n                    {placeholder}\n                </option>\n                {this.options.map((option, i) => (\n                    <option\n                        key={toKey(option.value)}\n                        value={`${i}`}\n                        disabled={option.disabled}\n                    >\n                        {option.label}\n                    </option>\n                ))}\n            </NativeSelect>\n        );\n    }\n\n    private renderChildren(): React.ReactNode {\n        const { options, placeholder, multi, children } = this.props;\n        const { open, search } = this.state;\n        const valueOptions = getValueOptions(options || [], this.props.value);\n        const value: T | T[] | undefined = !multi\n            ? this.props.value\n            : valueOptions.map(option => option.value);\n        const showPlaceholder =\n            !search &&\n            (isArray(value)\n                ? value.length === 0\n                : value === undefined || value === null);\n\n        if (!children) {\n            return null;\n        }\n\n        return children({\n            options: this.options,\n            open,\n            value,\n            MenuContainer,\n            placeholder: showPlaceholder ? placeholder : undefined,\n            onToggle: () => this.toggleMenu(),\n            onRef: ref => (this.container = ref)\n        });\n    }\n\n    @bind\n    private toggleMenu(): void {\n        const open = !this.state.open;\n\n        if (open) {\n            this.openMenu();\n        } else {\n            this.closeMenu();\n        }\n    }\n\n    @debounce(0)\n    private openMenu(): void {\n        const selectedIndex = this.options.findIndex(option =>\n            equal(option.value, this.props.value)\n        );\n        const keepSearchOnBlur =\n            this.props.keepSearchOnBlur && !this.props.value;\n\n        this.setState(\n            {\n                open: true,\n                search: keepSearchOnBlur ? this.state.search : undefined,\n                selectedIndex\n            },\n            () => {\n                if (this.props.onOpen) {\n                    this.props.onOpen();\n                }\n\n                this.addDocumentListener();\n            }\n        );\n    }\n\n    @debounce(0)\n    private closeMenu(callback = () => {}): void {\n        const keepSearchOnBlur =\n            this.props.keepSearchOnBlur && !this.props.value;\n\n        this.removeDocumentListener();\n        this.setState(\n            {\n                open: false,\n                search: keepSearchOnBlur ? this.state.search : undefined,\n                selectedIndex: undefined\n            },\n            () => {\n                if (this.props.onClose) {\n                    this.props.onClose();\n                }\n\n                callback();\n            }\n        );\n    }\n\n    private createOption(value: string, cb?: () => void): void {\n        const { onCreate } = this.props;\n\n        if (onCreate) {\n            this.closeMenu(() => {\n                onCreate(value);\n\n                if (cb) {\n                    cb();\n                }\n            });\n        }\n    }\n\n    private addDocumentListener(): void {\n        this.removeDocumentListener();\n\n        if (this.document) {\n            this.document.addEventListener('click', this.onDocumentClick);\n        }\n    }\n\n    private removeDocumentListener(): void {\n        if (this.document) {\n            this.document.removeEventListener('click', this.onDocumentClick);\n        }\n    }\n\n    @bind\n    private cleanBlindText(): void {\n        this.blindTextTimeout = setTimeout(\n            () => this.setState({ blindText: '' }),\n            700\n        );\n    }\n\n    @bind\n    private findOptionIndex(val: any) {\n        let index = this.options.findIndex(option => option.value === val);\n\n        if (index === -1) {\n            if (typeof val === 'object') {\n                index = this.options.findIndex(option => {\n                    if (typeof option.value === 'object') {\n                        return (\n                            JSON.stringify(option.value) === JSON.stringify(val)\n                        );\n                    }\n\n                    return false;\n                });\n            }\n\n            if (index === -1) {\n                return '';\n            }\n        }\n\n        return String(index);\n    }\n\n    @bind\n    private onChangeNativeSelect(\n        e: React.SyntheticEvent<HTMLSelectElement>\n    ): void {\n        const { onChange, multi } = this.props;\n        const { currentTarget } = e;\n\n        if (onChange) {\n            if (currentTarget.value === '') {\n                this.onClear();\n            } else {\n                const values = Array.from(currentTarget.selectedOptions).map(\n                    htmlOption => this.options[htmlOption.index - 1].value\n                );\n\n                if (multi) {\n                    onChange(values as any);\n                } else {\n                    onChange(values[0] as any);\n                }\n            }\n        }\n    }\n\n    @bind\n    private onSearchFocus(): void {\n        const { open, focused } = this.state;\n\n        if (!open && !focused && !this.props.native) {\n            this.openMenu();\n        }\n\n        this.setState({ focused: true });\n    }\n\n    @bind\n    private onSearchBlur(): void {\n        this.setState({ focused: false });\n    }\n\n    @bind\n    private onOptionSelect(value: any | any[], option?: Option<T>): void {\n        const { current } = this.nativeSelect;\n        const { onChange, creatable } = this.props;\n        let optionWasCreated = false;\n\n        const selectOnNative = () => {\n            if (current) {\n                current.value = isArray(value)\n                    ? (value.map(this.findOptionIndex) as any)\n                    : this.findOptionIndex(value);\n            }\n\n            this.setState({ focused: true }, () =>\n                this.closeMenu(() => onChange && onChange(value, option))\n            );\n        };\n\n        if (creatable) {\n            const createValue = (val: any) => {\n                const option = this.options.find(\n                    option =>\n                        this.optionIsCreatable(option) && option.value === val\n                );\n\n                if (option) {\n                    optionWasCreated = true;\n                    this.createOption(option.value as any, selectOnNative);\n                }\n            };\n\n            if (isArray(value)) {\n                value.map(createValue);\n            } else {\n                createValue(value);\n            }\n        }\n\n        if (!optionWasCreated) {\n            selectOnNative();\n        }\n    }\n\n    @bind\n    private onOptionRemove(value: any): void {\n        if (isArray(this.props.value)) {\n            const values = this.props.value.filter(val => !equal(val, value));\n\n            this.onOptionSelect(values);\n        }\n    }\n\n    @bind\n    private onClear(): void {\n        this.onOptionSelect(this.props.multi ? [] : undefined);\n    }\n\n    @bind\n    private onSearch(search: string): void {\n        this.setState({ search }, () => {\n            if (this.options.length === 1 || (this.props.creatable && search)) {\n                this.setState({ selectedIndex: 0 });\n            } else {\n                this.setState({ selectedIndex: undefined });\n            }\n\n            if (this.props.onSearch) {\n                this.props.onSearch(search);\n            }\n        });\n    }\n\n    @bind\n    private onDocumentClick(e): void {\n        const { target } = e;\n\n        if (target.closest('.react-slct-menu')) {\n            return;\n        }\n\n        if (this.container && !this.container.contains(target)) {\n            this.closeMenu();\n        }\n    }\n\n    @bind\n    private onKeyDown({ keyCode }: React.KeyboardEvent): void {\n        const { searchable, creatable } = this.props;\n\n        switch (keyCode) {\n            case keys.TAB:\n                if (this.state.open) {\n                    this.closeMenu();\n                }\n                break;\n        }\n\n        if (!searchable && !creatable) {\n            this.handleBlindText(keyCode);\n        }\n    }\n\n    @bind\n    private onKeyUp({ keyCode }: React.KeyboardEvent): void {\n        const { search, open } = this.state;\n        const { value } = this.props;\n        let selectedIndex = this.state.selectedIndex;\n\n        switch (keyCode) {\n            case keys.ARROW_UP:\n                if (open) {\n                    if (selectedIndex !== undefined) {\n                        selectedIndex = selectedIndex - 1;\n\n                        if (selectedIndex < 0) {\n                            selectedIndex = this.options.length - 1;\n                        }\n                    }\n\n                    this.setState({ selectedIndex });\n                } else {\n                    this.openMenu();\n                }\n                break;\n            case keys.ARROW_DOWN:\n                if (open) {\n                    if (\n                        selectedIndex === undefined ||\n                        selectedIndex === this.options.length - 1\n                    ) {\n                        selectedIndex = 0;\n                    } else {\n                        selectedIndex = selectedIndex + 1;\n                    }\n\n                    this.setState({ selectedIndex });\n                } else {\n                    this.openMenu();\n                }\n                break;\n            case keys.ENTER:\n                if (\n                    this.state.selectedIndex === 0 &&\n                    this.optionIsCreatable(this.options[0])\n                ) {\n                    this.createOption(search!);\n                } else if (\n                    selectedIndex !== undefined &&\n                    this.options[selectedIndex]\n                ) {\n                    const newValue = this.options[selectedIndex].value;\n\n                    this.onOptionSelect(\n                        isArray(value) ? [...value, newValue] : newValue\n                    );\n                }\n                break;\n            case keys.ESC:\n                if (open) {\n                    this.closeMenu();\n                }\n                break;\n        }\n    }\n\n    private handleBlindText(keyCode: number): void {\n        const { blindText } = this.state;\n\n        if (keyCode === keys.BACKSPACE && blindText.length) {\n            clearTimeout(this.blindTextTimeout);\n\n            this.setState(\n                {\n                    blindText: blindText.slice(0, blindText.length - 1)\n                },\n                this.cleanBlindText\n            );\n        } else if (keyCode === keys.SPACE) {\n            clearTimeout(this.blindTextTimeout);\n\n            this.setState(\n                {\n                    blindText: blindText + ' '\n                },\n                this.cleanBlindText\n            );\n        } else {\n            const key = String.fromCodePoint(keyCode);\n\n            if (/\\w/.test(key)) {\n                clearTimeout(this.blindTextTimeout);\n\n                this.setState(\n                    {\n                        blindText: blindText + key\n                    },\n                    this.cleanBlindText\n                );\n            }\n        }\n    }\n\n    @bind\n    private onContainerRef(el: HTMLDivElement | null): void {\n        this.container = el;\n    }\n\n    private handleBlindTextUpdate(): void {\n        const { open, blindText } = this.state;\n        const { multi } = this.props;\n\n        if (open) {\n            const selectedIndex = this.options.findIndex(option =>\n                option.label.toLowerCase().startsWith(blindText.toLowerCase())\n            );\n\n            if (selectedIndex >= 0) {\n                this.setState({ selectedIndex });\n            }\n        } else if (!multi) {\n            if (blindText) {\n                const option = this.options.find(option =>\n                    option.label\n                        .toLowerCase()\n                        .startsWith(blindText.toLowerCase())\n                );\n\n                if (option) {\n                    this.onOptionSelect(option.value);\n                }\n            } else {\n                this.onOptionSelect(undefined);\n            }\n        }\n    }\n}\n","import { bind } from 'lodash-decorators';\nimport * as React from 'react';\nimport styled from 'styled-components';\nimport { SelectLabel } from './label';\nimport { keys, getValueOptions, getWindow, toKey } from './utils';\nimport { SelectProps, Option } from './typings';\nimport { ValueComponentMulti } from './value-component-multi';\nimport { ValueComponentSingle } from './value-component-single';\n\nexport interface ValueProps {\n    options: SelectProps['options'];\n    value: SelectProps['value'];\n    placeholder: SelectProps['placeholder'];\n    clearable: SelectProps['clearable'];\n    searchable: SelectProps['searchable'];\n    labelComponent: SelectProps['labelComponent'];\n    valueComponentSingle: SelectProps['valueComponentSingle'];\n    valueComponentMulti: SelectProps['valueComponentMulti'];\n    arrowComponent: SelectProps['arrowComponent'];\n    clearComponent: SelectProps['clearComponent'];\n    multi: SelectProps['multi'];\n    mobile: SelectProps['native'];\n    disabled: SelectProps['disabled'];\n    error: SelectProps['error'];\n    search?: string;\n    keepSearchOnBlur?: boolean;\n    open: boolean;\n    focused?: boolean;\n    onClear(): void;\n    onClick(): void;\n    onSearch(search: string): void;\n    onSearchFocus(): void;\n    onSearchBlur(): void;\n    onOptionRemove(value: any): void;\n}\n\ninterface SearchProps {\n    canSearch?: boolean;\n}\n\ninterface ValueContainerProps {\n    mobile?: boolean;\n    disabled?: boolean;\n    focused?: boolean;\n    error?: boolean;\n}\n\ninterface ValueLeftProps {\n    multi?: boolean;\n    hasValue?: boolean;\n}\n\nconst Button = styled.button`\n    background: transparent;\n    border: none;\n    margin: 0;\n    font-size: 20px;\n    padding: 0;\n    line-height: 1;\n    cursor: pointer;\n\n    &:focus {\n        outline: none;\n    }\n`;\n\nconst ArrowButton = styled(Button)`\n    font-size: 12px;\n    color: #ccc;\n    transform: translateY(2px);\n\n    &:hover {\n        color: #333;\n    }\n`;\n\nconst ValueContainer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    flex: 1;\n    min-height: 32px;\n    pointer-events: ${(props: ValueContainerProps) =>\n        props.mobile || props.disabled ? 'none' : 'auto'};\n    padding: 5px 10px;\n    background: #fff;\n    cursor: default;\n    border-width: 1px;\n    border-style: solid;\n    border-color: ${(props: ValueContainerProps) =>\n        props.error ? 'var(--react-slct-error-color)' : '#ccc'};\n    z-index: 0;\n    box-sizing: border-box;\n    max-width: 100%;\n    box-shadow: ${(props: ValueContainerProps) =>\n        props.focused ? 'rgba(0, 0, 0, 0.15) 0 0 2px' : 'none'};\n`;\n\nconst ValueLeft = styled.div`\n    display: flex;\n    flex: 1;\n    align-items: center;\n    flex-wrap: ${(props: ValueLeftProps) =>\n        props.multi && props.hasValue ? 'wrap' : 'nowrap'};\n    user-select: none;\n    min-width: 0;\n    box-sizing: border-box;\n    margin: ${(props: ValueLeftProps) =>\n        props.multi && props.hasValue ? '-2px -5px' : 0};\n`;\n\nconst ValueRight = styled.div`\n    display: flex;\n    align-items: center;\n    margin-left: 4px;\n    box-sizing: border-box;\n`;\n\nconst Placeholder = styled(SelectLabel)`\n    color: #aaa;\n`;\n\nconst ClearButton = styled(Button)`\n    margin-right: 6px;\n`;\n\nconst ClearContainer = styled.span`\n    color: #ccc;\n\n    &:hover {\n        color: #333;\n    }\n`;\n\nconst ClearX = () => <ClearContainer>×</ClearContainer>;\n\nconst Search = styled.span`\n    min-width: 1px;\n    margin-left: -1px;\n    height: 16px;\n    opacity: ${(props: SearchProps) => (props.canSearch ? 1 : 0)};\n    user-select: text;\n    position: ${(props: SearchProps) =>\n        props.canSearch ? 'static' : 'absolute'};\n\n    &:focus {\n        outline: none;\n    }\n`;\n\nexport class Value extends React.PureComponent<ValueProps> {\n    search: React.RefObject<HTMLSpanElement>;\n\n    constructor(props: ValueProps) {\n        super(props);\n\n        this.search = React.createRef();\n\n        const window = getWindow();\n\n        if (window) {\n            window.addEventListener('blur', this.blur);\n        }\n    }\n\n    public componentDidUpdate(prevProps: ValueProps): void {\n        if (prevProps.search && !this.props.search && this.search.current) {\n            this.search.current.innerText = '';\n        }\n\n        if (prevProps.focused !== this.props.focused && this.props.focused) {\n            this.focus();\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            options = [],\n            value,\n            disabled,\n            clearable,\n            open,\n            mobile,\n            multi,\n            focused,\n            error\n        } = this.props;\n        const ArrowComponent = this.props.arrowComponent;\n        const ClearComponent = this.props.clearComponent || ClearX;\n        const valueOptions = getValueOptions(options, value);\n        const showClearer = Boolean(\n            clearable && valueOptions.length && !mobile\n        );\n        const searchAtStart = !multi || valueOptions.length === 0;\n        const searchAtEnd = multi && valueOptions.length > 0;\n\n        return (\n            <ValueContainer\n                data-role=\"value\"\n                className=\"react-slct-value\"\n                disabled={disabled}\n                mobile={mobile}\n                focused={focused}\n                error={error}\n                onClick={this.onClick}\n            >\n                <ValueLeft\n                    className=\"value-left\"\n                    multi={multi}\n                    hasValue={!!valueOptions.length}\n                >\n                    {searchAtStart && this.renderSearch()}\n                    {this.renderValues(valueOptions)}\n                    {searchAtEnd && this.renderSearch()}\n                </ValueLeft>\n                <ValueRight className=\"value-right\">\n                    {showClearer && (\n                        <ClearButton\n                            type=\"button\"\n                            tabIndex={-1}\n                            className=\"clearer\"\n                            onClick={this.onClear}\n                        >\n                            <ClearComponent />\n                        </ClearButton>\n                    )}\n                    <ArrowButton type=\"button\" className=\"arrow\" tabIndex={-1}>\n                        {ArrowComponent ? (\n                            <ArrowComponent open={open} />\n                        ) : open ? (\n                            '▲'\n                        ) : (\n                            '▼'\n                        )}\n                    </ArrowButton>\n                </ValueRight>\n            </ValueContainer>\n        );\n    }\n\n    private renderSearch(): React.ReactNode {\n        const {\n            open,\n            value,\n            disabled,\n            searchable,\n            keepSearchOnBlur,\n            onSearchFocus,\n            onSearchBlur\n        } = this.props;\n        const canSearch =\n            (open && searchable) || (keepSearchOnBlur && !value && searchable);\n\n        if (disabled && !keepSearchOnBlur) {\n            return null;\n        }\n\n        return (\n            <Search\n                className=\"search\"\n                contentEditable\n                canSearch={canSearch}\n                onInput={this.onSearch}\n                onKeyDown={this.onKeyDown}\n                onFocus={onSearchFocus}\n                onBlur={onSearchBlur}\n                ref={this.search as any}\n            />\n        );\n    }\n\n    private renderValues(valueOptions: Option[]): React.ReactNode {\n        const {\n            placeholder,\n            search,\n            labelComponent,\n            valueComponentSingle,\n            valueComponentMulti,\n            multi\n        } = this.props;\n\n        if (search && !multi) {\n            return null;\n        }\n\n        if (valueOptions.length === 0 && !search) {\n            return <Placeholder>{placeholder}</Placeholder>;\n        }\n\n        const Single = valueComponentSingle || ValueComponentSingle;\n        const Multi = (valueComponentMulti || ValueComponentMulti) as any;\n\n        return valueOptions.map(option =>\n            multi ? (\n                <Multi\n                    key={toKey(option.value)}\n                    option={option}\n                    labelComponent={labelComponent}\n                    options={valueOptions}\n                    onRemove={this.props.onOptionRemove}\n                />\n            ) : (\n                <Single\n                    key={toKey(option.value)}\n                    option={option}\n                    labelComponent={labelComponent}\n                />\n            )\n        );\n    }\n\n    private focus(): void {\n        const el = this.search.current;\n\n        if (el) {\n            el.focus();\n\n            if (\n                typeof window.getSelection != 'undefined' &&\n                typeof document.createRange != 'undefined'\n            ) {\n                const range = document.createRange();\n                const sel = window.getSelection();\n\n                range.selectNodeContents(el);\n                range.collapse(false);\n\n                if (sel) {\n                    sel.removeAllRanges();\n                    sel.addRange(range);\n                }\n            }\n        }\n    }\n\n    @bind\n    private blur(): void {\n        if (this.search.current) {\n            this.search.current.blur();\n        }\n    }\n\n    @bind\n    private onClick(): void {\n        if (!this.props.disabled) {\n            this.focus();\n            this.props.onClick();\n        }\n    }\n\n    @bind\n    private onClear(e: React.SyntheticEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    @bind\n    private onSearch(e: React.KeyboardEvent<HTMLSpanElement>) {\n        if (this.props.searchable) {\n            this.props.onSearch(e.currentTarget.innerText.trim());\n        } else {\n            e.preventDefault();\n        }\n    }\n\n    @bind\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>) {\n        const { searchable } = this.props;\n\n        if (e.metaKey) {\n            return;\n        }\n\n        if (\n            (!searchable && e.keyCode !== keys.TAB) ||\n            e.keyCode === keys.ENTER ||\n            e.keyCode === keys.ARROW_UP ||\n            e.keyCode === keys.ARROW_DOWN\n        ) {\n            e.preventDefault();\n        }\n    }\n}\n","// @ts-ignore\nimport * as React from 'react';\nimport styled from 'styled-components';\n\nexport const SelectLabel = styled.span`\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    user-select: none;\n    box-sizing: border-box;\n`;\n","import { Option } from '.';\n\nexport function toKey(value: any): string | number {\n    if (typeof value === 'string') {\n        return value;\n    }\n\n    if (typeof value === 'object') {\n        if (value.id) {\n            return value.id;\n        }\n\n        if (value.toJSON) {\n            return value.toJSON();\n        }\n    }\n\n    return JSON.stringify(value);\n}\n\nexport function equal(valueA: any, valueB: any) {\n    if (valueA === valueB) {\n        return true;\n    }\n\n    if (!valueA || !valueB) {\n        return false;\n    }\n\n    if (typeof valueA === 'object' && typeof valueB === 'object') {\n        if (\n            valueA.id !== undefined &&\n            valueA.id !== null &&\n            valueB.id !== undefined &&\n            valueB.id !== null &&\n            valueA.id === valueB.id\n        ) {\n            return true;\n        }\n\n        if (valueA.toJSON && valueB.toJSON) {\n            return valueA.toJSON() === valueB.toJSON();\n        }\n\n        return JSON.stringify(valueA) === JSON.stringify(valueB);\n    }\n\n    return false;\n}\n\nexport function getValueOptions(options: Option[], value: any) {\n    return options.filter(option => {\n        if (isArray(value)) {\n            return value.some(val => equal(option.value, val));\n        } else {\n            return equal(option.value, value);\n        }\n    });\n}\n\nexport function isArray<T = any>(val: any): val is Array<T> {\n    if (Array.isArray(val)) {\n        return true;\n    }\n\n    // this is just a workaround for potential observable arrays\n    if (val && val.map) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getDocument(): Document | undefined {\n    if (typeof document !== 'undefined') {\n        return document;\n    }\n\n    return undefined;\n}\n\nexport function getWindow(): Window | undefined {\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n\n    return undefined;\n}\n\nexport function getWindowInnerHeight(defaultHeight = 700): number {\n    const window = getWindow();\n\n    if (window) {\n        return window.innerHeight;\n    }\n\n    return defaultHeight;\n}\n\nexport const keys = {\n    ARROW_UP: 38,\n    ARROW_DOWN: 40,\n    ENTER: 13,\n    TAB: 9,\n    ESC: 27,\n    BACKSPACE: 8,\n    SPACE: 32\n};\n","import { bind } from 'lodash-decorators';\nimport * as React from 'react';\nimport styled from 'styled-components';\nimport { ValueComponentMultiProps } from './typings';\nimport { SelectLabel } from './label';\n\ninterface RemoveProps<T = any> {\n    value: T;\n    onClick(value: T): void;\n}\n\nclass Remove extends React.PureComponent<RemoveProps> {\n    private static StyledRemove = styled.button`\n        cursor: pointer;\n        color: #007eff;\n        border: none;\n        background: none;\n        padding: 2px 4px;\n        margin: 0;\n        margin-right: 4px;\n        line-height: 1;\n        display: inline-block;\n        border-right: 1px solid rgba(0, 126, 255, 0.24);\n        margin-left: -2px;\n        font-size: 13px;\n\n        &:hover {\n            background-color: rgba(0, 113, 230, 0.08);\n        }\n\n        &:focus {\n            outline: none;\n        }\n    `;\n\n    public render(): React.ReactNode {\n        const { StyledRemove } = Remove;\n\n        return (\n            <StyledRemove\n                className=\"remove\"\n                type=\"button\"\n                tabIndex={-1}\n                onClick={this.onClick}\n            >\n                ×\n            </StyledRemove>\n        );\n    }\n\n    @bind\n    private onClick(e: React.SyntheticEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClick(this.props.value);\n    }\n}\n\nexport class ValueComponentMulti<T = any> extends React.PureComponent<\n    ValueComponentMultiProps<T>\n> {\n    private static TagContainer = styled.div`\n        display: flex;\n        padding: 0px 3px;\n        background-color: rgba(0, 126, 255, 0.08);\n        border-radius: 2px;\n        border: 1px solid rgba(0, 126, 255, 0.24);\n        color: #007eff;\n        font-size: 0.9em;\n        line-height: 1.4;\n        margin: 2px 3px;\n        align-items: center;\n\n        &:last-of-type {\n            margin-right: 5px;\n        }\n    `;\n\n    public render(): React.ReactNode {\n        const { TagContainer } = ValueComponentMulti;\n        const { option, labelComponent, onRemove } = this.props;\n        const Label = (labelComponent || SelectLabel) as any;\n\n        return (\n            <TagContainer className=\"value-multi\" {...option}>\n                <Remove value={option.value} onClick={onRemove}>\n                    ×\n                </Remove>\n                <Label type=\"value-multi\" active {...option}>\n                    {option.label}\n                </Label>\n            </TagContainer>\n        );\n    }\n}\n","import * as React from 'react';\nimport { SelectLabel } from './label';\nimport { ValueComponentSingleProps } from './typings';\n\nexport const ValueComponentSingle = React.memo(\n    (props: ValueComponentSingleProps) => {\n        const Label = props.labelComponent || (SelectLabel as any);\n\n        return (\n            <Label\n                active\n                type=\"value-single\"\n                className=\"value-single\"\n                {...props.option}\n            >\n                {props.option.label}\n            </Label>\n        );\n    }\n);\n","import { bind } from 'lodash-decorators';\nimport * as React from 'react';\nimport { createPortal } from 'react-dom';\nimport { List } from 'react-virtualized/dist/commonjs/List';\nimport styled from 'styled-components';\nimport { SelectLabel } from './label';\nimport {\n    isArray,\n    getWindowInnerHeight,\n    getWindow,\n    getDocument,\n    equal\n} from './utils';\nimport {\n    Rect,\n    MenuComponentProps,\n    Option,\n    MenuContainerProps\n} from './typings';\nimport { OptionComponent } from './option';\n\ninterface MenuComponentState {\n    rect?: Rect;\n}\n\nfunction menuPosition(props: MenuContainerProps): 'top' | 'bottom' {\n    if (\n        !props.rect ||\n        props.rect.top + props.rect.height + (props.menuHeight || 185) <=\n            getWindowInnerHeight()\n    ) {\n        return 'bottom';\n    }\n\n    return 'top';\n}\n\nfunction getContainerTop(props: MenuContainerProps): string {\n    if (!props.rect) {\n        return '0px';\n    }\n\n    switch (menuPosition(props)) {\n        case 'top':\n            return `${props.rect.top - (props.menuHeight || 186)}px`;\n        case 'bottom':\n            return `${props.rect.top + props.rect.height - 1}px`;\n    }\n}\n``;\n\nexport class Menu extends React.PureComponent<\n    MenuComponentProps,\n    MenuComponentState\n> {\n    public static MenuContainer = styled.div.attrs(\n        (props: MenuContainerProps) => ({\n            style: {\n                top: getContainerTop(props),\n                left: `${props.rect ? props.rect.left : 0}px`,\n                width: `${\n                    props.rect ? props.menuWidth || props.rect.width : 0\n                }px`\n            }\n        })\n    )`\n        position: fixed;\n        z-index: 9999;\n        background: #fff;\n        box-sizing: border-box;\n        box-shadow: ${(props: MenuContainerProps) =>\n            menuPosition(props) === 'bottom'\n                ? '0 2px 5px rgba(0, 0, 0, 0.1)'\n                : '0 -2px 5px rgba(0, 0, 0, 0.1)'};\n\n        .ReactVirtualized__List {\n            border-width: 1px;\n            border-style: solid;\n            border-color: ${(props: MenuContainerProps) =>\n                props.error ? 'var(--react-slct-error-color)' : '#ccc'};\n            background-color: #fff;\n\n            &:focus {\n                outline: none;\n            }\n        }\n    `;\n\n    private static EmptyOptionItem = styled(OptionComponent.OptionItem)`\n        height: 100%;\n    `;\n\n    private static Empty = (props: { emptyText?: string }) => (\n        <Menu.EmptyOptionItem>\n            <SelectLabel>\n                <i>{props.emptyText || 'No results'}</i>\n            </SelectLabel>\n        </Menu.EmptyOptionItem>\n    );\n\n    private list: React.RefObject<List>;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n        this.list = React.createRef();\n    }\n\n    public componentDidUpdate(prevProps: MenuComponentProps): void {\n        const { search, emptyText, options } = this.props;\n        const { current: list } = this.list;\n\n        if (list) {\n            if (\n                search !== prevProps.search ||\n                emptyText !== prevProps.emptyText ||\n                options !== prevProps.options\n            ) {\n                list.forceUpdateGrid();\n            }\n        }\n    }\n\n    public render(): React.ReactNode {\n        const { open, options = [], selectedIndex, error } = this.props;\n        const { rect } = this.state;\n        const MenuContent = this.props.menuComponent;\n        const rowHeight = this.props.rowHeight || 32;\n        const menuHeight = this.props.menuHeight || 185;\n        const height = Math.min(\n            Math.max(options.length * rowHeight, rowHeight),\n            menuHeight\n        );\n\n        return open ? (\n            <MenuContainer\n                error={error}\n                menuHeight={height}\n                onRect={this.onRect}\n            >\n                {MenuContent ? (\n                    <MenuContent {...this.props} />\n                ) : (\n                    <List\n                        className=\"react-slct-menu-list\"\n                        ref={this.list}\n                        width={rect ? rect.width : 0}\n                        height={height}\n                        rowHeight={rowHeight}\n                        rowCount={options.length}\n                        rowRenderer={this.rowRenderer}\n                        scrollToIndex={selectedIndex}\n                        noRowsRenderer={this.emptyRenderer}\n                    />\n                )}\n            </MenuContainer>\n        ) : null;\n    }\n\n    @bind\n    private rowRenderer({ key, index, style }) {\n        const {\n            options = [],\n            labelComponent,\n            selectedIndex,\n            optionComponent,\n            rowHeight,\n            search\n        } = this.props;\n        const option = options[index];\n        const currentValue = isArray(this.props.value)\n            ? this.props.value\n            : [this.props.value];\n        const Component = optionComponent || OptionComponent;\n\n        return (\n            <div key={key} style={style}>\n                <Component\n                    option={option}\n                    labelComponent={labelComponent}\n                    height={rowHeight}\n                    active={currentValue.some(val => equal(val, option.value))}\n                    selected={selectedIndex === index}\n                    search={search}\n                    onSelect={this.onSelect}\n                />\n            </div>\n        );\n    }\n\n    @bind\n    private emptyRenderer() {\n        const { Empty } = Menu;\n\n        return <Empty emptyText={this.props.emptyText} />;\n    }\n\n    @bind\n    private onSelect(value: any, option: Option): void {\n        if (isArray(this.props.value)) {\n            const found = this.props.value.some(item => equal(item, value));\n\n            let values;\n\n            if (found) {\n                values = this.props.value.filter(item => !equal(item, value));\n            } else {\n                values = Array.from(new Set([...this.props.value, value]));\n            }\n\n            this.props.onSelect(values, option);\n        } else {\n            this.props.onSelect(value, option);\n        }\n    }\n\n    @bind\n    private onRect(rect?: Rect): void {\n        this.setState({ rect });\n    }\n}\n\nexport interface MenuContainerState {\n    rect?: Rect;\n}\n\nconst MenuWrapper = styled.div`\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    left: 0;\n    top: 0;\n    pointer-events: none;\n`;\n\nexport class MenuContainer extends React.PureComponent<\n    MenuContainerProps,\n    MenuContainerState\n> {\n    private el?: HTMLDivElement | null;\n\n    private get rect(): Rect | undefined {\n        if (this.el) {\n            const clientRect = this.el.getBoundingClientRect();\n\n            return {\n                left: Math.round(clientRect.left),\n                top: Math.round(clientRect.top),\n                width: Math.round(clientRect.width),\n                height: Math.round(clientRect.height)\n            };\n        }\n\n        return undefined;\n    }\n\n    private get window() {\n        return getWindow();\n    }\n\n    private get document() {\n        return getDocument();\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n    }\n\n    public componentDidMount(): void {\n        this.addListener();\n    }\n\n    public componentDidUpdate(_, prevState: MenuContainerState): void {\n        if (prevState.rect !== this.state.rect && this.props.onRect) {\n            this.props.onRect(this.state.rect);\n        }\n    }\n\n    public componentWillUnmount(): void {\n        this.removeListener();\n    }\n\n    public render(): React.ReactNode {\n        const {\n            menuWidth,\n            menuHeight,\n            error,\n            onRef,\n            onClick,\n            children\n        } = this.props;\n        const className = ['react-slct-menu', this.props.className]\n            .filter(c => c)\n            .join(' ');\n\n        return (\n            <MenuWrapper ref={this.onEl}>\n                {this.document\n                    ? createPortal(\n                          <Menu.MenuContainer\n                              data-role=\"menu\"\n                              className={className}\n                              error={error}\n                              rect={this.state.rect}\n                              menuWidth={menuWidth}\n                              menuHeight={menuHeight}\n                              ref={onRef}\n                              onClick={onClick}\n                          >\n                              {children}\n                          </Menu.MenuContainer>,\n                          this.document.body\n                      )\n                    : null}\n            </MenuWrapper>\n        );\n    }\n\n    private addListener(): void {\n        if (this.window) {\n            this.window.addEventListener('scroll', this.onViewportChange, true);\n            this.window.addEventListener('resize', this.onViewportChange, true);\n        }\n    }\n\n    private removeListener(): void {\n        if (this.window) {\n            this.window.removeEventListener(\n                'resize',\n                this.onViewportChange,\n                true\n            );\n            this.window.removeEventListener(\n                'scroll',\n                this.onViewportChange,\n                true\n            );\n        }\n    }\n\n    private allowRectChange(e): boolean {\n        if (e.target.closest && !e.target.closest('.react-slct-menu')) {\n            return false;\n        }\n\n        return true;\n    }\n\n    @bind\n    private onViewportChange(e): void {\n        if (this.allowRectChange(e)) {\n            this.setState({ rect: this.rect });\n        }\n    }\n\n    @bind\n    private onEl(el: HTMLDivElement | null): void {\n        this.el = el;\n\n        this.setState({\n            rect: this.rect\n        });\n    }\n}\n","import { bind } from 'lodash-decorators';\nimport * as React from 'react';\nimport styled from 'styled-components';\nimport { SelectLabel } from './label';\nimport { OptionComponentProps } from './typings';\n\ninterface OptionItemProps {\n    active?: OptionComponentProps['active'];\n    selected?: OptionComponentProps['selected'];\n    height?: OptionComponentProps['height'];\n}\n\nexport class OptionComponent extends React.PureComponent<OptionComponentProps> {\n    public static OptionItem = styled.div`\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        flex: 1;\n        height: ${(props: OptionItemProps) => props.height || 32}px;\n        padding: 0 10px;\n        min-width: 0;\n        cursor: pointer;\n        box-sizing: border-box;\n        background-color: ${(props: OptionItemProps) =>\n            props.active ? '#ddd' : props.selected ? '#eee' : '#fff'};\n\n        &:hover {\n            background-color: ${(props: OptionItemProps) =>\n                props.active ? '#ddd' : '#eee'};\n        }\n    `;\n\n    public render(): React.ReactNode {\n        const { OptionItem } = OptionComponent;\n        const { active, selected, labelComponent, option, height } = this.props;\n        const Label = (labelComponent ? labelComponent : SelectLabel) as any;\n        const className = [\n            'option',\n            selected ? 'selected' : null,\n            active ? 'active' : null\n        ].filter(v => Boolean(v));\n\n        return (\n            <OptionItem\n                className={className.join(' ')}\n                selected={selected}\n                active={active}\n                height={height}\n                onClick={this.onClick}\n            >\n                <Label type=\"option\" active={active} {...option}>\n                    {option.label}\n                </Label>\n            </OptionItem>\n        );\n    }\n\n    @bind\n    private onClick(): void {\n        this.props.onSelect(this.props.option.value, this.props.option);\n    }\n}\n","import * as React from 'react';\nimport { render } from 'react-dom';\nimport { createGlobalStyle } from 'styled-components';\n\nconst id = 'react-slct-style';\n\nfunction create() {\n    const ReactSlctStyle = createGlobalStyle`\n        .react-slct, .react-slct-menu {\n            --react-slct-error-color: #ff5c5c; \n        }\n    `;\n    const reactSlctDiv = document.createElement('div');\n\n    reactSlctDiv.id = id;\n    document.body.appendChild(reactSlctDiv);\n\n    render(<ReactSlctStyle />, reactSlctDiv);\n}\n\nif (!document.getElementById(id)) {\n    create();\n}\n"]}