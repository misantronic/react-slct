{"version":3,"sources":["src/index.tsx"],"names":["lodash_decorators_1","$fsx","r","React","styled_components_1","value_1","menu_1","exports","Menu","menu_container_1","utils_1","keys","typings_1","SelectProps","MenuComponentProps","LabelComponentProps","Option","option_1","OptionComponent","value_component_single_1","ValueComponentSingle","value_component_multi_1","ValueComponentMulti","typings_2","OptionComponentProps","ValueComponentSingleProps","ValueComponentMultiProps","Select","PureComponent","[object Object]","props","super","this","container","nativeSelect","createRef","state","open","blindText","options","search","creatable","onCreateText","showCreate","some","option","value","label","filter","toLowerCase","includes","document","getDocument","Boolean","onCreate","_","prevState","handleBlindTextUpdate","removeDocumentListener","Container","className","clearable","placeholder","disabled","error","menuComponent","labelComponent","optionComponent","valueComponentSingle","valueComponentMulti","arrowComponent","clearComponent","hideSelectedOptions","equalCompareProp","multi","native","emptyText","rowHeight","menuWidth","menuHeight","keepSearchOnBlur","selectedIndex","focused","searchable","children","renderChildren","classNames","c","createElement","join","ref","onContainerRef","data-role","onKeyUp","onKeyDown","renderNativeSelect","Value","mobile","onClear","onClick","toggleMenu","onSearch","onSearchFocus","onSearchBlur","onOptionRemove","onSelect","onOptionSelect","NativeSelect","dataRole","undefined","isArray","map","findOptionIndex","multiple","tabIndex","onChange","onChangeNativeSelect","i","key","toKey","valueOptions","getValueOptions","showPlaceholder","length","MenuContainer","onToggle","onClose","closeMenu","onOpen","openMenu","onRef","findIndex","equal","setState","addDocumentListener","callback","cb","addEventListener","onDocumentClick","removeEventListener","blindTextTimeout","setTimeout","val","index","String","e","currentTarget","values","Array","from","selectedOptions","htmlOption","current","optionWasCreated","selectOnNative","createValue","find","optionIsCreatable","createOption","target","closest","contains","keyCode","TAB","handleBlindText","ARROW_UP","ARROW_DOWN","ENTER","newValue","ESC","BACKSPACE","clearTimeout","slice","cleanBlindText","SPACE","fromCodePoint","test","el","startsWith","default","div","select","css","tslib_1","__decorate","bind","debounce","SyntheticEvent","_a","Object","_b","KeyboardEvent","_c","_d"],"mappings":"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","sourcesContent":["import { bind, debounce } from 'lodash-decorators';\nimport * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Value } from './value';\nimport { Menu } from './menu';\nimport { MenuContainer } from './menu-container';\nimport {\n    isArray,\n    keys,\n    getDocument,\n    getValueOptions,\n    equal,\n    toKey\n} from './utils';\nimport {\n    SelectProps,\n    SelectState,\n    MenuComponentProps,\n    LabelComponentProps,\n    Option\n} from './typings';\nimport './global-stylings';\n\nexport {\n    SelectProps,\n    Menu,\n    MenuComponentProps,\n    LabelComponentProps,\n    Option,\n    keys\n};\nexport { OptionComponent } from './option';\nexport { ValueComponentSingle } from './value-component-single';\nexport { ValueComponentMulti } from './value-component-multi';\nexport {\n    OptionComponentProps,\n    ValueComponentSingleProps,\n    ValueComponentMultiProps\n} from './typings';\n\nexport class Select<T = any> extends React.PureComponent<\n    SelectProps<T>,\n    SelectState\n> {\n    private static Container = styled.div`\n        display: flex;\n        position: relative;\n        cursor: default;\n        width: 100%;\n        box-sizing: border-box;\n        pointer-events: ${(props: { disabled?: boolean }) =>\n            props.disabled ? 'none' : 'auto'};\n        opacity: ${(props: { disabled?: boolean }) =>\n            props.disabled ? 0.75 : 1};\n        user-select: none;\n    `;\n\n    private static NativeSelect = styled.select`\n        display: block;\n        opacity: 0;\n        position: absolute;\n        right: 0;\n        top: 0;\n        width: 100%;\n        height: 100%;\n        ${(props: { native?: boolean }) =>\n            props.native\n                ? css`\n                      z-index: 1;\n                  `\n                : css`\n                      pointer-events: none;\n                      z-index: auto;\n                  `};\n    `;\n\n    private nativeSelect: React.RefObject<HTMLSelectElement>;\n    private container: HTMLDivElement | null = null;\n    private blindTextTimeout!: number;\n\n    constructor(props: SelectProps) {\n        super(props);\n\n        this.nativeSelect = React.createRef();\n\n        this.state = {\n            open: false,\n            blindText: ''\n        };\n    }\n\n    private get options(): Option<T>[] {\n        const { search } = this.state;\n        const { creatable, onCreateText } = this.props;\n        let options = this.props.options || [];\n        const showCreate =\n            creatable &&\n            !options.some(option => {\n                const { value, label } = option;\n\n                // @ts-ignore\n                return value === search || label === search;\n            });\n\n        if (search) {\n            options = options.filter(option =>\n                option.label.toLowerCase().includes(search.toLowerCase())\n            );\n        }\n\n        if (showCreate && search) {\n            options = [\n                {\n                    label: onCreateText\n                        ? onCreateText(search)\n                        : `Create \"${search}\"`,\n                    value: search as any,\n                    creatable: true\n                },\n                ...options\n            ];\n        }\n\n        return options;\n    }\n\n    private get document() {\n        return getDocument();\n    }\n\n    private optionIsCreatable(option: Option<T>): boolean {\n        return (\n            this.props.creatable &&\n            option.creatable &&\n            Boolean(this.props.onCreate && this.state.search)\n        );\n    }\n\n    public componentDidUpdate(_, prevState: SelectState): void {\n        if (\n            this.state.blindText &&\n            prevState.blindText !== this.state.blindText\n        ) {\n            this.handleBlindTextUpdate();\n        }\n    }\n\n    public componentWillUnmount(): void {\n        this.removeDocumentListener();\n    }\n\n    public render(): React.ReactNode {\n        const { Container } = Select;\n        const {\n            className,\n            options,\n            creatable,\n            clearable,\n            placeholder,\n            value,\n            disabled,\n            error,\n            menuComponent,\n            labelComponent,\n            optionComponent,\n            valueComponentSingle,\n            valueComponentMulti,\n            arrowComponent,\n            clearComponent,\n            hideSelectedOptions,\n            equalCompareProp,\n            multi,\n            native,\n            emptyText,\n            rowHeight,\n            menuWidth,\n            menuHeight,\n            keepSearchOnBlur\n        } = this.props;\n        const { open, search, selectedIndex, focused } = this.state;\n        const searchable = this.props.searchable || creatable;\n\n        if (this.props.children) {\n            return this.renderChildren();\n        }\n\n        const classNames = [\n            'react-slct',\n            className,\n            open && 'open',\n            error && 'has-error'\n        ].filter(c => Boolean(c));\n\n        return (\n            <Container\n                className={classNames.join(' ')}\n                disabled={disabled}\n                ref={this.onContainerRef as any}\n                data-role={this.props['data-role']}\n                onKeyUp={this.onKeyUp}\n                onKeyDown={this.onKeyDown}\n            >\n                {this.renderNativeSelect()}\n                <Value\n                    clearable={clearable}\n                    searchable={searchable}\n                    open={open}\n                    disabled={disabled}\n                    multi={multi}\n                    mobile={native}\n                    focused={focused}\n                    options={options}\n                    placeholder={placeholder}\n                    error={error}\n                    value={value}\n                    search={search}\n                    keepSearchOnBlur={keepSearchOnBlur}\n                    equalCompareProp={equalCompareProp}\n                    labelComponent={labelComponent}\n                    valueComponentSingle={valueComponentSingle}\n                    valueComponentMulti={valueComponentMulti}\n                    arrowComponent={arrowComponent}\n                    clearComponent={clearComponent}\n                    onClear={this.onClear}\n                    onClick={this.toggleMenu}\n                    onSearch={this.onSearch}\n                    onSearchFocus={this.onSearchFocus}\n                    onSearchBlur={this.onSearchBlur}\n                    onOptionRemove={this.onOptionRemove}\n                />\n                <Menu\n                    open={open}\n                    options={this.options}\n                    value={value}\n                    multi={multi}\n                    error={error}\n                    search={search}\n                    selectedIndex={selectedIndex}\n                    menuComponent={menuComponent}\n                    labelComponent={labelComponent}\n                    optionComponent={optionComponent}\n                    hideSelectedOptions={hideSelectedOptions}\n                    equalCompareProp={equalCompareProp}\n                    emptyText={emptyText}\n                    rowHeight={rowHeight}\n                    menuWidth={menuWidth}\n                    menuHeight={menuHeight}\n                    onSelect={this.onOptionSelect}\n                />\n            </Container>\n        );\n    }\n\n    private renderNativeSelect(): React.ReactNode {\n        const { NativeSelect } = Select;\n        const { native, placeholder, multi, disabled } = this.props;\n        const dataRole = this.props['data-role']\n            ? `select-${this.props['data-role']}`\n            : undefined;\n        const clearable = this.props.clearable && native;\n        const value =\n            isArray(this.props.value) && multi\n                ? this.props.value.map(this.findOptionIndex)\n                : this.findOptionIndex(this.props.value || '');\n\n        return (\n            <NativeSelect\n                ref={this.nativeSelect as any}\n                multiple={multi}\n                value={value}\n                disabled={disabled}\n                native={native}\n                tabIndex={-1}\n                data-role={dataRole}\n                onChange={this.onChangeNativeSelect}\n            >\n                <option value=\"\" disabled={!clearable}>\n                    {placeholder}\n                </option>\n                {this.options.map((option, i) => (\n                    <option\n                        key={toKey(option.value)}\n                        value={`${i}`}\n                        disabled={option.disabled}\n                    >\n                        {option.label}\n                    </option>\n                ))}\n            </NativeSelect>\n        );\n    }\n\n    private renderChildren(): React.ReactNode {\n        const { options, placeholder, multi, children } = this.props;\n        const { open, search } = this.state;\n        const valueOptions = getValueOptions(options || [], this.props.value);\n        const value: T | T[] | undefined = !multi\n            ? this.props.value\n            : valueOptions.map(option => option.value);\n        const showPlaceholder =\n            !search &&\n            (isArray(value)\n                ? value.length === 0\n                : value === undefined || value === null);\n\n        if (!children) {\n            return null;\n        }\n\n        return children({\n            options: this.options,\n            open,\n            value,\n            MenuContainer,\n            placeholder: showPlaceholder ? placeholder : undefined,\n            onToggle: () => this.toggleMenu(),\n            onClose: () => this.closeMenu(),\n            onOpen: () => this.openMenu(),\n            onRef: ref => (this.container = ref)\n        });\n    }\n\n    @bind\n    private toggleMenu(): void {\n        const open = !this.state.open;\n\n        if (open) {\n            this.openMenu();\n        } else {\n            this.closeMenu();\n        }\n    }\n\n    @debounce(0)\n    private openMenu(): void {\n        const selectedIndex = this.props.hideSelectedOptions\n            ? undefined\n            : this.options.findIndex(option =>\n                  equal(\n                      option.value,\n                      this.props.value,\n                      this.props.equalCompareProp\n                  )\n              );\n        const keepSearchOnBlur =\n            this.props.keepSearchOnBlur && !this.props.value;\n\n        this.setState(\n            {\n                open: true,\n                search: keepSearchOnBlur ? this.state.search : undefined,\n                selectedIndex\n            },\n            () => {\n                if (this.props.onOpen) {\n                    this.props.onOpen();\n                }\n\n                this.addDocumentListener();\n            }\n        );\n    }\n\n    @debounce(0)\n    private closeMenu(callback = () => {}): void {\n        const keepSearchOnBlur =\n            this.props.keepSearchOnBlur && !this.props.value;\n\n        this.removeDocumentListener();\n        this.setState(\n            {\n                open: false,\n                search: keepSearchOnBlur ? this.state.search : undefined,\n                selectedIndex: undefined\n            },\n            () => {\n                if (this.props.onClose) {\n                    this.props.onClose();\n                }\n\n                callback();\n            }\n        );\n    }\n\n    private createOption(value: string, cb?: () => void): void {\n        const { onCreate } = this.props;\n\n        if (onCreate) {\n            this.closeMenu(() => {\n                onCreate(value);\n\n                if (cb) {\n                    cb();\n                }\n            });\n        }\n    }\n\n    private addDocumentListener(): void {\n        this.removeDocumentListener();\n\n        if (this.document) {\n            this.document.addEventListener('click', this.onDocumentClick);\n        }\n    }\n\n    private removeDocumentListener(): void {\n        if (this.document) {\n            this.document.removeEventListener('click', this.onDocumentClick);\n        }\n    }\n\n    @bind\n    private cleanBlindText(): void {\n        this.blindTextTimeout = setTimeout(\n            () => this.setState({ blindText: '' }),\n            700\n        );\n    }\n\n    @bind\n    private findOptionIndex(val: any) {\n        let index = this.options.findIndex(option => option.value === val);\n\n        if (index === -1) {\n            if (typeof val === 'object') {\n                index = this.options.findIndex(option =>\n                    equal(option.value, val, this.props.equalCompareProp)\n                );\n            }\n\n            if (index === -1) {\n                return '';\n            }\n        }\n\n        return String(index);\n    }\n\n    @bind\n    private onChangeNativeSelect(\n        e: React.SyntheticEvent<HTMLSelectElement>\n    ): void {\n        const { onChange, multi } = this.props;\n        const { currentTarget } = e;\n\n        if (onChange) {\n            if (currentTarget.value === '') {\n                this.onClear();\n            } else {\n                const values = Array.from(currentTarget.selectedOptions).map(\n                    htmlOption => this.options[htmlOption.index - 1].value\n                );\n\n                if (multi) {\n                    onChange(values as any);\n                } else {\n                    onChange(values[0] as any);\n                }\n            }\n        }\n    }\n\n    @bind\n    private onSearchFocus(): void {\n        const { open, focused } = this.state;\n\n        if (!open && !focused && !this.props.native) {\n            this.openMenu();\n        }\n\n        this.setState({ focused: true });\n    }\n\n    @bind\n    private onSearchBlur(): void {\n        this.setState({ focused: false });\n    }\n\n    @bind\n    private onOptionSelect(value: any | any[], option?: Option<T>): void {\n        const { current } = this.nativeSelect;\n        const { onChange, creatable } = this.props;\n        let optionWasCreated = false;\n\n        const selectOnNative = () => {\n            if (current) {\n                current.value = isArray(value)\n                    ? (value.map(this.findOptionIndex) as any)\n                    : this.findOptionIndex(value);\n            }\n\n            this.setState({ focused: true }, () =>\n                this.closeMenu(() => onChange && onChange(value, option))\n            );\n        };\n\n        if (creatable) {\n            const createValue = (val: any) => {\n                const option = this.options.find(\n                    option =>\n                        this.optionIsCreatable(option) && option.value === val\n                );\n\n                if (option) {\n                    optionWasCreated = true;\n                    this.createOption(option.value as any, selectOnNative);\n                }\n            };\n\n            if (isArray(value)) {\n                value.map(createValue);\n            } else {\n                createValue(value);\n            }\n        }\n\n        if (!optionWasCreated) {\n            selectOnNative();\n        }\n    }\n\n    @bind\n    private onOptionRemove(value: any): void {\n        if (isArray(this.props.value)) {\n            const values = this.props.value.filter(\n                val => !equal(val, value, this.props.equalCompareProp)\n            );\n\n            this.onOptionSelect(values);\n        }\n    }\n\n    @bind\n    private onClear(): void {\n        this.onOptionSelect(this.props.multi ? [] : undefined);\n    }\n\n    @bind\n    private onSearch(search: string): void {\n        this.setState({ search }, () => {\n            if (this.options.length === 1 || (this.props.creatable && search)) {\n                this.setState({ selectedIndex: 0 });\n            } else {\n                this.setState({ selectedIndex: undefined });\n            }\n\n            if (this.props.onSearch) {\n                this.props.onSearch(search);\n            }\n        });\n    }\n\n    @bind\n    private onDocumentClick(e): void {\n        const { target } = e;\n\n        if (\n            target.closest('.react-slct-menu') ||\n            target.closest('.react-slct-value')\n        ) {\n            return;\n        }\n\n        if (this.container && !this.container.contains(target)) {\n            this.closeMenu();\n        }\n    }\n\n    @bind\n    private onKeyDown({ keyCode }: React.KeyboardEvent): void {\n        const { searchable, creatable } = this.props;\n\n        switch (keyCode) {\n            case keys.TAB:\n                if (this.state.open) {\n                    this.closeMenu();\n                }\n                break;\n        }\n\n        if (!searchable && !creatable) {\n            this.handleBlindText(keyCode);\n        }\n    }\n\n    @bind\n    private onKeyUp({ keyCode }: React.KeyboardEvent): void {\n        const { search, open } = this.state;\n        const { value } = this.props;\n        let selectedIndex = this.state.selectedIndex;\n\n        switch (keyCode) {\n            case keys.ARROW_UP:\n                if (open) {\n                    if (selectedIndex !== undefined) {\n                        selectedIndex = selectedIndex - 1;\n\n                        if (selectedIndex < 0) {\n                            selectedIndex = this.options.length - 1;\n                        }\n                    }\n\n                    this.setState({ selectedIndex });\n                } else {\n                    this.openMenu();\n                }\n                break;\n            case keys.ARROW_DOWN:\n                if (open) {\n                    if (\n                        selectedIndex === undefined ||\n                        selectedIndex === this.options.length - 1\n                    ) {\n                        selectedIndex = 0;\n                    } else {\n                        selectedIndex = selectedIndex + 1;\n                    }\n\n                    this.setState({ selectedIndex });\n                } else {\n                    this.openMenu();\n                }\n                break;\n            case keys.ENTER:\n                if (\n                    this.state.selectedIndex === 0 &&\n                    this.optionIsCreatable(this.options[0])\n                ) {\n                    this.createOption(search!);\n                } else if (\n                    selectedIndex !== undefined &&\n                    this.options[selectedIndex]\n                ) {\n                    const option = this.options[selectedIndex];\n                    const newValue = option.value;\n\n                    this.onOptionSelect(\n                        isArray(value) ? [...value, newValue] : newValue,\n                        option\n                    );\n                }\n                break;\n            case keys.ESC:\n                if (open) {\n                    this.closeMenu();\n                }\n                break;\n        }\n    }\n\n    private handleBlindText(keyCode: number): void {\n        const { blindText } = this.state;\n\n        if (keyCode === keys.BACKSPACE && blindText.length) {\n            clearTimeout(this.blindTextTimeout);\n\n            this.setState(\n                {\n                    blindText: blindText.slice(0, blindText.length - 1)\n                },\n                this.cleanBlindText\n            );\n        } else if (keyCode === keys.SPACE) {\n            clearTimeout(this.blindTextTimeout);\n\n            this.setState(\n                {\n                    blindText: blindText + ' '\n                },\n                this.cleanBlindText\n            );\n        } else {\n            const key = String.fromCodePoint(keyCode);\n\n            if (/\\w/.test(key)) {\n                clearTimeout(this.blindTextTimeout);\n\n                this.setState(\n                    {\n                        blindText: blindText + key\n                    },\n                    this.cleanBlindText\n                );\n            }\n        }\n    }\n\n    @bind\n    private onContainerRef(el: HTMLDivElement | null): void {\n        this.container = el;\n    }\n\n    private handleBlindTextUpdate(): void {\n        const { open, blindText } = this.state;\n        const { multi } = this.props;\n\n        if (open) {\n            const selectedIndex = this.options.findIndex(option =>\n                option.label.toLowerCase().startsWith(blindText.toLowerCase())\n            );\n\n            if (selectedIndex >= 0) {\n                this.setState({ selectedIndex });\n            }\n        } else if (!multi) {\n            if (blindText) {\n                const option = this.options.find(option =>\n                    option.label\n                        .toLowerCase()\n                        .startsWith(blindText.toLowerCase())\n                );\n\n                if (option) {\n                    this.onOptionSelect(option.value, option);\n                }\n            } else {\n                this.onOptionSelect(undefined);\n            }\n        }\n    }\n}\n"]}