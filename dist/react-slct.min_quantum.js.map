{"version":3,"sources":["src/option.tsx","src/value.tsx","src/value-component-multi.tsx"],"names":["decko_1","$fsx","r","React","styled_components_1","label_1","OptionComponent","PureComponent","[object Object]","OptionItem","active","selected","labelComponent","option","height","this","props","Label","SelectLabel","className","filter","v","Boolean","createElement","data-role","join","onClick","Object","assign","type","label","onSelect","value","default","div","tslib_1","__decorate","bind","exports","config_1","utils_1","value_component_multi_1","value_component_single_1","Button","button","ArrowButton","ReactSlctColors","border","ValueContainer","mobile","disabled","error","focused","ValueLeft","multi","hasValue","ValueRight","Placeholder","ClearButton","ClearContainer","span","ClearX","Search","canSearch","css","Value","super","search","createRef","window","getWindow","addEventListener","blur","prevProps","current","innerText","focus","options","clearable","open","equalCompareProp","ArrowComponent","arrowComponent","ClearComponent","clearComponent","ValueIconComponent","valueIconComponent","valueOptions","getValueOptions","showClearer","length","searchAtStart","searchAtEnd","renderSearch","renderValues","tabIndex","onClear","searchable","keepSearchOnBlur","onSearchFocus","onSearchBlur","contentEditable","onInput","onSearch","onKeyDown","onFocus","onBlur","ref","placeholder","valueComponentSingle","valueComponentMulti","Single","ValueComponentSingle","Multi","ValueComponentMulti","map","key","toKey","onRemove","onOptionRemove","el","getSelection","document","createRange","range","sel","selectNodeContents","collapse","removeAllRanges","addRange","e","stopPropagation","currentTarget","trim","preventDefault","metaKey","keyCode","keys","TAB","ENTER","ARROW_UP","ARROW_DOWN","SyntheticEvent","_a","KeyboardEvent","_b","_c","Remove","StyledRemove","TagContainer","c"],"mappings":"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","sourcesContent":["import { bind } from 'decko';\nimport * as React from 'react';\nimport styled from 'styled-components';\nimport { SelectLabel } from './label';\nimport { OptionComponentProps } from './typings';\n\ninterface OptionItemProps {\n    active?: OptionComponentProps['active'];\n    selected?: OptionComponentProps['selected'];\n    height?: OptionComponentProps['height'];\n}\n\nexport class OptionComponent extends React.PureComponent<OptionComponentProps> {\n    public static OptionItem = styled.div`\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        flex: 1;\n        height: ${(props: OptionItemProps) => props.height || 32}px;\n        padding: 0 10px;\n        min-width: 0;\n        cursor: pointer;\n        box-sizing: border-box;\n        background-color: ${(props: OptionItemProps) =>\n            props.active ? '#ddd' : props.selected ? '#eee' : '#fff'};\n\n        &:hover {\n            background-color: ${(props: OptionItemProps) =>\n                props.active ? '#ddd' : '#eee'};\n        }\n    `;\n\n    public render(): React.ReactNode {\n        const { OptionItem } = OptionComponent;\n        const { active, selected, labelComponent, option, height } = this.props;\n        const Label = (labelComponent ? labelComponent : SelectLabel) as any;\n        const className = [\n            'option',\n            this.props.className,\n            selected ? 'selected' : null,\n            active ? 'active' : null\n        ].filter((v) => Boolean(v));\n\n        return (\n            <OptionItem\n                data-role=\"option\"\n                className={className.join(' ')}\n                selected={selected}\n                active={active}\n                height={height}\n                onClick={this.onClick}\n            >\n                <Label type=\"option\" active={active} {...option}>\n                    {option.label}\n                </Label>\n            </OptionItem>\n        );\n    }\n\n    @bind\n    private onClick(): void {\n        this.props.onSelect(this.props.option.value, this.props.option);\n    }\n}\n","import { bind } from 'decko';\nimport * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { ReactSlctColors } from './config';\nimport { SelectLabel } from './label';\nimport { Option, SelectProps } from './typings';\nimport { getValueOptions, getWindow, keys, toKey } from './utils';\nimport { ValueComponentMulti } from './value-component-multi';\nimport { ValueComponentSingle } from './value-component-single';\n\nexport interface ValueProps {\n    options: SelectProps['options'];\n    value: SelectProps['value'];\n    placeholder: SelectProps['placeholder'];\n    clearable: SelectProps['clearable'];\n    searchable: SelectProps['searchable'];\n    labelComponent: SelectProps['labelComponent'];\n    valueComponentSingle: SelectProps['valueComponentSingle'];\n    valueComponentMulti: SelectProps['valueComponentMulti'];\n    arrowComponent: SelectProps['arrowComponent'];\n    clearComponent: SelectProps['clearComponent'];\n    valueIconComponent: SelectProps['valueIconComponent'];\n    multi: SelectProps['multi'];\n    mobile: SelectProps['native'];\n    disabled: SelectProps['disabled'];\n    error: SelectProps['error'];\n    equalCompareProp: SelectProps['equalCompareProp'];\n    search?: string;\n    keepSearchOnBlur?: boolean;\n    open: boolean;\n    focused?: boolean;\n    onClear(): void;\n    onClick(): void;\n    onSearch(search: string): void;\n    onSearchFocus(): void;\n    onSearchBlur(): void;\n    onOptionRemove(value: any): void;\n}\n\ninterface SearchProps {\n    canSearch?: boolean;\n}\n\ninterface ValueContainerProps {\n    mobile?: boolean;\n    disabled?: boolean;\n    focused?: boolean;\n    error?: boolean;\n}\n\ninterface ValueLeftProps {\n    multi?: boolean;\n    hasValue?: boolean;\n}\n\nconst Button = styled.button`\n    background: transparent;\n    border: none;\n    margin: 0;\n    font-size: 20px;\n    padding: 0;\n    line-height: 1;\n    cursor: pointer;\n\n    &:focus {\n        outline: none;\n    }\n`;\n\nconst ArrowButton = styled(Button)`\n    font-size: 12px;\n    color: ${() => ReactSlctColors.border};\n    transform: translateY(2px);\n\n    &:hover {\n        color: #333;\n    }\n`;\n\nconst ValueContainer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    flex: 1;\n    min-height: 32px;\n    pointer-events: ${(props: ValueContainerProps) =>\n        props.mobile || props.disabled ? 'none' : 'auto'};\n    padding: 5px 10px;\n    background: #fff;\n    cursor: default;\n    border-width: 1px;\n    border-style: solid;\n    border-color: ${(props: ValueContainerProps) =>\n        props.error ? ReactSlctColors.error : ReactSlctColors.border};\n    z-index: 0;\n    box-sizing: border-box;\n    max-width: 100%;\n    box-shadow: ${(props: ValueContainerProps) =>\n        props.focused ? 'rgba(0, 0, 0, 0.15) 0 0 2px' : 'none'};\n`;\n\nconst ValueLeft = styled.div`\n    display: flex;\n    flex: 1;\n    align-items: center;\n    flex-wrap: ${(props: ValueLeftProps) =>\n        props.multi && props.hasValue ? 'wrap' : 'nowrap'};\n    user-select: none;\n    min-width: 0;\n    box-sizing: border-box;\n    margin: ${(props: ValueLeftProps) =>\n        props.multi && props.hasValue ? '-2px -5px' : 0};\n`;\n\nconst ValueRight = styled.div`\n    display: flex;\n    align-items: center;\n    margin-left: 4px;\n    box-sizing: border-box;\n`;\n\nconst Placeholder = styled(SelectLabel)`\n    color: #aaa;\n`;\n\nconst ClearButton = styled(Button)`\n    margin-right: 6px;\n`;\n\nconst ClearContainer = styled.span`\n    color: ${() => ReactSlctColors.border};\n\n    &:hover {\n        color: #333;\n    }\n`;\n\nconst ClearX = () => <ClearContainer>×</ClearContainer>;\n\nconst Search = styled.span`\n    min-width: 1px;\n    margin-left: -1px;\n    user-select: text;\n\n    ${(props: SearchProps) =>\n        props.canSearch\n            ? css`\n                  opacity: 1;\n                  position: relative;\n                  left: 1px;\n              `\n            : css`\n                  position: absolute;\n                  opacity: 0;\n              `}\n\n    &:focus {\n        outline: none;\n    }\n`;\n\nexport class Value extends React.PureComponent<ValueProps> {\n    search: React.RefObject<HTMLSpanElement>;\n\n    constructor(props: ValueProps) {\n        super(props);\n\n        this.search = React.createRef();\n\n        const window = getWindow();\n\n        if (window) {\n            window.addEventListener('blur', this.blur);\n        }\n    }\n\n    public componentDidUpdate(prevProps: ValueProps): void {\n        if (prevProps.search && !this.props.search && this.search.current) {\n            this.search.current.innerText = '';\n        }\n\n        if (prevProps.focused !== this.props.focused && this.props.focused) {\n            this.focus();\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            options = [],\n            value,\n            disabled,\n            clearable,\n            open,\n            mobile,\n            multi,\n            focused,\n            equalCompareProp,\n            error\n        } = this.props;\n        const ArrowComponent = this.props.arrowComponent;\n        const ClearComponent = this.props.clearComponent || ClearX;\n        const ValueIconComponent = this.props.valueIconComponent;\n        const valueOptions = getValueOptions(\n            options,\n            value,\n            multi,\n            equalCompareProp\n        );\n        const showClearer = Boolean(\n            clearable && valueOptions.length && !mobile\n        );\n        const searchAtStart = !multi || valueOptions.length === 0;\n        const searchAtEnd = multi && valueOptions.length > 0;\n\n        return (\n            <ValueContainer\n                data-role=\"value\"\n                className=\"react-slct-value\"\n                disabled={disabled}\n                mobile={mobile}\n                focused={focused}\n                error={error}\n                onClick={this.onClick}\n            >\n                <ValueLeft\n                    className=\"value-left\"\n                    multi={multi}\n                    hasValue={!!valueOptions.length}\n                >\n                    {ValueIconComponent && <ValueIconComponent />}\n                    {searchAtStart && this.renderSearch()}\n                    {this.renderValues(valueOptions)}\n                    {searchAtEnd && this.renderSearch()}\n                </ValueLeft>\n                <ValueRight className=\"value-right\">\n                    {showClearer && (\n                        <ClearButton\n                            type=\"button\"\n                            tabIndex={-1}\n                            className=\"clearer\"\n                            onClick={this.onClear}\n                        >\n                            <ClearComponent />\n                        </ClearButton>\n                    )}\n                    {ArrowComponent ? (\n                        <ArrowComponent open={open} />\n                    ) : (\n                        <ArrowButton\n                            type=\"button\"\n                            className=\"arrow\"\n                            tabIndex={-1}\n                        >\n                            {open ? '▲' : '▼'}\n                        </ArrowButton>\n                    )}\n                </ValueRight>\n            </ValueContainer>\n        );\n    }\n\n    private renderSearch(): React.ReactNode {\n        const {\n            open,\n            value,\n            disabled,\n            searchable,\n            search,\n            keepSearchOnBlur,\n            onSearchFocus,\n            onSearchBlur\n        } = this.props;\n        const canSearch =\n            (open && searchable) ||\n            (keepSearchOnBlur && !value && searchable) ||\n            Boolean(search);\n\n        if (disabled && !keepSearchOnBlur) {\n            return null;\n        }\n\n        return (\n            <Search\n                className=\"search\"\n                contentEditable\n                canSearch={canSearch}\n                onInput={this.onSearch}\n                onKeyDown={this.onKeyDown}\n                onFocus={onSearchFocus}\n                onBlur={onSearchBlur}\n                ref={this.search as any}\n            />\n        );\n    }\n\n    private renderValues(valueOptions: Option[]): React.ReactNode {\n        const {\n            placeholder,\n            search,\n            labelComponent,\n            valueComponentSingle,\n            valueComponentMulti,\n            multi,\n            open\n        } = this.props;\n\n        if (search && open && !multi) {\n            return null;\n        }\n\n        if (valueOptions.length === 0 && !search) {\n            return <Placeholder>{placeholder}</Placeholder>;\n        }\n\n        const Single = valueComponentSingle || ValueComponentSingle;\n        const Multi = (valueComponentMulti || ValueComponentMulti) as any;\n\n        return valueOptions.map((option) =>\n            multi ? (\n                <Multi\n                    key={toKey(option.value, this.props.equalCompareProp)}\n                    option={option}\n                    labelComponent={labelComponent}\n                    options={valueOptions}\n                    onRemove={this.props.onOptionRemove}\n                />\n            ) : (\n                <Single\n                    key={toKey(option.value, this.props.equalCompareProp)}\n                    option={option}\n                    labelComponent={labelComponent}\n                />\n            )\n        );\n    }\n\n    private focus(): void {\n        const el = this.search.current;\n\n        if (el) {\n            el.focus();\n\n            if (\n                typeof window.getSelection != 'undefined' &&\n                typeof document.createRange != 'undefined'\n            ) {\n                const range = document.createRange();\n                const sel = window.getSelection();\n\n                range.selectNodeContents(el);\n                range.collapse(false);\n\n                if (sel) {\n                    sel.removeAllRanges();\n                    sel.addRange(range);\n                }\n            }\n        }\n    }\n\n    @bind\n    private blur(): void {\n        if (this.search.current) {\n            this.search.current.blur();\n        }\n    }\n\n    @bind\n    private onClick(): void {\n        if (!this.props.disabled) {\n            this.focus();\n            this.props.onClick();\n        }\n    }\n\n    @bind\n    private onClear(e: React.SyntheticEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    @bind\n    private onSearch(e: React.KeyboardEvent<HTMLSpanElement>) {\n        if (this.props.searchable) {\n            this.props.onSearch(e.currentTarget.innerText.trim());\n        } else {\n            e.preventDefault();\n        }\n    }\n\n    @bind\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>) {\n        const { searchable } = this.props;\n\n        if (e.metaKey) {\n            return;\n        }\n\n        if (\n            (!searchable && e.keyCode !== keys.TAB) ||\n            e.keyCode === keys.ENTER ||\n            e.keyCode === keys.ARROW_UP ||\n            e.keyCode === keys.ARROW_DOWN\n        ) {\n            e.preventDefault();\n        }\n    }\n}\n","import { bind } from 'decko';\nimport * as React from 'react';\nimport styled from 'styled-components';\nimport { ValueComponentMultiProps } from './typings';\nimport { SelectLabel } from './label';\n\ninterface RemoveProps<T = any> {\n    value: T;\n    onClick(value: T): void;\n}\n\nclass Remove extends React.PureComponent<RemoveProps> {\n    private static StyledRemove = styled.button`\n        cursor: pointer;\n        color: #007eff;\n        border: none;\n        background: none;\n        padding: 2px 4px;\n        margin: 0;\n        margin-right: 4px;\n        line-height: 1;\n        display: inline-block;\n        border-right: 1px solid rgba(0, 126, 255, 0.24);\n        margin-left: -2px;\n        font-size: 13px;\n\n        &:hover {\n            background-color: rgba(0, 113, 230, 0.08);\n        }\n\n        &:focus {\n            outline: none;\n        }\n    `;\n\n    public render(): React.ReactNode {\n        const { StyledRemove } = Remove;\n\n        return (\n            <StyledRemove\n                className=\"remove\"\n                type=\"button\"\n                tabIndex={-1}\n                onClick={this.onClick}\n            >\n                ×\n            </StyledRemove>\n        );\n    }\n\n    @bind\n    private onClick(e: React.SyntheticEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClick(this.props.value);\n    }\n}\n\nexport class ValueComponentMulti<T = any> extends React.PureComponent<\n    ValueComponentMultiProps<T>\n> {\n    private static TagContainer = styled.div`\n        display: flex;\n        padding: 0px 3px;\n        background-color: rgba(0, 126, 255, 0.08);\n        border-radius: 2px;\n        border: 1px solid rgba(0, 126, 255, 0.24);\n        color: #007eff;\n        font-size: 0.9em;\n        line-height: 1.4;\n        margin: 2px 3px;\n        align-items: center;\n\n        &:last-of-type {\n            margin-right: 5px;\n        }\n    `;\n\n    public render(): React.ReactNode {\n        const { TagContainer } = ValueComponentMulti;\n        const { option, labelComponent, onRemove } = this.props;\n        const Label = (labelComponent || SelectLabel) as any;\n        const className = ['value-multi', this.props.className]\n            .filter((c) => Boolean(c))\n            .join(' ');\n\n        return (\n            <TagContainer className={className}>\n                <Remove value={option.value} onClick={onRemove}>\n                    ×\n                </Remove>\n                <Label type=\"value-multi\" active {...option}>\n                    {option.label}\n                </Label>\n            </TagContainer>\n        );\n    }\n}\n"]}