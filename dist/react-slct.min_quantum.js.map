{"version":3,"sources":["src/menu.tsx","src/menu-container.tsx"],"names":["React","$fsx","r","react_1","react_window_1","styled_components_1","label_1","menu_container_1","menu_row_1","option_1","utils_1","EmptyOptionItem","default","OptionComponent","OptionItem","Empty","props","createElement","SelectLabel","emptyText","exports","Menu","rowHeight","selectedIndex","open","error","menuWidth","menuHeight","multi","hideSelectedOptions","currentValue","isArray","value","options","useMemo","filter","option","some","val","equal","equalCompareProp","rect","setRect","useState","style","setStyle","list","useRef","width","assumedHeight","Math","min","max","length","actualHeight","height","useEffect","current","undefined","scrollToItem","itemData","Object","assign","onSelect","values","item","Array","from","Set","search","labelComponent","optionComponent","MenuContainer","onRect","onStyle","MenuContent","menuComponent","itemCount","FixedSizeList","className","ref","itemSize","MenuRow","renderList","react_dom_1","menuPosition","top","getWindowInnerHeight","MenuOverlay","div","MenuWrapper","onClick","children","c","join","document","getDocument","window","getWindow","menuOverlay","menuWrapper","menuOverlayRect","setMenuOverlayRect","menuWrapperRect","setMenuWrapperRect","menuLeft","menuTop","scrollY","_a","getContainerTop","left","numWidth","Number","innerWidth","calcMenuOverlay","clientRect","getBoundingClientRect","round","calcMenuWrapper","onRef","call","onViewportChange","e","target","closest","allowRectChange","addEventListener","removeEventListener","createPortal","data-role","body"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useEffect, useRef, useState } from 'react';\nimport { FixedSizeList } from 'react-window';\nimport styled from 'styled-components';\nimport { SelectLabel } from './label';\nimport { MenuContainer } from './menu-container';\nimport { MenuRow } from './menu-row';\nimport { OptionComponent } from './option';\nimport { MenuComponentProps, Option, Rect } from './typings';\nimport { equal, isArray } from './utils';\n\nconst EmptyOptionItem = styled(OptionComponent.OptionItem)`\n    height: 100%;\n    border: 1px solid #ccc;\n`;\n\nconst Empty = (props: { emptyText?: string }) => (\n    <EmptyOptionItem>\n        <SelectLabel>\n            <i>{props.emptyText || 'No results'}</i>\n        </SelectLabel>\n    </EmptyOptionItem>\n);\n\nexport function Menu(props: MenuComponentProps) {\n    const {\n        rowHeight = 32,\n        selectedIndex,\n        open,\n        error,\n        menuWidth,\n        menuHeight,\n        multi,\n        hideSelectedOptions\n    } = props;\n    const currentValue =\n        isArray(props.value) && multi ? props.value : [props.value];\n    const options = React.useMemo(\n        () =>\n            (props.options || []).filter((option) => {\n                if (hideSelectedOptions) {\n                    const selected = currentValue.some((val) =>\n                        equal(val, option.value, props.equalCompareProp)\n                    );\n\n                    if (selected) {\n                        return false;\n                    }\n                }\n\n                return true;\n            }),\n        [\n            props.options,\n            props.equalCompareProp,\n            hideSelectedOptions,\n            currentValue\n        ]\n    );\n    const [rect, setRect] = useState<Rect>();\n    const [style, setStyle] = useState<Rect>();\n    const list = useRef<FixedSizeList>(null);\n    const width = menuWidth || (rect && rect.width !== 'auto' ? rect.width : 0);\n    const assumedHeight = Math.min(\n        Math.max(options.length * rowHeight, rowHeight) + 2,\n        menuHeight || 185\n    );\n    const actualHeight =\n        (style?.height !== 'auto' && style?.height) || assumedHeight;\n\n    useEffect(() => {\n        if (\n            open &&\n            list.current &&\n            selectedIndex !== undefined &&\n            selectedIndex !== -1\n        ) {\n            list.current.scrollToItem(selectedIndex, 'center');\n        }\n    }, [open]);\n\n    const itemData = React.useMemo(() => {\n        return {\n            ...props,\n            options,\n            onSelect: (value: any, option: Option) => {\n                if (isArray(props.value) && props.multi) {\n                    const found = props.value.some((item) =>\n                        equal(item, value, props.equalCompareProp)\n                    );\n                    const values = found\n                        ? props.value.filter(\n                              (item) =>\n                                  !equal(item, value, props.equalCompareProp)\n                          )\n                        : Array.from(new Set([...props.value, value]));\n\n                    props.onSelect(values, option);\n                } else {\n                    props.onSelect(value, option);\n                }\n            }\n        };\n    }, [\n        options.length,\n        props.search,\n        props.rowHeight,\n        props.selectedIndex,\n        props.labelComponent,\n        props.optionComponent,\n        props.value\n    ]);\n\n    function renderList() {\n        const MenuContent = props.menuComponent;\n        const itemCount = options.length;\n\n        if (MenuContent) {\n            return <MenuContent {...props} />;\n        }\n\n        if (itemCount === 0) {\n            return <Empty emptyText={props.emptyText} />;\n        }\n\n        return (\n            <FixedSizeList\n                className=\"react-slct-menu-list\"\n                ref={list}\n                width=\"100%\"\n                height={actualHeight}\n                itemSize={rowHeight}\n                itemCount={itemCount}\n                itemData={itemData}\n            >\n                {MenuRow}\n            </FixedSizeList>\n        );\n    }\n\n    return open ? (\n        <MenuContainer\n            error={error}\n            menuWidth={width}\n            menuHeight={assumedHeight}\n            onRect={setRect}\n            onStyle={setStyle}\n        >\n            {renderList()}\n        </MenuContainer>\n    ) : null;\n}\n","import * as React from 'react';\nimport { createPortal } from 'react-dom';\nimport styled from 'styled-components';\nimport { MenuContainerProps, Rect } from './typings';\nimport { getDocument, getWindow, getWindowInnerHeight } from './utils';\n\ninterface MenuWrapperProps {\n    rect?: Rect;\n    menuHeight?: MenuContainerProps['menuHeight'];\n    error?: boolean;\n}\n\nfunction menuPosition({\n    rect,\n    menuHeight = 186\n}: MenuWrapperProps): 'top' | 'bottom' {\n    if (!rect) {\n        return 'bottom';\n    }\n\n    const { height } = rect;\n\n    if (height === 'auto' || menuHeight === 'auto') {\n        return 'bottom';\n    }\n\n    if (rect.top + height + menuHeight <= getWindowInnerHeight()) {\n        return 'bottom';\n    }\n\n    return 'top';\n}\n\nfunction getContainerTop(props: MenuWrapperProps): number {\n    const { rect } = props;\n    const window = getWindow();\n\n    if (!rect) {\n        return 0;\n    }\n\n    const menuHeight = (props.menuHeight !== 'auto' && props.menuHeight) || 186;\n    const height = rect.height === 'auto' ? 32 : rect.height;\n    const scrollY = window?.scrollY ?? 0;\n\n    switch (menuPosition(props)) {\n        case 'top':\n            return rect.top - menuHeight + 1 + scrollY;\n        case 'bottom':\n            return rect.top + height - 1 + scrollY;\n    }\n}\n\nconst MenuOverlay = styled.div`\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    left: 0;\n    top: 0;\n    pointer-events: none;\n`;\n\n// position this container fixed is not working well on mobile-devices\n// @see https://medium.com/@im_rahul/safari-and-position-fixed-978122be5f29\nconst MenuWrapper = styled.div`\n    position: absolute;\n    z-index: 9999;\n    background: #fff;\n    box-sizing: border-box;\n    box-shadow: ${(props: MenuWrapperProps) =>\n        menuPosition(props) === 'bottom'\n            ? '0 2px 5px rgba(0, 0, 0, 0.1)'\n            : '0 -2px 5px rgba(0, 0, 0, 0.1)'};\n\n    .react-slct-menu-list {\n        box-sizing: border-box;\n        border-width: 1px;\n        border-style: solid;\n        border-color: ${(props: MenuWrapperProps) =>\n            props.error ? 'var(--react-slct-error-color)' : '#ccc'};\n        background-color: #fff;\n\n        &:focus {\n            outline: none;\n        }\n    }\n`;\n\nexport function MenuContainer(props: MenuContainerProps) {\n    const { error, onClick, children } = props;\n    const className = ['react-slct-menu', props.className]\n        .filter((c) => c)\n        .join(' ');\n    const document = getDocument();\n    const window = getWindow();\n    const menuOverlay = React.useRef<HTMLDivElement | null>(null);\n    const menuWrapper = React.useRef<HTMLDivElement | null>(null);\n    const [menuOverlayRect, setMenuOverlayRect] = React.useState<Rect>();\n    const [menuWrapperRect, setMenuWrapperRect] = React.useState<Rect>();\n\n    const style = React.useMemo<Rect>(() => {\n        const { menuLeft, menuTop, menuWidth, menuHeight } = props;\n        let width =\n            menuWidth && menuWidth !== 'auto'\n                ? menuWidth\n                : menuOverlayRect?.width || 'auto';\n        let height =\n            menuHeight && menuHeight !== 'auto'\n                ? menuHeight\n                : menuWrapperRect?.height || 'auto';\n        let top =\n            menuTop ??\n            getContainerTop({\n                rect: menuOverlayRect,\n                menuHeight: height\n            });\n        let left = menuLeft ?? menuOverlayRect?.left ?? 0;\n\n        if (window) {\n            const numWidth = Number(width);\n\n            if (numWidth > window.innerWidth) {\n                width = window.innerWidth - 20;\n            }\n\n            if (left + numWidth > window.innerWidth) {\n                left = Math.max(10, window.innerWidth - numWidth - 20);\n            }\n        }\n\n        if (top < 0) {\n            if (height !== 'auto') {\n                height += top;\n                top = 0;\n            }\n        }\n\n        return { top, left, width, height };\n    }, [\n        props.menuLeft,\n        props.menuTop,\n        props.menuWidth,\n        props.menuHeight,\n        menuOverlayRect,\n        menuWrapperRect\n    ]);\n\n    function calcMenuOverlay() {\n        if (menuOverlay.current) {\n            const clientRect = menuOverlay.current.getBoundingClientRect();\n\n            setMenuOverlayRect({\n                left: Math.round(clientRect.left),\n                top: Math.round(clientRect.top),\n                width: Math.round(clientRect.width),\n                height: Math.round(clientRect.height)\n            });\n        }\n    }\n\n    function calcMenuWrapper() {\n        if (menuWrapper.current) {\n            const clientRect = menuWrapper.current.getBoundingClientRect();\n\n            setMenuWrapperRect({\n                left: Math.round(clientRect.left),\n                top: Math.round(clientRect.top),\n                width: Math.round(clientRect.width),\n                height: Math.round(clientRect.height)\n            });\n        }\n    }\n\n    React.useEffect(calcMenuOverlay, [menuOverlay.current]);\n\n    React.useEffect(() => {\n        calcMenuWrapper();\n\n        if (menuWrapper.current) {\n            props.onRef?.(menuWrapper.current);\n        }\n    }, [menuWrapper.current]);\n\n    React.useEffect(() => {\n        props.onRect?.(menuOverlayRect, menuWrapperRect);\n    }, [menuOverlayRect, menuWrapperRect]);\n\n    React.useEffect(() => {\n        window?.addEventListener('scroll', onViewportChange, true);\n        window?.addEventListener('resize', onViewportChange, true);\n\n        function allowRectChange(e) {\n            if (e.target.closest && !e.target.closest('.react-slct-menu')) {\n                return false;\n            }\n\n            return true;\n        }\n\n        function onViewportChange(e: Event) {\n            if (allowRectChange(e)) {\n                calcMenuOverlay();\n                calcMenuWrapper();\n            }\n        }\n\n        return () => {\n            window?.removeEventListener('resize', onViewportChange, true);\n            window?.removeEventListener('scroll', onViewportChange, true);\n        };\n    }, []);\n\n    React.useEffect(() => {\n        if (style) {\n            props.onStyle?.(style);\n        }\n    }, [style]);\n\n    return (\n        <MenuOverlay ref={menuOverlay}>\n            {document && style\n                ? createPortal(\n                      <MenuWrapper\n                          data-role=\"menu\"\n                          className={className}\n                          error={error}\n                          ref={menuWrapper}\n                          onClick={onClick}\n                          rect={menuOverlayRect}\n                          style={style}\n                      >\n                          {children}\n                      </MenuWrapper>,\n                      document.body\n                  )\n                : null}\n        </MenuOverlay>\n    );\n}\n"]}