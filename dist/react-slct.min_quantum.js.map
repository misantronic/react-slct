{"version":3,"sources":["src/index.tsx","src/menu.tsx"],"names":["lodash_decorators_1","$fsx","r","React","styled_components_1","value_1","menu_1","exports","Menu","menu_container_1","utils_1","keys","typings_1","SelectProps","MenuComponentProps","LabelComponentProps","Option","option_1","OptionComponent","value_component_single_1","ValueComponentSingle","value_component_multi_1","ValueComponentMulti","typings_2","OptionComponentProps","ValueComponentSingleProps","ValueComponentMultiProps","Select","PureComponent","[object Object]","props","super","this","container","nativeSelect","createRef","state","open","blindText","options","search","creatable","onCreateText","showCreate","some","option","value","label","filter","toLowerCase","includes","document","getDocument","Boolean","onCreate","_","prevState","handleBlindTextUpdate","removeDocumentListener","Container","className","clearable","placeholder","disabled","error","menuComponent","labelComponent","optionComponent","valueComponentSingle","valueComponentMulti","arrowComponent","clearComponent","hideSelectedOptions","multi","native","emptyText","rowHeight","menuWidth","menuHeight","keepSearchOnBlur","selectedIndex","focused","searchable","children","renderChildren","classNames","c","createElement","join","ref","onContainerRef","data-role","onKeyUp","onKeyDown","renderNativeSelect","Value","mobile","onClear","onClick","toggleMenu","onSearch","onSearchFocus","onSearchBlur","onOptionRemove","onSelect","onOptionSelect","NativeSelect","dataRole","undefined","isArray","map","findOptionIndex","multiple","tabIndex","onChange","onChangeNativeSelect","i","key","toKey","valueOptions","getValueOptions","showPlaceholder","length","MenuContainer","onToggle","onClose","closeMenu","onOpen","openMenu","onRef","findIndex","equal","setState","addDocumentListener","callback","cb","addEventListener","onDocumentClick","removeEventListener","blindTextTimeout","setTimeout","val","index","JSON","stringify","String","e","currentTarget","values","Array","from","selectedOptions","htmlOption","current","optionWasCreated","selectOnNative","createValue","find","optionIsCreatable","createOption","target","closest","contains","keyCode","TAB","handleBlindText","ARROW_UP","ARROW_DOWN","ENTER","newValue","ESC","BACKSPACE","clearTimeout","slice","cleanBlindText","SPACE","fromCodePoint","test","el","startsWith","default","div","select","css","tslib_1","__decorate","bind","debounce","SyntheticEvent","_a","Object","_b","KeyboardEvent","_c","_d","react_1","react_window_1","label_1","menu_row_1","EmptyOptionItem","OptionItem","Empty","SelectLabel","selected","rect","setRect","useState","list","useRef","width","height","Math","min","max","useEffect","scrollToItem","itemData","useMemo","assign","item","Set","onRect","MenuContent","itemCount","FixedSizeList","itemSize","MenuRow","renderList"],"mappings":"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","sourcesContent":["import { bind, debounce } from 'lodash-decorators';\nimport * as React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Value } from './value';\nimport { Menu } from './menu';\nimport { MenuContainer } from './menu-container';\nimport {\n    isArray,\n    keys,\n    getDocument,\n    getValueOptions,\n    equal,\n    toKey\n} from './utils';\nimport {\n    SelectProps,\n    SelectState,\n    MenuComponentProps,\n    LabelComponentProps,\n    Option\n} from './typings';\nimport './global-stylings';\n\nexport {\n    SelectProps,\n    Menu,\n    MenuComponentProps,\n    LabelComponentProps,\n    Option,\n    keys\n};\nexport { OptionComponent } from './option';\nexport { ValueComponentSingle } from './value-component-single';\nexport { ValueComponentMulti } from './value-component-multi';\nexport {\n    OptionComponentProps,\n    ValueComponentSingleProps,\n    ValueComponentMultiProps\n} from './typings';\n\nexport class Select<T = any> extends React.PureComponent<\n    SelectProps<T>,\n    SelectState\n> {\n    private static Container = styled.div`\n        display: flex;\n        position: relative;\n        cursor: default;\n        width: 100%;\n        box-sizing: border-box;\n        pointer-events: ${(props: { disabled?: boolean }) =>\n            props.disabled ? 'none' : 'auto'};\n        opacity: ${(props: { disabled?: boolean }) =>\n            props.disabled ? 0.75 : 1};\n        user-select: none;\n    `;\n\n    private static NativeSelect = styled.select`\n        display: block;\n        opacity: 0;\n        position: absolute;\n        right: 0;\n        top: 0;\n        width: 100%;\n        height: 100%;\n        ${(props: { native?: boolean }) =>\n            props.native\n                ? css`\n                      z-index: 1;\n                  `\n                : css`\n                      pointer-events: none;\n                      z-index: auto;\n                  `};\n    `;\n\n    private nativeSelect: React.RefObject<HTMLSelectElement>;\n    private container: HTMLDivElement | null = null;\n    private blindTextTimeout!: number;\n\n    constructor(props: SelectProps) {\n        super(props);\n\n        this.nativeSelect = React.createRef();\n\n        this.state = {\n            open: false,\n            blindText: ''\n        };\n    }\n\n    private get options(): Option<T>[] {\n        const { search } = this.state;\n        const { creatable, onCreateText } = this.props;\n        let options = this.props.options || [];\n        const showCreate =\n            creatable &&\n            !options.some(option => {\n                const { value, label } = option;\n\n                // @ts-ignore\n                return value === search || label === search;\n            });\n\n        if (search) {\n            options = options.filter(option =>\n                option.label.toLowerCase().includes(search.toLowerCase())\n            );\n        }\n\n        if (showCreate && search) {\n            options = [\n                {\n                    label: onCreateText\n                        ? onCreateText(search)\n                        : `Create \"${search}\"`,\n                    value: search as any,\n                    creatable: true\n                },\n                ...options\n            ];\n        }\n\n        return options;\n    }\n\n    private get document() {\n        return getDocument();\n    }\n\n    private optionIsCreatable(option: Option<T>): boolean {\n        return (\n            this.props.creatable &&\n            option.creatable &&\n            Boolean(this.props.onCreate && this.state.search)\n        );\n    }\n\n    public componentDidUpdate(_, prevState: SelectState): void {\n        if (\n            this.state.blindText &&\n            prevState.blindText !== this.state.blindText\n        ) {\n            this.handleBlindTextUpdate();\n        }\n    }\n\n    public componentWillUnmount(): void {\n        this.removeDocumentListener();\n    }\n\n    public render(): React.ReactNode {\n        const { Container } = Select;\n        const {\n            className,\n            options,\n            creatable,\n            clearable,\n            placeholder,\n            value,\n            disabled,\n            error,\n            menuComponent,\n            labelComponent,\n            optionComponent,\n            valueComponentSingle,\n            valueComponentMulti,\n            arrowComponent,\n            clearComponent,\n            hideSelectedOptions,\n            multi,\n            native,\n            emptyText,\n            rowHeight,\n            menuWidth,\n            menuHeight,\n            keepSearchOnBlur\n        } = this.props;\n        const { open, search, selectedIndex, focused } = this.state;\n        const searchable = this.props.searchable || creatable;\n\n        if (this.props.children) {\n            return this.renderChildren();\n        }\n\n        const classNames = [\n            'react-slct',\n            className,\n            open && 'open',\n            error && 'has-error'\n        ].filter(c => Boolean(c));\n\n        return (\n            <Container\n                className={classNames.join(' ')}\n                disabled={disabled}\n                ref={this.onContainerRef as any}\n                data-role={this.props['data-role']}\n                onKeyUp={this.onKeyUp}\n                onKeyDown={this.onKeyDown}\n            >\n                {this.renderNativeSelect()}\n                <Value\n                    clearable={clearable}\n                    searchable={searchable}\n                    open={open}\n                    disabled={disabled}\n                    multi={multi}\n                    mobile={native}\n                    focused={focused}\n                    options={options}\n                    placeholder={placeholder}\n                    error={error}\n                    value={value}\n                    search={search}\n                    keepSearchOnBlur={keepSearchOnBlur}\n                    labelComponent={labelComponent}\n                    valueComponentSingle={valueComponentSingle}\n                    valueComponentMulti={valueComponentMulti}\n                    arrowComponent={arrowComponent}\n                    clearComponent={clearComponent}\n                    onClear={this.onClear}\n                    onClick={this.toggleMenu}\n                    onSearch={this.onSearch}\n                    onSearchFocus={this.onSearchFocus}\n                    onSearchBlur={this.onSearchBlur}\n                    onOptionRemove={this.onOptionRemove}\n                />\n                <Menu\n                    open={open}\n                    options={this.options}\n                    value={value}\n                    multi={multi}\n                    error={error}\n                    search={search}\n                    selectedIndex={selectedIndex}\n                    menuComponent={menuComponent}\n                    labelComponent={labelComponent}\n                    optionComponent={optionComponent}\n                    hideSelectedOptions={hideSelectedOptions}\n                    emptyText={emptyText}\n                    rowHeight={rowHeight}\n                    menuWidth={menuWidth}\n                    menuHeight={menuHeight}\n                    onSelect={this.onOptionSelect}\n                />\n            </Container>\n        );\n    }\n\n    private renderNativeSelect(): React.ReactNode {\n        const { NativeSelect } = Select;\n        const { native, placeholder, multi, disabled } = this.props;\n        const dataRole = this.props['data-role']\n            ? `select-${this.props['data-role']}`\n            : undefined;\n        const clearable = this.props.clearable && native;\n        const value = isArray(this.props.value)\n            ? this.props.value.map(this.findOptionIndex)\n            : this.findOptionIndex(this.props.value || '');\n\n        return (\n            <NativeSelect\n                ref={this.nativeSelect as any}\n                multiple={multi}\n                value={value}\n                disabled={disabled}\n                native={native}\n                tabIndex={-1}\n                data-role={dataRole}\n                onChange={this.onChangeNativeSelect}\n            >\n                <option value=\"\" disabled={!clearable}>\n                    {placeholder}\n                </option>\n                {this.options.map((option, i) => (\n                    <option\n                        key={toKey(option.value)}\n                        value={`${i}`}\n                        disabled={option.disabled}\n                    >\n                        {option.label}\n                    </option>\n                ))}\n            </NativeSelect>\n        );\n    }\n\n    private renderChildren(): React.ReactNode {\n        const { options, placeholder, multi, children } = this.props;\n        const { open, search } = this.state;\n        const valueOptions = getValueOptions(options || [], this.props.value);\n        const value: T | T[] | undefined = !multi\n            ? this.props.value\n            : valueOptions.map(option => option.value);\n        const showPlaceholder =\n            !search &&\n            (isArray(value)\n                ? value.length === 0\n                : value === undefined || value === null);\n\n        if (!children) {\n            return null;\n        }\n\n        return children({\n            options: this.options,\n            open,\n            value,\n            MenuContainer,\n            placeholder: showPlaceholder ? placeholder : undefined,\n            onToggle: () => this.toggleMenu(),\n            onClose: () => this.closeMenu(),\n            onOpen: () => this.openMenu(),\n            onRef: ref => (this.container = ref)\n        });\n    }\n\n    @bind\n    private toggleMenu(): void {\n        const open = !this.state.open;\n\n        if (open) {\n            this.openMenu();\n        } else {\n            this.closeMenu();\n        }\n    }\n\n    @debounce(0)\n    private openMenu(): void {\n        const selectedIndex = this.props.hideSelectedOptions\n            ? undefined\n            : this.options.findIndex(option =>\n                  equal(option.value, this.props.value)\n              );\n        const keepSearchOnBlur =\n            this.props.keepSearchOnBlur && !this.props.value;\n\n        this.setState(\n            {\n                open: true,\n                search: keepSearchOnBlur ? this.state.search : undefined,\n                selectedIndex\n            },\n            () => {\n                if (this.props.onOpen) {\n                    this.props.onOpen();\n                }\n\n                this.addDocumentListener();\n            }\n        );\n    }\n\n    @debounce(0)\n    private closeMenu(callback = () => {}): void {\n        const keepSearchOnBlur =\n            this.props.keepSearchOnBlur && !this.props.value;\n\n        this.removeDocumentListener();\n        this.setState(\n            {\n                open: false,\n                search: keepSearchOnBlur ? this.state.search : undefined,\n                selectedIndex: undefined\n            },\n            () => {\n                if (this.props.onClose) {\n                    this.props.onClose();\n                }\n\n                callback();\n            }\n        );\n    }\n\n    private createOption(value: string, cb?: () => void): void {\n        const { onCreate } = this.props;\n\n        if (onCreate) {\n            this.closeMenu(() => {\n                onCreate(value);\n\n                if (cb) {\n                    cb();\n                }\n            });\n        }\n    }\n\n    private addDocumentListener(): void {\n        this.removeDocumentListener();\n\n        if (this.document) {\n            this.document.addEventListener('click', this.onDocumentClick);\n        }\n    }\n\n    private removeDocumentListener(): void {\n        if (this.document) {\n            this.document.removeEventListener('click', this.onDocumentClick);\n        }\n    }\n\n    @bind\n    private cleanBlindText(): void {\n        this.blindTextTimeout = setTimeout(\n            () => this.setState({ blindText: '' }),\n            700\n        );\n    }\n\n    @bind\n    private findOptionIndex(val: any) {\n        let index = this.options.findIndex(option => option.value === val);\n\n        if (index === -1) {\n            if (typeof val === 'object') {\n                index = this.options.findIndex(option => {\n                    if (typeof option.value === 'object') {\n                        return (\n                            JSON.stringify(option.value) === JSON.stringify(val)\n                        );\n                    }\n\n                    return false;\n                });\n            }\n\n            if (index === -1) {\n                return '';\n            }\n        }\n\n        return String(index);\n    }\n\n    @bind\n    private onChangeNativeSelect(\n        e: React.SyntheticEvent<HTMLSelectElement>\n    ): void {\n        const { onChange, multi } = this.props;\n        const { currentTarget } = e;\n\n        if (onChange) {\n            if (currentTarget.value === '') {\n                this.onClear();\n            } else {\n                const values = Array.from(currentTarget.selectedOptions).map(\n                    htmlOption => this.options[htmlOption.index - 1].value\n                );\n\n                if (multi) {\n                    onChange(values as any);\n                } else {\n                    onChange(values[0] as any);\n                }\n            }\n        }\n    }\n\n    @bind\n    private onSearchFocus(): void {\n        const { open, focused } = this.state;\n\n        if (!open && !focused && !this.props.native) {\n            this.openMenu();\n        }\n\n        this.setState({ focused: true });\n    }\n\n    @bind\n    private onSearchBlur(): void {\n        this.setState({ focused: false });\n    }\n\n    @bind\n    private onOptionSelect(value: any | any[], option?: Option<T>): void {\n        const { current } = this.nativeSelect;\n        const { onChange, creatable } = this.props;\n        let optionWasCreated = false;\n\n        const selectOnNative = () => {\n            if (current) {\n                current.value = isArray(value)\n                    ? (value.map(this.findOptionIndex) as any)\n                    : this.findOptionIndex(value);\n            }\n\n            this.setState({ focused: true }, () =>\n                this.closeMenu(() => onChange && onChange(value, option))\n            );\n        };\n\n        if (creatable) {\n            const createValue = (val: any) => {\n                const option = this.options.find(\n                    option =>\n                        this.optionIsCreatable(option) && option.value === val\n                );\n\n                if (option) {\n                    optionWasCreated = true;\n                    this.createOption(option.value as any, selectOnNative);\n                }\n            };\n\n            if (isArray(value)) {\n                value.map(createValue);\n            } else {\n                createValue(value);\n            }\n        }\n\n        if (!optionWasCreated) {\n            selectOnNative();\n        }\n    }\n\n    @bind\n    private onOptionRemove(value: any): void {\n        if (isArray(this.props.value)) {\n            const values = this.props.value.filter(val => !equal(val, value));\n\n            this.onOptionSelect(values);\n        }\n    }\n\n    @bind\n    private onClear(): void {\n        this.onOptionSelect(this.props.multi ? [] : undefined);\n    }\n\n    @bind\n    private onSearch(search: string): void {\n        this.setState({ search }, () => {\n            if (this.options.length === 1 || (this.props.creatable && search)) {\n                this.setState({ selectedIndex: 0 });\n            } else {\n                this.setState({ selectedIndex: undefined });\n            }\n\n            if (this.props.onSearch) {\n                this.props.onSearch(search);\n            }\n        });\n    }\n\n    @bind\n    private onDocumentClick(e): void {\n        const { target } = e;\n\n        if (\n            target.closest('.react-slct-menu') ||\n            target.closest('.react-slct-value')\n        ) {\n            return;\n        }\n\n        if (this.container && !this.container.contains(target)) {\n            this.closeMenu();\n        }\n    }\n\n    @bind\n    private onKeyDown({ keyCode }: React.KeyboardEvent): void {\n        const { searchable, creatable } = this.props;\n\n        switch (keyCode) {\n            case keys.TAB:\n                if (this.state.open) {\n                    this.closeMenu();\n                }\n                break;\n        }\n\n        if (!searchable && !creatable) {\n            this.handleBlindText(keyCode);\n        }\n    }\n\n    @bind\n    private onKeyUp({ keyCode }: React.KeyboardEvent): void {\n        const { search, open } = this.state;\n        const { value } = this.props;\n        let selectedIndex = this.state.selectedIndex;\n\n        switch (keyCode) {\n            case keys.ARROW_UP:\n                if (open) {\n                    if (selectedIndex !== undefined) {\n                        selectedIndex = selectedIndex - 1;\n\n                        if (selectedIndex < 0) {\n                            selectedIndex = this.options.length - 1;\n                        }\n                    }\n\n                    this.setState({ selectedIndex });\n                } else {\n                    this.openMenu();\n                }\n                break;\n            case keys.ARROW_DOWN:\n                if (open) {\n                    if (\n                        selectedIndex === undefined ||\n                        selectedIndex === this.options.length - 1\n                    ) {\n                        selectedIndex = 0;\n                    } else {\n                        selectedIndex = selectedIndex + 1;\n                    }\n\n                    this.setState({ selectedIndex });\n                } else {\n                    this.openMenu();\n                }\n                break;\n            case keys.ENTER:\n                if (\n                    this.state.selectedIndex === 0 &&\n                    this.optionIsCreatable(this.options[0])\n                ) {\n                    this.createOption(search!);\n                } else if (\n                    selectedIndex !== undefined &&\n                    this.options[selectedIndex]\n                ) {\n                    const option = this.options[selectedIndex];\n                    const newValue = option.value;\n\n                    this.onOptionSelect(\n                        isArray(value) ? [...value, newValue] : newValue,\n                        option\n                    );\n                }\n                break;\n            case keys.ESC:\n                if (open) {\n                    this.closeMenu();\n                }\n                break;\n        }\n    }\n\n    private handleBlindText(keyCode: number): void {\n        const { blindText } = this.state;\n\n        if (keyCode === keys.BACKSPACE && blindText.length) {\n            clearTimeout(this.blindTextTimeout);\n\n            this.setState(\n                {\n                    blindText: blindText.slice(0, blindText.length - 1)\n                },\n                this.cleanBlindText\n            );\n        } else if (keyCode === keys.SPACE) {\n            clearTimeout(this.blindTextTimeout);\n\n            this.setState(\n                {\n                    blindText: blindText + ' '\n                },\n                this.cleanBlindText\n            );\n        } else {\n            const key = String.fromCodePoint(keyCode);\n\n            if (/\\w/.test(key)) {\n                clearTimeout(this.blindTextTimeout);\n\n                this.setState(\n                    {\n                        blindText: blindText + key\n                    },\n                    this.cleanBlindText\n                );\n            }\n        }\n    }\n\n    @bind\n    private onContainerRef(el: HTMLDivElement | null): void {\n        this.container = el;\n    }\n\n    private handleBlindTextUpdate(): void {\n        const { open, blindText } = this.state;\n        const { multi } = this.props;\n\n        if (open) {\n            const selectedIndex = this.options.findIndex(option =>\n                option.label.toLowerCase().startsWith(blindText.toLowerCase())\n            );\n\n            if (selectedIndex >= 0) {\n                this.setState({ selectedIndex });\n            }\n        } else if (!multi) {\n            if (blindText) {\n                const option = this.options.find(option =>\n                    option.label\n                        .toLowerCase()\n                        .startsWith(blindText.toLowerCase())\n                );\n\n                if (option) {\n                    this.onOptionSelect(option.value, option);\n                }\n            } else {\n                this.onOptionSelect(undefined);\n            }\n        }\n    }\n}\n","import * as React from 'react';\nimport { useEffect, useRef, useState } from 'react';\nimport { FixedSizeList } from 'react-window';\nimport styled from 'styled-components';\nimport { SelectLabel } from './label';\nimport { MenuContainer } from './menu-container';\nimport { MenuRow } from './menu-row';\nimport { OptionComponent } from './option';\nimport { MenuComponentProps, Option, Rect } from './typings';\nimport { equal, isArray } from './utils';\n\nconst EmptyOptionItem = styled(OptionComponent.OptionItem)`\n    height: 100%;\n    border: 1px solid #ccc;\n`;\n\nconst Empty = (props: { emptyText?: string }) => (\n    <EmptyOptionItem>\n        <SelectLabel>\n            <i>{props.emptyText || 'No results'}</i>\n        </SelectLabel>\n    </EmptyOptionItem>\n);\n\nexport function Menu(props: MenuComponentProps) {\n    const {\n        rowHeight = 32,\n        selectedIndex,\n        open,\n        error,\n        menuWidth,\n        menuHeight,\n        hideSelectedOptions\n    } = props;\n    const options = (props.options || []).filter(option => {\n        const currentValue = isArray(props.value) ? props.value : [props.value];\n        const selected = currentValue.some(val => equal(val, option.value));\n\n        if (hideSelectedOptions && selected) {\n            return false;\n        }\n\n        return true;\n    });\n    const [rect, setRect] = useState<Rect>();\n    const list = useRef<FixedSizeList>(null);\n    const width = menuWidth || (rect && rect.width !== 'auto' ? rect.width : 0);\n    const height = Math.min(\n        Math.max(options.length * rowHeight, rowHeight) + 2,\n        menuHeight || 185\n    );\n\n    useEffect(() => {\n        if (\n            open &&\n            list.current &&\n            selectedIndex !== undefined &&\n            selectedIndex !== -1\n        ) {\n            list.current.scrollToItem(selectedIndex, 'center');\n        }\n    }, [open]);\n    const itemData = React.useMemo(() => {\n        return {\n            ...props,\n            options,\n            onSelect: (value: any, option: Option) => {\n                if (isArray(props.value)) {\n                    const found = props.value.some(item => equal(item, value));\n                    const values = found\n                        ? props.value.filter(item => !equal(item, value))\n                        : Array.from(new Set([...props.value, value]));\n\n                    props.onSelect(values, option);\n                } else {\n                    props.onSelect(value, option);\n                }\n            }\n        };\n    }, [\n        options.length,\n        props.search,\n        props.rowHeight,\n        props.selectedIndex,\n        props.labelComponent,\n        props.optionComponent,\n        props.value\n    ]);\n\n    function renderList(width: number, height: number, rowHeight: number) {\n        const MenuContent = props.menuComponent;\n        const itemCount = options.length;\n\n        if (MenuContent) {\n            return <MenuContent {...props} />;\n        }\n\n        if (itemCount === 0) {\n            return <Empty emptyText={props.emptyText} />;\n        }\n\n        return (\n            <FixedSizeList\n                className=\"react-slct-menu-list\"\n                ref={list}\n                width={width}\n                height={height}\n                itemSize={rowHeight}\n                itemCount={itemCount}\n                itemData={itemData}\n            >\n                {MenuRow}\n            </FixedSizeList>\n        );\n    }\n\n    return open ? (\n        <MenuContainer\n            error={error}\n            menuWidth={width}\n            menuHeight={height}\n            onRect={rect => setRect(rect)}\n        >\n            {renderList(width, height, rowHeight)}\n        </MenuContainer>\n    ) : null;\n}\n"]}