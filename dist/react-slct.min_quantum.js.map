{"version":3,"sources":["src/menu-container.tsx"],"names":["React","$fsx","r","react_dom_1","styled_components_1","utils_1","menuPosition","rect","menuHeight","height","top","getWindowInnerHeight","MenuOverlay","default","div","MenuWrapper","props","error","exports","MenuContainer","onClick","children","className","filter","c","join","document","getDocument","window","getWindow","menuOverlay","useRef","menuWrapper","menuOverlayRect","setMenuOverlayRect","useState","menuWrapperRect","setMenuWrapperRect","calcMenuOverlay","current","clientRect","getBoundingClientRect","left","Math","round","width","calcMenuWrapper","useEffect","_a","onRef","call","onRect","onViewportChange","e","target","closest","allowRectChange","addEventListener","removeEventListener","style","menuLeft","menuTop","menuWidth","getContainerTop","numWidth","Number","innerWidth","max","createElement","ref","createPortal","data-role","body"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { createPortal } from 'react-dom';\nimport styled from 'styled-components';\nimport { MenuContainerProps, Rect } from './typings';\nimport { getDocument, getWindow, getWindowInnerHeight } from './utils';\n\ninterface MenuWrapperProps {\n    rect?: Rect;\n    menuHeight?: MenuContainerProps['menuHeight'];\n    error?: boolean;\n}\n\nfunction menuPosition({\n    rect,\n    menuHeight = 186\n}: MenuWrapperProps): 'top' | 'bottom' {\n    if (!rect) {\n        return 'bottom';\n    }\n\n    const { height } = rect;\n\n    if (height === 'auto' || menuHeight === 'auto') {\n        return 'bottom';\n    }\n\n    if (rect.top + height + menuHeight <= getWindowInnerHeight()) {\n        return 'bottom';\n    }\n\n    return 'top';\n}\n\nfunction getContainerTop(props: MenuWrapperProps): number {\n    const { rect } = props;\n\n    if (!rect) {\n        return 0;\n    }\n\n    const menuHeight = (props.menuHeight !== 'auto' && props.menuHeight) || 186;\n    const height = rect.height === 'auto' ? 32 : rect.height;\n\n    switch (menuPosition(props)) {\n        case 'top':\n            return rect.top - menuHeight + 1;\n        case 'bottom':\n            return rect.top + height - 1;\n    }\n}\n\nconst MenuOverlay = styled.div`\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    left: 0;\n    top: 0;\n    pointer-events: none;\n`;\n\nconst MenuWrapper = styled.div`\n    position: fixed;\n    z-index: 9999;\n    background: #fff;\n    box-sizing: border-box;\n    box-shadow: ${(props: MenuWrapperProps) =>\n        menuPosition(props) === 'bottom'\n            ? '0 2px 5px rgba(0, 0, 0, 0.1)'\n            : '0 -2px 5px rgba(0, 0, 0, 0.1)'};\n\n    .react-slct-menu-list {\n        box-sizing: border-box;\n        border-width: 1px;\n        border-style: solid;\n        border-color: ${(props: MenuWrapperProps) =>\n            props.error ? 'var(--react-slct-error-color)' : '#ccc'};\n        background-color: #fff;\n\n        &:focus {\n            outline: none;\n        }\n    }\n`;\n\nexport function MenuContainer(props: MenuContainerProps) {\n    const { error, onClick, children } = props;\n    const className = ['react-slct-menu', props.className]\n        .filter((c) => c)\n        .join(' ');\n    const document = getDocument();\n    const window = getWindow();\n    const menuOverlay = React.useRef<HTMLDivElement | null>(null);\n    const menuWrapper = React.useRef<HTMLDivElement | null>(null);\n    const [menuOverlayRect, setMenuOverlayRect] = React.useState<Rect>();\n    const [menuWrapperRect, setMenuWrapperRect] = React.useState<Rect>();\n\n    function calcMenuOverlay() {\n        if (menuOverlay.current) {\n            const clientRect = menuOverlay.current.getBoundingClientRect();\n\n            setMenuOverlayRect({\n                left: Math.round(clientRect.left),\n                top: Math.round(clientRect.top),\n                width: Math.round(clientRect.width),\n                height: Math.round(clientRect.height)\n            });\n        }\n    }\n\n    function calcMenuWrapper() {\n        if (menuWrapper.current) {\n            const clientRect = menuWrapper.current.getBoundingClientRect();\n\n            setMenuWrapperRect({\n                left: Math.round(clientRect.left),\n                top: Math.round(clientRect.top),\n                width: Math.round(clientRect.width),\n                height: Math.round(clientRect.height)\n            });\n        }\n    }\n\n    React.useEffect(calcMenuOverlay, [menuOverlay.current]);\n    React.useEffect(() => {\n        calcMenuWrapper();\n\n        if (menuWrapper.current) {\n            props.onRef?.(menuWrapper.current);\n        }\n    }, [menuWrapper.current]);\n\n    React.useEffect(() => {\n        props.onRect?.(menuOverlayRect, menuWrapperRect);\n    }, [menuOverlayRect, menuWrapperRect]);\n\n    React.useEffect(() => {\n        window?.addEventListener('scroll', onViewportChange, true);\n        window?.addEventListener('resize', onViewportChange, true);\n\n        function allowRectChange(e) {\n            if (e.target.closest && !e.target.closest('.react-slct-menu')) {\n                return false;\n            }\n\n            return true;\n        }\n\n        function onViewportChange(e: Event) {\n            if (allowRectChange(e)) {\n                calcMenuOverlay();\n                calcMenuWrapper();\n            }\n        }\n\n        return () => {\n            window?.removeEventListener('resize', onViewportChange, true);\n            window?.removeEventListener('scroll', onViewportChange, true);\n        };\n    }, []);\n\n    const style = (() => {\n        const { menuLeft, menuTop, menuWidth } = props;\n        const menuHeight =\n            props.menuHeight || menuWrapperRect?.height || 'auto';\n        let width = menuWidth || menuOverlayRect?.width || 'auto';\n        const height = menuHeight || menuWrapperRect?.height || 'auto';\n        const top =\n            menuTop ??\n            getContainerTop({\n                rect: menuOverlayRect,\n                menuHeight: height\n            });\n        let left = menuLeft ?? menuOverlayRect?.left ?? 0;\n\n        if (window) {\n            const numWidth = Number(width);\n\n            if (numWidth > window.innerWidth) {\n                width = window.innerWidth - 20;\n            }\n\n            if (left + numWidth > window.innerWidth) {\n                left = Math.max(10, window.innerWidth - numWidth - 20);\n            }\n        }\n\n        if (left && top) {\n            return { top, left, width, height };\n        }\n\n        return undefined;\n    })();\n\n    return (\n        <MenuOverlay ref={menuOverlay}>\n            {document && style\n                ? createPortal(\n                      <MenuWrapper\n                          data-role=\"menu\"\n                          className={className}\n                          error={error}\n                          ref={menuWrapper}\n                          onClick={onClick}\n                          rect={menuOverlayRect}\n                          style={style}\n                      >\n                          {children}\n                      </MenuWrapper>,\n                      document.body\n                  )\n                : null}\n        </MenuOverlay>\n    );\n}\n"]}