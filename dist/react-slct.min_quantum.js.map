{"version":3,"sources":["src/menu.tsx"],"names":["search","emptyText","options","this","props","Math","min","max","length","rowHeight","labelComponent","selectedIndex","optionComponent","value","some","item","MenuWrapper","styled_components_1","default","div","el","getBoundingClientRect","menuWidth","menuHeight","error","onRef","onClick","children","window","e","target","closest","rect","exports","MenuContainer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;o8BAAA,MAAAA,OAAAA,EAAAC,UAAAA,EAAAC,QAAAA,GAAAC,KAAAC,sPAAAC,KAAAC,IAAAD,KAAAE,IAAAL,EAAAM,OAAAC,EAAAA,2XACA,MAAAP,QAAAA,EAAA,GAAAQ,eAAAA,EAAAC,cAAAA,EAAAC,gBAAAA,EAAAH,UAAAA,EAAAT,OAAAA,GAAAG,KAAAC,kbAAAD,KAAAC,MAAAS,MAAAC,KAAAC,GAAAA,IAAAF;;;;;;;;;;;;;;;;;k8BACA,MAAAG,EAAAC,EAAAC,QAAAC;;;;;;;uGAAAhB,KAAAiB,GAAAC,kZACA,MAAAC,UAAAA,EAAAC,WAAAA,EAAAC,MAAAA,EAAAC,MAAAA,EAAAC,QAAAA,EAAAC,SAAAA,GAAAxB,KAAAC,QAAA,wTAuBID,KAAAyB,2UACIC,EAAAC,OAAAC,UAAAF,EAAAC,OAAAC,QAAA,2FAAOC,eACP7B,KAAAiB,GAAAA,2BAAMY,oWAAgCC,EA2B5BC,cAiLlBA","sourcesContent":["import { bind } from 'lodash-decorators';\nimport * as React from 'react';\nimport { createPortal } from 'react-dom';\nimport { List } from 'react-virtualized/dist/commonjs/List';\nimport styled from 'styled-components';\nimport { SelectLabel } from './label';\nimport {\n    isArray,\n    getWindowInnerHeight,\n    getWindow,\n    getDocument,\n    equal\n} from './utils';\nimport {\n    Rect,\n    MenuComponentProps,\n    Option,\n    MenuContainerProps\n} from './typings';\nimport { OptionComponent } from './option';\n\ninterface MenuComponentState {\n    rect?: Rect;\n}\n\nfunction menuPosition(props: MenuContainerProps): 'top' | 'bottom' {\n    if (\n        !props.rect ||\n        props.rect.top + props.rect.height + (props.menuHeight || 185) <=\n            getWindowInnerHeight()\n    ) {\n        return 'bottom';\n    }\n\n    return 'top';\n}\n\nfunction getContainerTop(props: MenuContainerProps): string {\n    if (!props.rect) {\n        return '0px';\n    }\n\n    switch (menuPosition(props)) {\n        case 'top':\n            return `${props.rect.top - (props.menuHeight || 186)}px`;\n        case 'bottom':\n            return `${props.rect.top + props.rect.height - 1}px`;\n    }\n}\n``;\n\nexport class Menu extends React.PureComponent<\n    MenuComponentProps,\n    MenuComponentState\n> {\n    public static MenuContainer = styled.div.attrs(\n        (props: MenuContainerProps) => ({\n            style: {\n                top: getContainerTop(props),\n                left: `${props.rect ? props.rect.left : 0}px`,\n                width: `${\n                    props.rect ? props.menuWidth || props.rect.width : 0\n                }px`\n            }\n        })\n    )`\n        position: fixed;\n        z-index: 9999;\n        background: #fff;\n        box-sizing: border-box;\n        box-shadow: ${(props: MenuContainerProps) =>\n            menuPosition(props) === 'bottom'\n                ? '0 2px 5px rgba(0, 0, 0, 0.1)'\n                : '0 -2px 5px rgba(0, 0, 0, 0.1)'};\n\n        .ReactVirtualized__List {\n            border-width: 1px;\n            border-style: solid;\n            border-color: ${(props: MenuContainerProps) =>\n                props.error ? 'var(--react-slct-error-color)' : '#ccc'};\n            background-color: #fff;\n\n            &:focus {\n                outline: none;\n            }\n        }\n    `;\n\n    private static Empty = (props: { emptyText?: string }) => (\n        <OptionComponent.OptionItem>\n            <SelectLabel>\n                <i>{props.emptyText || 'No results'}</i>\n            </SelectLabel>\n        </OptionComponent.OptionItem>\n    );\n\n    private list: React.RefObject<List>;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n        this.list = React.createRef();\n    }\n\n    public componentDidUpdate(prevProps: MenuComponentProps): void {\n        const { search, emptyText, options } = this.props;\n        const { current: list } = this.list;\n\n        if (list) {\n            if (\n                search !== prevProps.search ||\n                emptyText !== prevProps.emptyText ||\n                options !== prevProps.options\n            ) {\n                list.forceUpdateGrid();\n            }\n        }\n    }\n\n    public render(): React.ReactNode {\n        const { open, options = [], selectedIndex, error } = this.props;\n        const { rect } = this.state;\n        const MenuContent = this.props.menuComponent;\n        const rowHeight = this.props.rowHeight || 32;\n        const menuHeight = 185;\n        const height = Math.min(\n            Math.max(options.length * rowHeight, rowHeight),\n            menuHeight\n        );\n\n        return open ? (\n            <MenuContainer\n                error={error}\n                menuHeight={height}\n                onRect={this.onRect}\n            >\n                {MenuContent ? (\n                    <MenuContent {...this.props} />\n                ) : (\n                    <List\n                        className=\"react-slct-menu-list\"\n                        ref={this.list}\n                        width={rect ? rect.width : 0}\n                        height={height}\n                        rowHeight={rowHeight}\n                        rowCount={options.length}\n                        rowRenderer={this.rowRenderer}\n                        scrollToIndex={selectedIndex}\n                        noRowsRenderer={this.emptyRenderer}\n                    />\n                )}\n            </MenuContainer>\n        ) : null;\n    }\n\n    @bind\n    private rowRenderer({ key, index, style }) {\n        const {\n            options = [],\n            labelComponent,\n            selectedIndex,\n            optionComponent,\n            rowHeight,\n            search\n        } = this.props;\n        const option = options[index];\n        const currentValue = isArray(this.props.value)\n            ? this.props.value\n            : [this.props.value];\n        const Component = optionComponent || OptionComponent;\n\n        return (\n            <div key={key} style={style}>\n                <Component\n                    option={option}\n                    labelComponent={labelComponent}\n                    height={rowHeight}\n                    active={currentValue.some(val => equal(val, option.value))}\n                    selected={selectedIndex === index}\n                    search={search}\n                    onSelect={this.onSelect}\n                />\n            </div>\n        );\n    }\n\n    @bind\n    private emptyRenderer() {\n        const { Empty } = Menu;\n\n        return <Empty emptyText={this.props.emptyText} />;\n    }\n\n    @bind\n    private onSelect(value: any, option: Option): void {\n        if (isArray(this.props.value)) {\n            const found = this.props.value.some(item => item === value);\n\n            let values;\n\n            if (found) {\n                values = this.props.value.filter(item => item !== value);\n            } else {\n                values = Array.from(new Set([...this.props.value, value]));\n            }\n\n            this.props.onSelect(values, option);\n        } else {\n            this.props.onSelect(value, option);\n        }\n    }\n\n    @bind\n    private onRect(rect?: Rect): void {\n        this.setState({ rect });\n    }\n}\n\nexport interface MenuContainerState {\n    rect?: Rect;\n}\n\nconst MenuWrapper = styled.div`\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    left: 0;\n    top: 0;\n    pointer-events: none;\n`;\n\nexport class MenuContainer extends React.PureComponent<\n    MenuContainerProps,\n    MenuContainerState\n> {\n    private el?: HTMLDivElement | null;\n\n    private get rect(): Rect | undefined {\n        if (this.el) {\n            const clientRect = this.el.getBoundingClientRect();\n\n            return {\n                left: Math.round(clientRect.left),\n                top: Math.round(clientRect.top),\n                width: Math.round(clientRect.width),\n                height: Math.round(clientRect.height)\n            };\n        }\n\n        return undefined;\n    }\n\n    private get window() {\n        return getWindow();\n    }\n\n    private get document() {\n        return getDocument();\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n    }\n\n    public componentDidMount(): void {\n        this.addListener();\n    }\n\n    public componentDidUpdate(_, prevState: MenuContainerState): void {\n        if (prevState.rect !== this.state.rect && this.props.onRect) {\n            this.props.onRect(this.state.rect);\n        }\n    }\n\n    public componentWillUnmount(): void {\n        this.removeListener();\n    }\n\n    public render(): React.ReactNode {\n        const {\n            menuWidth,\n            menuHeight,\n            error,\n            onRef,\n            onClick,\n            children\n        } = this.props;\n        const className = ['react-slct-menu', this.props.className]\n            .filter(c => c)\n            .join(' ');\n\n        return (\n            <MenuWrapper ref={this.onEl}>\n                {this.document\n                    ? createPortal(\n                          <Menu.MenuContainer\n                              data-role=\"menu\"\n                              className={className}\n                              error={error}\n                              rect={this.state.rect}\n                              menuWidth={menuWidth}\n                              menuHeight={menuHeight}\n                              ref={onRef}\n                              onClick={onClick}\n                          >\n                              {children}\n                          </Menu.MenuContainer>,\n                          this.document.body\n                      )\n                    : null}\n            </MenuWrapper>\n        );\n    }\n\n    private addListener(): void {\n        if (this.window) {\n            this.window.addEventListener('scroll', this.onViewportChange, true);\n            this.window.addEventListener('resize', this.onViewportChange, true);\n        }\n    }\n\n    private removeListener(): void {\n        if (this.window) {\n            this.window.removeEventListener(\n                'resize',\n                this.onViewportChange,\n                true\n            );\n            this.window.removeEventListener(\n                'scroll',\n                this.onViewportChange,\n                true\n            );\n        }\n    }\n\n    private allowRectChange(e): boolean {\n        if (e.target.closest && !e.target.closest('.react-slct-menu')) {\n            return false;\n        }\n\n        return true;\n    }\n\n    @bind\n    private onViewportChange(e): void {\n        if (this.allowRectChange(e)) {\n            this.setState({ rect: this.rect });\n        }\n    }\n\n    @bind\n    private onEl(el: HTMLDivElement | null): void {\n        this.el = el;\n\n        this.setState({\n            rect: this.rect\n        });\n    }\n}\n"]}