{"version":3,"sources":["src/utils.ts"],"names":["equal","valueA","valueB","equalCompareProp","undefined","toJSON","JSON","stringify","isArray","val","Array","map","getWindow","window","exports","toKey","value","jsonObject","getValueOptions","options","multi","filter","option","some","getDocument","document","getWindowInnerHeight","defaultHeight","innerHeight","keys","ARROW_UP","ARROW_DOWN","ENTER","TAB","ESC","BACKSPACE","SPACE"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBAuBA,SAAgBA,EACZC,EACAC,EACAC,EAAkC,MAElC,OAAIF,IAAWC,MAIVD,IAAWC,KAIM,iBAAXD,GAAyC,iBAAXC,OAEjCC,QAC6BC,IAA7BH,EAAOE,IACsB,OAA7BF,EAAOE,SACsBC,IAA7BF,EAAOC,IACsB,OAA7BD,EAAOC,IACPF,EAAOE,KAAsBD,EAAOC,MAKpCF,EAAOI,QAAUH,EAAOG,OAEpBC,KAAKC,UAAUN,EAAOI,YACtBC,KAAKC,UAAUL,EAAOG,UAIvBC,KAAKC,UAAUN,KAAYK,KAAKC,UAAUL,MAuBzD,SAAgBM,EAAiBC,GAC7B,QAAIC,MAAMF,QAAQC,OAKdA,IAAOA,EAAIE,KAenB,SAAgBC,IACZ,GAAsB,oBAAXC,OACP,OAAOA,wDAnGfC,EAAAC,MAAA,SACIC,EACAb,EAAkC,MAElC,GAAqB,iBAAVa,EACP,OAAOA,EAGX,GAAIA,GAA0B,iBAAVA,EAAoB,CACpC,MAAMC,EAAaD,EAAMX,OAASW,EAAMX,SAAWW,EAEnD,OAAIb,GAAoBc,EAAWd,GACxBc,EAAWd,GAGfG,KAAKC,UAAUU,GAG1B,OAAOX,KAAKC,UAAUS,IAG1BF,EAAAd,MAAAA,EAsCAc,EAAAI,gBAAA,SACIC,EACAH,EACAI,EACAjB,GAEA,OAAOgB,EAAQE,OAAOC,GACdd,EAAQQ,IAAUI,EACXJ,EAAMO,KAAKd,GACdT,EAAMsB,EAAON,MAAOP,EAAKN,IAGtBH,EAAMsB,EAAON,MAAOA,EAAOb,KAK9CW,EAAAN,QAAAA,EAaAM,EAAAU,YAAA,WACI,GAAwB,oBAAbC,SACP,OAAOA,UAMfX,EAAAF,UAAAA,EAQAE,EAAAY,qBAAA,SAAqCC,EAAgB,KACjD,MAAMd,EAASD,IAEf,OAAIC,EACOA,EAAOe,YAGXD,GAGEb,EAAAe,KAAO,CAChBC,SAAU,GACVC,WAAY,GACZC,MAAO,GACPC,IAAK,EACLC,IAAK,GACLC,UAAW,EACXC,MAAO","sourcesContent":["import { Option } from '.';\n\nexport function toKey(\n    value: any,\n    equalCompareProp: string | null = 'id'\n): string | number {\n    if (typeof value === 'string') {\n        return value;\n    }\n\n    if (value && typeof value === 'object') {\n        const jsonObject = value.toJSON ? value.toJSON() : value;\n\n        if (equalCompareProp && jsonObject[equalCompareProp]) {\n            return jsonObject[equalCompareProp];\n        }\n\n        return JSON.stringify(jsonObject);\n    }\n\n    return JSON.stringify(value);\n}\n\nexport function equal(\n    valueA: any,\n    valueB: any,\n    equalCompareProp: string | null = 'id'\n) {\n    if (valueA === valueB) {\n        return true;\n    }\n\n    if (!valueA || !valueB) {\n        return false;\n    }\n\n    if (typeof valueA === 'object' && typeof valueB === 'object') {\n        if (\n            equalCompareProp &&\n            valueA[equalCompareProp] !== undefined &&\n            valueA[equalCompareProp] !== null &&\n            valueB[equalCompareProp] !== undefined &&\n            valueB[equalCompareProp] !== null &&\n            valueA[equalCompareProp] === valueB[equalCompareProp]\n        ) {\n            return true;\n        }\n\n        if (valueA.toJSON && valueB.toJSON) {\n            return (\n                JSON.stringify(valueA.toJSON()) ===\n                JSON.stringify(valueB.toJSON())\n            );\n        }\n\n        return JSON.stringify(valueA) === JSON.stringify(valueB);\n    }\n\n    return false;\n}\n\nexport function getValueOptions(\n    options: Option[],\n    value: any,\n    multi: boolean | undefined,\n    equalCompareProp?: string | null\n) {\n    return options.filter(option => {\n        if (isArray(value) && multi) {\n            return value.some(val =>\n                equal(option.value, val, equalCompareProp)\n            );\n        } else {\n            return equal(option.value, value, equalCompareProp);\n        }\n    });\n}\n\nexport function isArray<T = any>(val: any): val is Array<T> {\n    if (Array.isArray(val)) {\n        return true;\n    }\n\n    // this is just a workaround for potential observable arrays\n    if (val && val.map) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getDocument(): Document | undefined {\n    if (typeof document !== 'undefined') {\n        return document;\n    }\n\n    return undefined;\n}\n\nexport function getWindow(): Window | undefined {\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n\n    return undefined;\n}\n\nexport function getWindowInnerHeight(defaultHeight = 700): number {\n    const window = getWindow();\n\n    if (window) {\n        return window.innerHeight;\n    }\n\n    return defaultHeight;\n}\n\nexport const keys = {\n    ARROW_UP: 38,\n    ARROW_DOWN: 40,\n    ENTER: 13,\n    TAB: 9,\n    ESC: 27,\n    BACKSPACE: 8,\n    SPACE: 32\n};\n"]}