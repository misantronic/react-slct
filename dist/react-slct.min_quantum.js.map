{"version":3,"sources":["src/menu.tsx"],"names":["React","$fsx","r","react_1","react_window_1","styled_components_1","label_1","menu_container_1","menu_row_1","option_1","utils_1","EmptyOptionItem","default","OptionComponent","OptionItem","Empty","props","createElement","SelectLabel","emptyText","exports","Menu","options","rowHeight","selectedIndex","open","error","menuWidth","menuHeight","rect","setRect","useState","list","useRef","width","height","Math","min","max","length","useEffect","current","undefined","scrollToItem","itemData","useMemo","Object","assign","onSelect","value","option","isArray","values","some","item","equal","filter","Array","from","Set","search","labelComponent","optionComponent","MenuContainer","onRect","MenuContent","menuComponent","itemCount","FixedSizeList","className","ref","itemSize","MenuRow","renderList"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gZAAA,MAAAA,EAAAC,EAAAC,EAAA,SACAC,EAAAF,EAAAC,EAAA,SACAE,EAAAH,EAAAC,EAAA,gBACAG,EAAAJ,EAAAC,EAAA,qBACAI,EAAAL,EAAAC,EAAA,GACAK,EAAAN,EAAAC,EAAA,GACAM,EAAAP,EAAAC,EAAA,GACAO,EAAAR,EAAAC,EAAA,GAEAQ,EAAAT,EAAAC,EAAA,GAEMS,EAAkBN,EAAAO,QAAOH,EAAAI,gBAAgBC;;;EAKzCC,EAAQC,GACVhB,EAAAiB,cAACN,EAAe,KACZX,EAAAiB,cAACX,EAAAY,YAAW,KACRlB,EAAAiB,cAAA,IAAA,KAAID,EAAMG,WAAa,gBAKnCC,EAAAC,KAAA,SAAqBL,GACjB,MAAMM,QACFA,EAAU,GAAAC,UACVA,EAAY,GAAAC,cACZA,EAAAC,KACAA,EAAAC,MACAA,EAAAC,UACAA,EAAAC,WACAA,GACAZ,GACGa,EAAMC,GAAW3B,EAAA4B,WAClBC,EAAO7B,EAAA8B,OAAsB,MAC7BC,EAAQP,IAAcE,GAAuB,SAAfA,EAAKK,MAAmBL,EAAKK,MAAQ,GACnEC,EAASC,KAAKC,IAChBD,KAAKE,IAAIhB,EAAQiB,OAAShB,EAAWA,GAAa,EAClDK,GAAc,KAGlBzB,EAAAqC,UAAU,KAEFf,GACAO,EAAKS,cACaC,IAAlBlB,IACmB,IAAnBA,GAEAQ,EAAKS,QAAQE,aAAanB,EAAe,WAE9C,CAACC,IACJ,MAAMmB,EAAW5C,EAAM6C,QAAQ,IAC3BC,OAAAC,OAAA,GACO/B,EAAK,CACRgC,SAAU,CAACC,EAAYC,KACnB,GAAIxC,EAAAyC,QAAQnC,EAAMiC,OAAQ,CACtB,MACMG,EADQpC,EAAMiC,MAAMI,KAAKC,GAAQ5C,EAAA6C,MAAMD,EAAML,IAE7CjC,EAAMiC,MAAMO,OAAOF,IAAS5C,EAAA6C,MAAMD,EAAML,IACxCQ,MAAMC,KAAK,IAAIC,IAAI,IAAI3C,EAAMiC,MAAOA,KAE1CjC,EAAMgC,SAASI,EAAQF,QAEvBlC,EAAMgC,SAASC,EAAOC,MAInC,CACC5B,EAAQiB,OACRvB,EAAM4C,OACN5C,EAAMO,UACNP,EAAMQ,cACNR,EAAM6C,eACN7C,EAAM8C,gBACN9C,EAAMiC,QA8BV,OAAOxB,EACHzB,EAAAiB,cAACV,EAAAwD,cAAa,CACVrC,MAAOA,EACPC,UAAWO,EACXN,WAAYO,EACZ6B,OAAQnC,GAAQC,EAAQD,IAhChC,SAAoBK,EAAeC,EAAgBZ,GAC/C,MAAM0C,EAAcjD,EAAMkD,cACpBC,EAAY7C,EAAQiB,OAE1B,OAAI0B,EACOjE,EAAAiB,cAACgD,EAAWnB,OAAAC,OAAA,GAAK/B,IAGV,IAAdmD,EACOnE,EAAAiB,cAACF,EAAK,CAACI,UAAWH,EAAMG,YAI/BnB,EAAAiB,cAACb,EAAAgE,cAAa,CACVC,UAAU,uBACVC,IAAKtC,EACLE,MAAOA,EACPC,OAAQA,EACRoC,SAAUhD,EACV4C,UAAWA,EACXvB,SAAUA,GAETpC,EAAAgE,SAYJC,CAAWvC,EAAOC,EAAQZ,IAE/B","sourcesContent":["import * as React from 'react';\nimport { useEffect, useRef, useState } from 'react';\nimport { FixedSizeList } from 'react-window';\nimport styled from 'styled-components';\nimport { SelectLabel } from './label';\nimport { MenuContainer } from './menu-container';\nimport { MenuRow } from './menu-row';\nimport { OptionComponent } from './option';\nimport { MenuComponentProps, Option, Rect } from './typings';\nimport { equal, isArray } from './utils';\n\nconst EmptyOptionItem = styled(OptionComponent.OptionItem)`\n    height: 100%;\n    border: 1px solid #ccc;\n`;\n\nconst Empty = (props: { emptyText?: string }) => (\n    <EmptyOptionItem>\n        <SelectLabel>\n            <i>{props.emptyText || 'No results'}</i>\n        </SelectLabel>\n    </EmptyOptionItem>\n);\n\nexport function Menu(props: MenuComponentProps) {\n    const {\n        options = [],\n        rowHeight = 32,\n        selectedIndex,\n        open,\n        error,\n        menuWidth,\n        menuHeight\n    } = props;\n    const [rect, setRect] = useState<Rect>();\n    const list = useRef<FixedSizeList>(null);\n    const width = menuWidth || (rect && rect.width !== 'auto' ? rect.width : 0);\n    const height = Math.min(\n        Math.max(options.length * rowHeight, rowHeight) + 2,\n        menuHeight || 185\n    );\n\n    useEffect(() => {\n        if (\n            open &&\n            list.current &&\n            selectedIndex !== undefined &&\n            selectedIndex !== -1\n        ) {\n            list.current.scrollToItem(selectedIndex, 'center');\n        }\n    }, [open]);\n    const itemData = React.useMemo(() => {\n        return {\n            ...props,\n            onSelect: (value: any, option: Option) => {\n                if (isArray(props.value)) {\n                    const found = props.value.some(item => equal(item, value));\n                    const values = found\n                        ? props.value.filter(item => !equal(item, value))\n                        : Array.from(new Set([...props.value, value]));\n\n                    props.onSelect(values, option);\n                } else {\n                    props.onSelect(value, option);\n                }\n            }\n        };\n    }, [\n        options.length,\n        props.search,\n        props.rowHeight,\n        props.selectedIndex,\n        props.labelComponent,\n        props.optionComponent,\n        props.value\n    ]);\n\n    function renderList(width: number, height: number, rowHeight: number) {\n        const MenuContent = props.menuComponent;\n        const itemCount = options.length;\n\n        if (MenuContent) {\n            return <MenuContent {...props} />;\n        }\n\n        if (itemCount === 0) {\n            return <Empty emptyText={props.emptyText} />;\n        }\n\n        return (\n            <FixedSizeList\n                className=\"react-slct-menu-list\"\n                ref={list}\n                width={width}\n                height={height}\n                itemSize={rowHeight}\n                itemCount={itemCount}\n                itemData={itemData}\n            >\n                {MenuRow}\n            </FixedSizeList>\n        );\n    }\n\n    return open ? (\n        <MenuContainer\n            error={error}\n            menuWidth={width}\n            menuHeight={height}\n            onRect={rect => setRect(rect)}\n        >\n            {renderList(width, height, rowHeight)}\n        </MenuContainer>\n    ) : null;\n}\n"]}