{"version":3,"sources":["src/menu.tsx","src/menu-container.tsx","src/menu-row.tsx"],"names":["React","$fsx","r","react_1","react_window_1","styled_components_1","label_1","menu_container_1","menu_row_1","option_1","utils_1","EmptyOptionItem","default","OptionComponent","OptionItem","Empty","props","createElement","SelectLabel","emptyText","exports","Menu","options","rowHeight","selectedIndex","open","error","menuWidth","menuHeight","rect","setRect","useState","list","useRef","width","height","Math","min","max","length","useEffect","current","undefined","scrollToItem","itemData","useMemo","Object","assign","onSelect","value","option","isArray","values","some","item","equal","filter","Array","from","Set","search","labelComponent","optionComponent","MenuContainer","onRect","MenuContent","menuComponent","itemCount","FixedSizeList","className","ref","itemSize","MenuRow","renderList","clientRect","this","menuOverlay","getBoundingClientRect","menuWrapper","window","Number","state","allowRectChange","e","el","onRef","memo","index","style","data","currentValue","Component","active","val","selected","areEqual"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useEffect, useRef, useState } from 'react';\nimport { FixedSizeList } from 'react-window';\nimport styled from 'styled-components';\nimport { SelectLabel } from './label';\nimport { MenuContainer } from './menu-container';\nimport { MenuRow } from './menu-row';\nimport { OptionComponent } from './option';\nimport { MenuComponentProps, Option, Rect } from './typings';\nimport { equal, isArray } from './utils';\n\nconst EmptyOptionItem = styled(OptionComponent.OptionItem)`\n    height: 100%;\n    border: 1px solid #ccc;\n`;\n\nconst Empty = (props: { emptyText?: string }) => (\n    <EmptyOptionItem>\n        <SelectLabel>\n            <i>{props.emptyText || 'No results'}</i>\n        </SelectLabel>\n    </EmptyOptionItem>\n);\n\nexport function Menu(props: MenuComponentProps) {\n    const {\n        options = [],\n        rowHeight = 32,\n        selectedIndex,\n        open,\n        error,\n        menuWidth,\n        menuHeight\n    } = props;\n    const [rect, setRect] = useState<Rect>();\n    const list = useRef<FixedSizeList>(null);\n    const width = menuWidth || (rect && rect.width !== 'auto' ? rect.width : 0);\n    const height = Math.min(\n        Math.max(options.length * rowHeight, rowHeight),\n        menuHeight || 185\n    );\n\n    useEffect(() => {\n        if (\n            open &&\n            list.current &&\n            selectedIndex !== undefined &&\n            selectedIndex !== -1\n        ) {\n            list.current.scrollToItem(selectedIndex, 'center');\n        }\n    }, [open]);\n    const itemData = React.useMemo(() => {\n        return {\n            ...props,\n            onSelect: (value: any, option: Option) => {\n                if (isArray(props.value)) {\n                    const found = props.value.some(item => equal(item, value));\n                    const values = found\n                        ? props.value.filter(item => !equal(item, value))\n                        : Array.from(new Set([...props.value, value]));\n\n                    props.onSelect(values, option);\n                } else {\n                    props.onSelect(value, option);\n                }\n            }\n        };\n    }, [\n        options.length,\n        props.search,\n        props.rowHeight,\n        props.selectedIndex,\n        props.labelComponent,\n        props.optionComponent,\n        props.value\n    ]);\n\n    function renderList(width: number, height: number, rowHeight: number) {\n        const MenuContent = props.menuComponent;\n        const itemCount = options.length;\n\n        if (MenuContent) {\n            return <MenuContent {...props} />;\n        }\n\n        if (itemCount === 0) {\n            return <Empty emptyText={props.emptyText} />;\n        }\n\n        return (\n            <FixedSizeList\n                className=\"react-slct-menu-list\"\n                ref={list}\n                width={width}\n                height={height}\n                itemSize={rowHeight}\n                itemCount={itemCount}\n                itemData={itemData}\n            >\n                {MenuRow}\n            </FixedSizeList>\n        );\n    }\n\n    return open ? (\n        <MenuContainer\n            error={error}\n            menuWidth={width}\n            menuHeight={height}\n            onRect={rect => setRect(rect)}\n        >\n            {renderList(width, height, rowHeight)}\n        </MenuContainer>\n    ) : null;\n}\n","import { bind, debounce } from 'lodash-decorators';\nimport * as React from 'react';\nimport { createPortal } from 'react-dom';\nimport styled from 'styled-components';\nimport { MenuContainerProps, Rect } from './typings';\nimport { getDocument, getWindow, getWindowInnerHeight } from './utils';\n\nexport interface MenuContainerState {\n    menuOverlay?: Rect;\n    menuWrapper?: Rect;\n}\n\ninterface MenuWrapperProps {\n    rect?: Rect;\n    menuHeight?: MenuContainerProps['menuHeight'];\n    error?: boolean;\n}\n\nfunction menuPosition({\n    rect,\n    menuHeight = 186\n}: MenuWrapperProps): 'top' | 'bottom' {\n    if (!rect) {\n        return 'bottom';\n    }\n\n    const { height } = rect;\n\n    if (height === 'auto' || menuHeight === 'auto') {\n        return 'bottom';\n    }\n\n    if (rect.top + height + menuHeight <= getWindowInnerHeight()) {\n        return 'bottom';\n    }\n\n    return 'top';\n}\n\nfunction getContainerTop(props: MenuWrapperProps): number {\n    const { rect } = props;\n\n    if (!rect) {\n        return 0;\n    }\n\n    const menuHeight = (props.menuHeight !== 'auto' && props.menuHeight) || 186;\n    const height = rect.height === 'auto' ? 32 : rect.height;\n\n    switch (menuPosition(props)) {\n        case 'top':\n            return rect.top - menuHeight + 1;\n        case 'bottom':\n            return rect.top + height - 1;\n    }\n}\n\nconst MenuOverlay = styled.div`\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    left: 0;\n    top: 0;\n    pointer-events: none;\n`;\n\nconst MenuWrapper = styled.div`\n    position: fixed;\n    z-index: 9999;\n    background: #fff;\n    box-sizing: border-box;\n    box-shadow: ${(props: MenuWrapperProps) =>\n        menuPosition(props) === 'bottom'\n            ? '0 2px 5px rgba(0, 0, 0, 0.1)'\n            : '0 -2px 5px rgba(0, 0, 0, 0.1)'};\n\n    .react-slct-menu-list {\n        box-sizing: border-box;\n        border-width: 1px;\n        border-style: solid;\n        border-color: ${(props: MenuWrapperProps) =>\n            props.error ? 'var(--react-slct-error-color)' : '#ccc'};\n        background-color: #fff;\n\n        &:focus {\n            outline: none;\n        }\n    }\n`;\n\nexport class MenuContainer extends React.PureComponent<\n    MenuContainerProps,\n    MenuContainerState\n> {\n    private menuOverlay?: HTMLDivElement | null;\n    private menuWrapper?: HTMLDivElement | null;\n\n    private get menuOverlayRect(): Rect | undefined {\n        if (this.menuOverlay) {\n            const clientRect = this.menuOverlay.getBoundingClientRect();\n\n            return {\n                left: Math.round(clientRect.left),\n                top: Math.round(clientRect.top),\n                width: Math.round(clientRect.width),\n                height: Math.round(clientRect.height)\n            };\n        }\n\n        return undefined;\n    }\n\n    private get menuWrapperRect(): Rect | undefined {\n        if (this.menuWrapper) {\n            const clientRect = this.menuWrapper.getBoundingClientRect();\n\n            return {\n                left: Math.round(clientRect.left),\n                top: Math.round(clientRect.top),\n                width: Math.round(clientRect.width),\n                height: Math.round(clientRect.height)\n            };\n        }\n\n        return undefined;\n    }\n\n    private get style(): Rect {\n        const { window } = this;\n        const { menuLeft, menuTop, menuWidth } = this.props;\n        const { menuOverlay, menuWrapper } = this.state;\n        const menuHeight =\n            this.props.menuHeight ||\n            (menuWrapper ? menuWrapper.height : 'auto');\n        let width = menuWidth || (menuOverlay ? menuOverlay.width : 'auto');\n        const height =\n            menuHeight || (menuWrapper ? menuWrapper.height : 'auto');\n        const top =\n            menuTop !== undefined\n                ? menuTop\n                : getContainerTop({\n                      rect: menuOverlay,\n                      menuHeight: height\n                  });\n        let left =\n            menuLeft !== undefined\n                ? menuLeft\n                : menuOverlay\n                ? menuOverlay.left\n                : 0;\n\n        if (window) {\n            const numWidth = Number(width);\n\n            if (numWidth > window.innerWidth) {\n                width = window.innerWidth - 20;\n            }\n\n            if (left + numWidth > window.innerWidth) {\n                left = Math.max(10, window.innerWidth - numWidth - 20);\n            }\n        }\n\n        return { top, left, width, height };\n    }\n\n    private get window() {\n        return getWindow();\n    }\n\n    private get document() {\n        return getDocument();\n    }\n\n    constructor(props: MenuContainerProps) {\n        super(props);\n\n        this.state = {};\n    }\n\n    public componentDidMount(): void {\n        this.addListener();\n    }\n\n    public componentDidUpdate(_: any, prevState: MenuContainerState): void {\n        const { menuOverlay, menuWrapper } = this.state;\n\n        if (this.props.onRect) {\n            if (\n                prevState.menuOverlay !== menuOverlay ||\n                prevState.menuWrapper !== menuWrapper\n            ) {\n                this.props.onRect(menuOverlay, menuWrapper);\n            }\n        }\n    }\n\n    public componentWillUnmount(): void {\n        this.removeListener();\n    }\n\n    public render(): React.ReactNode {\n        const { error, onClick, children } = this.props;\n        const className = ['react-slct-menu', this.props.className]\n            .filter(c => c)\n            .join(' ');\n\n        return (\n            <MenuOverlay ref={this.onMenuOverlay}>\n                {this.document\n                    ? createPortal(\n                          <MenuWrapper\n                              data-role=\"menu\"\n                              className={className}\n                              error={error}\n                              ref={this.onMenuWrapper}\n                              onClick={onClick}\n                              rect={this.state.menuOverlay}\n                              style={this.style}\n                          >\n                              {children}\n                          </MenuWrapper>,\n                          this.document.body\n                      )\n                    : null}\n            </MenuOverlay>\n        );\n    }\n\n    private addListener(): void {\n        if (this.window) {\n            this.window.addEventListener('scroll', this.onViewportChange, true);\n            this.window.addEventListener('resize', this.onViewportChange, true);\n        }\n    }\n\n    private removeListener(): void {\n        if (this.window) {\n            this.window.removeEventListener(\n                'resize',\n                this.onViewportChange,\n                true\n            );\n            this.window.removeEventListener(\n                'scroll',\n                this.onViewportChange,\n                true\n            );\n        }\n    }\n\n    private allowRectChange(e): boolean {\n        if (e.target.closest && !e.target.closest('.react-slct-menu')) {\n            return false;\n        }\n\n        return true;\n    }\n\n    @bind\n    private onViewportChange(e): void {\n        if (this.allowRectChange(e)) {\n            this.setState({\n                menuOverlay: this.menuOverlayRect,\n                menuWrapper: this.menuWrapperRect\n            });\n        }\n    }\n\n    @bind\n    private onMenuOverlay(el: HTMLDivElement | null): void {\n        this.menuOverlay = el;\n\n        if (this.menuOverlay) {\n            this.setState({\n                menuOverlay: this.menuOverlayRect\n            });\n        }\n    }\n\n    @bind\n    @debounce(16)\n    private onMenuWrapper(el: HTMLDivElement | null): void {\n        if (el && this.props.onRef) {\n            this.props.onRef(el);\n        }\n\n        this.menuWrapper = el;\n\n        if (this.menuWrapper) {\n            this.setState({\n                menuWrapper: this.menuWrapperRect\n            });\n        }\n    }\n}\n","import * as React from 'react';\nimport { CSSProperties, memo } from 'react';\nimport { areEqual } from 'react-window';\nimport { OptionComponent } from './option';\nimport { MenuComponentProps } from './typings';\nimport { equal, isArray } from './utils';\n\ninterface MenuRowProps {\n    index: number;\n    style: CSSProperties;\n    data: MenuComponentProps;\n}\n\nexport const MenuRow = memo(({ index, style, data }: MenuRowProps) => {\n    const {\n        options = [],\n        labelComponent,\n        selectedIndex,\n        optionComponent,\n        rowHeight,\n        search,\n        onSelect\n    } = data;\n    const option = options[index];\n    const currentValue = isArray(data.value) ? data.value : [data.value];\n    const Component = optionComponent || OptionComponent;\n\n    return (\n        <div style={style}>\n            <Component\n                option={option}\n                labelComponent={labelComponent}\n                height={rowHeight}\n                active={currentValue.some(val => equal(val, option.value))}\n                selected={selectedIndex === index}\n                search={search}\n                onSelect={onSelect}\n            />\n        </div>\n    );\n}, areEqual);\n"]}