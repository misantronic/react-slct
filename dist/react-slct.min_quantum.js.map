{"version":3,"sources":["src/index.tsx","src/value.tsx","src/value-component-multi.tsx","src/option.tsx","src/global-stylings.tsx"],"names":["utils_1","$fsx","r","typings_1","search","this","state","NativeSelect","Select","getValueOptions","options","props","value","multi","valueOptions","map","option","findIndex","equal","setState","blindTextTimeout","setTimeout","blindText","exports","window","getWindow","disabled","clearable","open","mobile","focused","error","showClearer","Boolean","length","searchAtStart","searchAtEnd","searchable","onSearchFocus","onSearchBlur","canSearch","placeholder","labelComponent","valueComponentSingle","valueComponentMulti","onOptionRemove","e","preventDefault","Value","TagContainer","ValueComponentMulti","onRemove","Label","label_1","SelectLabel","React","createElement","Object","assign","className","Remove","onClick","label","styled_components_1","default","div","lodash_decorators_1","OptionComponent","PureComponent","[object Object]","OptionItem","active","selected","height","filter","v","join","onSelect","tslib_1","__decorate","bind","react_dom_1","id","document","getElementById","ReactSlctStyle","createGlobalStyle","reactSlctDiv","body","appendChild","render","create"],"mappings":"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","sourcesContent":["import { bind, debounce } from 'lodash-decorators';\nimport * as React from 'react';\nimport styled from 'styled-components';\nimport { Value } from './value';\nimport { Menu, MenuContainer } from './menu';\nimport {\n    isArray,\n    keys,\n    getDocument,\n    getValueOptions,\n    equal,\n    toKey\n} from './utils';\nimport {\n    SelectProps,\n    SelectState,\n    MenuComponentProps,\n    Option\n} from './typings';\nimport './global-stylings';\n\nexport { SelectProps, Menu, MenuComponentProps, Option, keys };\n\nexport class Select<T = any> extends React.PureComponent<\n    SelectProps<T>,\n    SelectState\n> {\n    private static Container = styled.div`\n        display: flex;\n        position: relative;\n        cursor: default;\n        width: 100%;\n        box-sizing: border-box;\n        pointer-events: ${(props: { disabled?: boolean }) =>\n            props.disabled ? 'none' : 'auto'};\n        opacity: ${(props: { disabled?: boolean }) =>\n            props.disabled ? 0.75 : 1};\n        user-select: none;\n    `;\n\n    private static NativeSelect = styled.select`\n        display: block;\n        z-index: ${(props: { native?: boolean }) =>\n            props.native ? '1' : 'auto'};\n        opacity: 0;\n        position: absolute;\n        right: 0;\n        top: 0;\n        width: 100%;\n        height: 100%;\n    `;\n\n    private nativeSelect: React.RefObject<HTMLSelectElement>;\n    private container: HTMLDivElement | null = null;\n    private blindTextTimeout!: number;\n\n    constructor(props: SelectProps) {\n        super(props);\n\n        this.nativeSelect = React.createRef();\n\n        this.state = {\n            open: false,\n            blindText: ''\n        };\n    }\n\n    private get options(): Option<T>[] {\n        const { search } = this.state;\n        const { creatable, onCreateText } = this.props;\n        let options = this.props.options || [];\n        const showCreate =\n            creatable &&\n            !options.some(option => option.value === (search as any));\n\n        if (search) {\n            options = options.filter(option =>\n                option.label.toLowerCase().includes(search.toLowerCase())\n            );\n        }\n\n        if (showCreate && search) {\n            options = [\n                {\n                    label: onCreateText\n                        ? onCreateText(search)\n                        : `Create \"${search}\"`,\n                    value: search as any,\n                    creatable: true\n                },\n                ...options\n            ];\n        }\n\n        return options;\n    }\n\n    private get document() {\n        return getDocument();\n    }\n\n    private optionIsCreatable(option: Option<T>): boolean {\n        return (\n            this.props.creatable &&\n            option.creatable &&\n            Boolean(this.props.onCreate && this.state.search)\n        );\n    }\n\n    public componentDidUpdate(_, prevState: SelectState): void {\n        if (\n            this.state.blindText &&\n            prevState.blindText !== this.state.blindText\n        ) {\n            this.handleBlindTextUpdate();\n        }\n    }\n\n    public componentWillUnmount(): void {\n        this.removeDocumentListener();\n    }\n\n    public render(): React.ReactNode {\n        const { Container } = Select;\n        const {\n            className,\n            options,\n            creatable,\n            clearable,\n            placeholder,\n            value,\n            disabled,\n            error,\n            menuComponent,\n            labelComponent,\n            optionComponent,\n            valueComponentSingle,\n            valueComponentMulti,\n            arrowComponent,\n            multi,\n            native,\n            emptyText,\n            rowHeight\n        } = this.props;\n        const { open, search, selectedIndex, focused } = this.state;\n        const searchable = this.props.searchable || creatable;\n\n        if (this.props.children) {\n            return this.renderChildren();\n        }\n\n        const classNames = [\n            'react-slct',\n            className,\n            error && 'has-error'\n        ].filter(c => Boolean(c));\n\n        return (\n            <Container\n                className={classNames.join(' ')}\n                disabled={disabled}\n                ref={this.onContainerRef as any}\n                data-role={this.props['data-role']}\n                onKeyUp={this.onKeyUp}\n                onKeyDown={this.onKeyDown}\n            >\n                {this.renderNativeSelect()}\n                <Value\n                    clearable={clearable}\n                    searchable={searchable}\n                    open={open}\n                    disabled={disabled}\n                    multi={multi}\n                    mobile={native}\n                    focused={focused}\n                    options={options}\n                    placeholder={placeholder}\n                    error={error}\n                    value={value}\n                    search={search}\n                    labelComponent={labelComponent}\n                    valueComponentSingle={valueComponentSingle}\n                    valueComponentMulti={valueComponentMulti}\n                    arrowComponent={arrowComponent}\n                    onClear={this.onClear}\n                    onClick={this.toggleMenu}\n                    onSearch={this.onSearch}\n                    onSearchFocus={this.onSearchFocus}\n                    onSearchBlur={this.onSearchBlur}\n                    onOptionRemove={this.onOptionRemove}\n                />\n                <Menu\n                    open={open}\n                    options={this.options}\n                    value={value}\n                    multi={multi}\n                    error={error}\n                    search={search}\n                    selectedIndex={selectedIndex}\n                    menuComponent={menuComponent}\n                    labelComponent={labelComponent}\n                    optionComponent={optionComponent}\n                    emptyText={emptyText}\n                    rowHeight={rowHeight}\n                    onSelect={this.onOptionSelect}\n                />\n            </Container>\n        );\n    }\n\n    private renderNativeSelect(): React.ReactNode {\n        const { NativeSelect } = Select;\n        const { native, placeholder, multi, disabled } = this.props;\n        const dataRole = this.props['data-role']\n            ? `select-${this.props['data-role']}`\n            : undefined;\n        const clearable = this.props.clearable && native;\n        const value = isArray(this.props.value)\n            ? this.props.value.map(this.findOptionIndex)\n            : this.findOptionIndex(this.props.value || '');\n\n        return (\n            <NativeSelect\n                ref={this.nativeSelect as any}\n                multiple={multi}\n                value={value}\n                disabled={disabled}\n                native={native}\n                tabIndex={-1}\n                data-role={dataRole}\n                onChange={this.onChangeNativeSelect}\n            >\n                <option value=\"\" disabled={!clearable}>\n                    {placeholder}\n                </option>\n                {this.options.map((option, i) => (\n                    <option\n                        key={toKey(option.value)}\n                        value={`${i}`}\n                        disabled={option.disabled}\n                    >\n                        {option.label}\n                    </option>\n                ))}\n            </NativeSelect>\n        );\n    }\n\n    private renderChildren(): React.ReactNode {\n        const { options, placeholder, multi, children } = this.props;\n        const { open, search } = this.state;\n        const valueOptions = getValueOptions(options || [], this.props.value);\n        const value: T | T[] | undefined = !multi\n            ? this.props.value\n            : valueOptions.map(option => option.value);\n        const showPlaceholder =\n            !search &&\n            (isArray(value)\n                ? value.length === 0\n                : value === undefined || value === null);\n\n        if (!children) {\n            return null;\n        }\n\n        return children({\n            options: this.options,\n            open,\n            value,\n            MenuContainer,\n            placeholder: showPlaceholder ? placeholder : undefined,\n            onToggle: () => this.toggleMenu(),\n            onRef: ref => (this.container = ref)\n        });\n    }\n\n    @bind\n    private toggleMenu(): void {\n        const open = !this.state.open;\n\n        if (open) {\n            this.openMenu();\n        } else {\n            this.closeMenu();\n        }\n    }\n\n    @debounce(0)\n    private openMenu(): void {\n        const selectedIndex = this.options.findIndex(option =>\n            equal(option.value, this.props.value)\n        );\n\n        this.setState({ open: true, search: undefined, selectedIndex }, () => {\n            if (this.props.onOpen) {\n                this.props.onOpen();\n            }\n\n            this.addDocumentListener();\n        });\n    }\n\n    @debounce(0)\n    private closeMenu(callback = () => {}): void {\n        this.removeDocumentListener();\n        this.setState(\n            {\n                open: false,\n                search: undefined,\n                selectedIndex: undefined\n            },\n            () => {\n                if (this.props.onClose) {\n                    this.props.onClose();\n                }\n\n                callback();\n            }\n        );\n    }\n\n    private createOption(value: string, cb?: () => void): void {\n        const { onCreate } = this.props;\n\n        if (onCreate) {\n            this.closeMenu(() => {\n                onCreate(value);\n\n                if (cb) {\n                    cb();\n                }\n            });\n        }\n    }\n\n    private addDocumentListener(): void {\n        this.removeDocumentListener();\n\n        if (this.document) {\n            document.addEventListener('click', this.onDocumentClick);\n        }\n    }\n\n    private removeDocumentListener(): void {\n        if (this.document) {\n            document.removeEventListener('click', this.onDocumentClick);\n        }\n    }\n\n    @bind\n    private cleanBlindText(): void {\n        this.blindTextTimeout = setTimeout(\n            () => this.setState({ blindText: '' }),\n            700\n        );\n    }\n\n    @bind\n    private findOptionIndex(val: any) {\n        let index = this.options.findIndex(option => option.value === val);\n\n        if (index === -1) {\n            if (typeof val === 'object') {\n                index = this.options.findIndex(option => {\n                    if (typeof option.value === 'object') {\n                        return (\n                            JSON.stringify(option.value) === JSON.stringify(val)\n                        );\n                    }\n\n                    return false;\n                });\n            }\n\n            if (index === -1) {\n                return '';\n            }\n        }\n\n        return String(index);\n    }\n\n    @bind\n    private onChangeNativeSelect(\n        e: React.SyntheticEvent<HTMLSelectElement>\n    ): void {\n        const { onChange, multi } = this.props;\n        const { currentTarget } = e;\n\n        if (onChange) {\n            if (currentTarget.value === '') {\n                this.onClear();\n            } else {\n                const values = Array.from(currentTarget.selectedOptions).map(\n                    htmlOption => this.options[htmlOption.index - 1].value\n                );\n\n                if (multi) {\n                    onChange(values as any);\n                } else {\n                    onChange(values[0] as any);\n                }\n            }\n        }\n    }\n\n    @bind\n    private onSearchFocus(): void {\n        const { open, focused } = this.state;\n\n        if (!open && !focused && !this.props.native) {\n            this.openMenu();\n        }\n\n        this.setState({ focused: true });\n    }\n\n    @bind\n    private onSearchBlur(): void {\n        this.setState({ focused: false });\n    }\n\n    @bind\n    private onOptionSelect(value: any | any[], option?: Option<T>): void {\n        const { current } = this.nativeSelect;\n        const { onChange, creatable } = this.props;\n        let optionWasCreated = false;\n\n        const selectOnNative = () => {\n            if (current) {\n                current.value = isArray(value)\n                    ? (value.map(this.findOptionIndex) as any)\n                    : this.findOptionIndex(value);\n            }\n\n            this.setState({ focused: true }, () =>\n                this.closeMenu(() => onChange && onChange(value, option))\n            );\n        };\n\n        if (creatable) {\n            const createValue = (val: any) => {\n                const option = this.options.find(\n                    option =>\n                        this.optionIsCreatable(option) && option.value === val\n                );\n\n                if (option) {\n                    optionWasCreated = true;\n                    this.createOption(option.value as any, selectOnNative);\n                }\n            };\n\n            if (isArray(value)) {\n                value.map(createValue);\n            } else {\n                createValue(value);\n            }\n        }\n\n        if (!optionWasCreated) {\n            selectOnNative();\n        }\n    }\n\n    @bind\n    private onOptionRemove(value: any): void {\n        if (isArray(this.props.value)) {\n            const values = this.props.value.filter(val => !equal(val, value));\n\n            this.onOptionSelect(values);\n        }\n    }\n\n    @bind\n    private onClear(): void {\n        this.onOptionSelect(this.props.multi ? [] : undefined);\n    }\n\n    @bind\n    private onSearch(search: string): void {\n        this.setState({ search }, () => {\n            if (this.options.length === 1 || (this.props.creatable && search)) {\n                this.setState({ selectedIndex: 0 });\n            } else {\n                this.setState({ selectedIndex: undefined });\n            }\n\n            if (this.props.onSearch) {\n                this.props.onSearch(search);\n            }\n        });\n    }\n\n    @bind\n    private onDocumentClick(e): void {\n        const { target } = e;\n\n        if (target.closest('.react-slct-menu')) {\n            return;\n        }\n\n        if (this.container && !this.container.contains(target)) {\n            this.closeMenu();\n        }\n    }\n\n    @bind\n    private onKeyDown({ keyCode }: React.KeyboardEvent): void {\n        const { searchable, creatable } = this.props;\n\n        switch (keyCode) {\n            case keys.TAB:\n                if (this.state.open) {\n                    this.closeMenu();\n                }\n                break;\n        }\n\n        if (!searchable && !creatable) {\n            this.handleBlindText(keyCode);\n        }\n    }\n\n    @bind\n    private onKeyUp({ keyCode }: React.KeyboardEvent): void {\n        const { search, open } = this.state;\n        const { value } = this.props;\n        let selectedIndex = this.state.selectedIndex;\n\n        switch (keyCode) {\n            case keys.ARROW_UP:\n                if (open) {\n                    if (selectedIndex !== undefined) {\n                        selectedIndex = selectedIndex - 1;\n\n                        if (selectedIndex < 0) {\n                            selectedIndex = this.options.length - 1;\n                        }\n                    }\n\n                    this.setState({ selectedIndex });\n                } else {\n                    this.openMenu();\n                }\n                break;\n            case keys.ARROW_DOWN:\n                if (open) {\n                    if (\n                        selectedIndex === undefined ||\n                        selectedIndex === this.options.length - 1\n                    ) {\n                        selectedIndex = 0;\n                    } else {\n                        selectedIndex = selectedIndex + 1;\n                    }\n\n                    this.setState({ selectedIndex });\n                } else {\n                    this.openMenu();\n                }\n                break;\n            case keys.ENTER:\n                if (\n                    this.state.selectedIndex === 0 &&\n                    this.optionIsCreatable(this.options[0])\n                ) {\n                    this.createOption(search!);\n                } else if (\n                    selectedIndex !== undefined &&\n                    this.options[selectedIndex]\n                ) {\n                    const newValue = this.options[selectedIndex].value;\n\n                    this.onOptionSelect(\n                        isArray(value) ? [...value, newValue] : newValue\n                    );\n                }\n                break;\n            case keys.ESC:\n                if (open) {\n                    this.closeMenu();\n                }\n                break;\n        }\n    }\n\n    private handleBlindText(keyCode: number): void {\n        const { blindText } = this.state;\n\n        if (keyCode === keys.BACKSPACE && blindText.length) {\n            clearTimeout(this.blindTextTimeout);\n\n            this.setState(\n                {\n                    blindText: blindText.slice(0, blindText.length - 1)\n                },\n                this.cleanBlindText\n            );\n        } else if (keyCode === keys.SPACE) {\n            clearTimeout(this.blindTextTimeout);\n\n            this.setState(\n                {\n                    blindText: blindText + ' '\n                },\n                this.cleanBlindText\n            );\n        } else {\n            const key = String.fromCodePoint(keyCode);\n\n            if (/\\w/.test(key)) {\n                clearTimeout(this.blindTextTimeout);\n\n                this.setState(\n                    {\n                        blindText: blindText + key\n                    },\n                    this.cleanBlindText\n                );\n            }\n        }\n    }\n\n    @bind\n    private onContainerRef(el: HTMLDivElement | null): void {\n        this.container = el;\n    }\n\n    private handleBlindTextUpdate(): void {\n        const { open, blindText } = this.state;\n        const { multi } = this.props;\n\n        if (open) {\n            const selectedIndex = this.options.findIndex(option =>\n                option.label.toLowerCase().startsWith(blindText.toLowerCase())\n            );\n\n            if (selectedIndex >= 0) {\n                this.setState({ selectedIndex });\n            }\n        } else if (!multi) {\n            if (blindText) {\n                const option = this.options.find(option =>\n                    option.label\n                        .toLowerCase()\n                        .startsWith(blindText.toLowerCase())\n                );\n\n                if (option) {\n                    this.onOptionSelect(option.value);\n                }\n            } else {\n                this.onOptionSelect(undefined);\n            }\n        }\n    }\n}\n","import { bind } from 'lodash-decorators';\nimport * as React from 'react';\nimport styled from 'styled-components';\nimport { SelectLabel } from './label';\nimport { keys, getValueOptions, getWindow, toKey } from './utils';\nimport { SelectProps, Option } from './typings';\nimport { ValueComponentMulti } from './value-component-multi';\nimport { ValueComponentSingle } from './value-component-single';\n\nexport interface ValueProps {\n    options: SelectProps['options'];\n    value: SelectProps['value'];\n    placeholder: SelectProps['placeholder'];\n    clearable: SelectProps['clearable'];\n    searchable: SelectProps['searchable'];\n    labelComponent: SelectProps['labelComponent'];\n    valueComponentSingle: SelectProps['valueComponentSingle'];\n    valueComponentMulti: SelectProps['valueComponentMulti'];\n    arrowComponent: SelectProps['arrowComponent'];\n    multi: SelectProps['multi'];\n    mobile: SelectProps['native'];\n    disabled: SelectProps['disabled'];\n    error: SelectProps['error'];\n    search?: string;\n    open: boolean;\n    focused?: boolean;\n    onClear(): void;\n    onClick(): void;\n    onSearch(search: string): void;\n    onSearchFocus(): void;\n    onSearchBlur(): void;\n    onOptionRemove(value: any): void;\n}\n\ninterface SearchProps {\n    canSearch?: boolean;\n}\n\ninterface ValueContainerProps {\n    mobile?: boolean;\n    disabled?: boolean;\n    focused?: boolean;\n    error?: boolean;\n}\n\ninterface ValueLeftProps {\n    multi?: boolean;\n    hasValue?: boolean;\n}\n\nconst Button = styled.button`\n    background: transparent;\n    border: none;\n    margin: 0;\n    font-size: 20px;\n    padding: 0;\n    line-height: 1;\n    cursor: pointer;\n\n    &:focus {\n        outline: none;\n    }\n`;\n\nconst ArrowButton = styled(Button)`\n    font-size: 12px;\n    color: #ccc;\n    transform: translateY(2px);\n\n    &:hover {\n        color: #333;\n    }\n`;\n\nconst ValueContainer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    flex: 1;\n    min-height: 32px;\n    pointer-events: ${(props: ValueContainerProps) =>\n        props.mobile || props.disabled ? 'none' : 'auto'};\n    padding: 5px 10px;\n    background: #fff;\n    cursor: default;\n    border-width: 1px;\n    border-style: solid;\n    border-color: ${(props: ValueContainerProps) =>\n        props.error ? 'var(--react-slct-error-color)' : '#ccc'};\n    z-index: 0;\n    box-sizing: border-box;\n    max-width: 100%;\n    box-shadow: ${(props: ValueContainerProps) =>\n        props.focused ? 'rgba(0, 0, 0, 0.15) 0 0 2px' : 'none'};\n`;\n\nconst ValueLeft = styled.div`\n    display: flex;\n    flex: 1;\n    align-items: center;\n    flex-wrap: ${(props: ValueLeftProps) =>\n        props.multi && props.hasValue ? 'wrap' : 'nowrap'};\n    user-select: none;\n    min-width: 0;\n    box-sizing: border-box;\n    margin: ${(props: ValueLeftProps) =>\n        props.multi && props.hasValue ? '-2px -5px' : 0};\n`;\n\nconst ValueRight = styled.div`\n    display: flex;\n    align-items: center;\n    margin-left: 4px;\n    box-sizing: border-box;\n`;\n\nconst Placeholder = styled(SelectLabel)`\n    color: #aaa;\n`;\n\nconst Clearer = styled(Button)`\n    margin-right: 6px;\n    color: #ccc;\n\n    &:hover {\n        color: #333;\n    }\n`;\n\nconst Search = styled.span`\n    min-width: 1px;\n    margin-left: -1px;\n    height: 16px;\n    opacity: ${(props: SearchProps) => (props.canSearch ? 1 : 0)};\n    user-select: text;\n    position: ${(props: SearchProps) =>\n        props.canSearch ? 'static' : 'absolute'};\n\n    &:focus {\n        outline: none;\n    }\n`;\n\nexport class Value extends React.PureComponent<ValueProps> {\n    search: React.RefObject<HTMLSpanElement>;\n\n    constructor(props: ValueProps) {\n        super(props);\n\n        this.search = React.createRef();\n\n        const window = getWindow();\n\n        if (window) {\n            window.addEventListener('blur', this.blur);\n        }\n    }\n\n    public componentDidUpdate(prevProps: ValueProps): void {\n        if (prevProps.search && !this.props.search && this.search.current) {\n            this.search.current.innerText = '';\n        }\n\n        if (prevProps.focused !== this.props.focused && this.props.focused) {\n            this.focus();\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            options = [],\n            value,\n            disabled,\n            clearable,\n            open,\n            mobile,\n            multi,\n            focused,\n            error\n        } = this.props;\n        const ArrowComponent = this.props.arrowComponent;\n        const valueOptions = getValueOptions(options, value);\n        const showClearer = Boolean(\n            clearable && valueOptions.length && !mobile\n        );\n        const searchAtStart = !multi || valueOptions.length === 0;\n        const searchAtEnd = multi && valueOptions.length > 0;\n\n        return (\n            <ValueContainer\n                data-role=\"value\"\n                className=\"react-slct-value\"\n                disabled={disabled}\n                mobile={mobile}\n                focused={focused}\n                error={error}\n                onClick={this.onClick}\n            >\n                <ValueLeft\n                    className=\"value-left\"\n                    multi={multi}\n                    hasValue={!!valueOptions.length}\n                >\n                    {searchAtStart && this.renderSearch()}\n                    {this.renderValues(valueOptions)}\n                    {searchAtEnd && this.renderSearch()}\n                </ValueLeft>\n                <ValueRight className=\"value-right\">\n                    {showClearer && (\n                        <Clearer\n                            type=\"button\"\n                            tabIndex={-1}\n                            className=\"clearer\"\n                            onClick={this.onClear}\n                        >\n                            ×\n                        </Clearer>\n                    )}\n                    <ArrowButton type=\"button\" className=\"arrow\" tabIndex={-1}>\n                        {ArrowComponent ? (\n                            <ArrowComponent open={open} />\n                        ) : open ? (\n                            '▲'\n                        ) : (\n                            '▼'\n                        )}\n                    </ArrowButton>\n                </ValueRight>\n            </ValueContainer>\n        );\n    }\n\n    private renderSearch(): React.ReactNode {\n        const {\n            open,\n            disabled,\n            searchable,\n            onSearchFocus,\n            onSearchBlur\n        } = this.props;\n        const canSearch = open && searchable;\n\n        if (disabled) {\n            return null;\n        }\n\n        return (\n            <Search\n                className=\"search\"\n                contentEditable\n                canSearch={canSearch}\n                onInput={this.onSearch}\n                onKeyDown={this.onKeyDown}\n                onFocus={onSearchFocus}\n                onBlur={onSearchBlur}\n                ref={this.search as any}\n            />\n        );\n    }\n\n    private renderValues(valueOptions: Option[]): React.ReactNode {\n        const {\n            placeholder,\n            search,\n            labelComponent,\n            valueComponentSingle,\n            valueComponentMulti,\n            multi\n        } = this.props;\n\n        if (search && !multi) {\n            return null;\n        }\n\n        if (valueOptions.length === 0 && !search) {\n            return <Placeholder>{placeholder}</Placeholder>;\n        }\n\n        const Single = valueComponentSingle || ValueComponentSingle;\n        const Multi = (valueComponentMulti || ValueComponentMulti) as any;\n\n        return valueOptions.map(option =>\n            multi ? (\n                <Multi\n                    key={toKey(option.value)}\n                    option={option}\n                    labelComponent={labelComponent}\n                    options={valueOptions}\n                    onRemove={this.props.onOptionRemove}\n                />\n            ) : (\n                <Single\n                    key={toKey(option.value)}\n                    option={option}\n                    labelComponent={labelComponent}\n                />\n            )\n        );\n    }\n\n    private focus(): void {\n        if (this.search.current) {\n            this.search.current.focus();\n        }\n    }\n\n    @bind\n    private blur(): void {\n        if (this.search.current) {\n            this.search.current.blur();\n        }\n    }\n\n    @bind\n    private onClick(): void {\n        if (!this.props.disabled) {\n            this.focus();\n            this.props.onClick();\n        }\n    }\n\n    @bind\n    private onClear(e: React.SyntheticEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClear();\n    }\n\n    @bind\n    private onSearch(e: React.KeyboardEvent<HTMLSpanElement>) {\n        if (this.props.searchable) {\n            this.props.onSearch(e.currentTarget.innerText.trim());\n        } else {\n            e.preventDefault();\n        }\n    }\n\n    @bind\n    private onKeyDown(e: React.KeyboardEvent<HTMLSpanElement>) {\n        const { searchable } = this.props;\n\n        if (e.metaKey) {\n            return;\n        }\n\n        if (\n            (!searchable && e.keyCode !== keys.TAB) ||\n            e.keyCode === keys.ENTER ||\n            e.keyCode === keys.ARROW_UP ||\n            e.keyCode === keys.ARROW_DOWN\n        ) {\n            e.preventDefault();\n        }\n    }\n}\n","import { bind } from 'lodash-decorators';\nimport * as React from 'react';\nimport styled from 'styled-components';\nimport { ValueComponentMultiProps } from './typings';\nimport { SelectLabel } from './label';\n\ninterface RemoveProps<T = any> {\n    value: T;\n    onClick(value: T): void;\n}\n\nclass Remove extends React.PureComponent<RemoveProps> {\n    private static StyledRemove = styled.button`\n        cursor: pointer;\n        color: #007eff;\n        border: none;\n        background: none;\n        padding: 2px 4px;\n        margin: 0;\n        margin-right: 4px;\n        line-height: 1;\n        display: inline-block;\n        border-right: 1px solid rgba(0, 126, 255, 0.24);\n        margin-left: -2px;\n        font-size: 13px;\n\n        &:hover {\n            background-color: rgba(0, 113, 230, 0.08);\n        }\n\n        &:focus {\n            outline: none;\n        }\n    `;\n\n    public render(): React.ReactNode {\n        const { StyledRemove } = Remove;\n\n        return (\n            <StyledRemove\n                className=\"remove\"\n                type=\"button\"\n                tabIndex={-1}\n                onClick={this.onClick}\n            >\n                ×\n            </StyledRemove>\n        );\n    }\n\n    @bind\n    private onClick(e: React.SyntheticEvent<HTMLButtonElement>): void {\n        e.stopPropagation();\n\n        this.props.onClick(this.props.value);\n    }\n}\n\nexport class ValueComponentMulti<T = any> extends React.PureComponent<\n    ValueComponentMultiProps<T>\n> {\n    private static TagContainer = styled.div`\n        display: flex;\n        padding: 0px 3px;\n        background-color: rgba(0, 126, 255, 0.08);\n        border-radius: 2px;\n        border: 1px solid rgba(0, 126, 255, 0.24);\n        color: #007eff;\n        font-size: 0.9em;\n        line-height: 1.4;\n        margin: 2px 3px;\n        align-items: center;\n\n        &:last-of-type {\n            margin-right: 5px;\n        }\n    `;\n\n    public render(): React.ReactNode {\n        const { TagContainer } = ValueComponentMulti;\n        const { option, labelComponent, onRemove } = this.props;\n        const Label = (labelComponent || SelectLabel) as any;\n\n        return (\n            <TagContainer className=\"value-multi\" {...option}>\n                <Remove value={option.value} onClick={onRemove}>\n                    ×\n                </Remove>\n                <Label {...option}>{option.label}</Label>\n            </TagContainer>\n        );\n    }\n}\n","import { bind } from 'lodash-decorators';\nimport * as React from 'react';\nimport styled from 'styled-components';\nimport { SelectLabel } from './label';\nimport { OptionComponentProps } from './typings';\n\ninterface OptionItemProps {\n    active?: OptionComponentProps['active'];\n    selected?: OptionComponentProps['selected'];\n    height?: OptionComponentProps['height'];\n}\n\nexport class OptionComponent extends React.PureComponent<OptionComponentProps> {\n    public static OptionItem = styled.div`\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        flex: 1;\n        height: ${(props: OptionItemProps) => props.height || 32}px;\n        padding: 0 10px;\n        min-width: 0;\n        cursor: pointer;\n        box-sizing: border-box;\n        background-color: ${(props: OptionItemProps) =>\n            props.active ? '#ddd' : props.selected ? '#eee' : '#fff'};\n\n        &:hover {\n            background-color: ${(props: OptionItemProps) =>\n                props.active ? '#ddd' : '#eee'};\n        }\n    `;\n\n    public render(): React.ReactNode {\n        const { OptionItem } = OptionComponent;\n        const { active, selected, labelComponent, option, height } = this.props;\n        const Label = (labelComponent ? labelComponent : SelectLabel) as any;\n        const className = [\n            'option',\n            selected ? 'selected' : null,\n            active ? 'active' : null\n        ].filter(v => Boolean(v));\n\n        return (\n            <OptionItem\n                className={className.join(' ')}\n                selected={selected}\n                active={active}\n                height={height}\n                onClick={this.onClick}\n            >\n                <Label {...option}>{option.label}</Label>\n            </OptionItem>\n        );\n    }\n\n    @bind\n    private onClick(): void {\n        this.props.onSelect(this.props.option.value, this.props.option);\n    }\n}\n","import * as React from 'react';\nimport { render } from 'react-dom';\nimport { createGlobalStyle } from 'styled-components';\n\nconst id = 'react-slct-style';\n\nfunction create() {\n    const ReactSlctStyle = createGlobalStyle`\n        .react-slct, .react-slct-menu {\n            --react-slct-error-color: #ff5c5c; \n        }\n    `;\n    const reactSlctDiv = document.createElement('div');\n\n    reactSlctDiv.id = id;\n    document.body.appendChild(reactSlctDiv);\n\n    render(<ReactSlctStyle />, reactSlctDiv);\n}\n\nif (!document.getElementById(id)) {\n    create();\n}\n"]}